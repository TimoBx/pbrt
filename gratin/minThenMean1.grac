<Gratin type="node">
 <int name="majorVersion" val="0"/>
 <int name="minorVersion" val="3"/>
 <string name="coreHandleStringId" val="_GRATIN_GROUPED_NODES_ID_"/>
 <uint name="coreHandleVersion" val="1"/>
 <string name="nodeStringId-0" val="_GRATIN_GROUPED_NODES_ID_"/>
 <uint name="nodeVersion-0" val="1"/>
 <string name="nodeName-0" val="minThenMean"/>
 <string name="nodePath-0" val="Custom/"/>
 <string name="nodeDesc-0" val="minThenMean"/>
 <string name="nodeHelp-0" val="Min Color, then Global Mean Color"/>
 <uint name="nodeId-0" val="11"/>
 <uint name="nodeGraphId-0" val="0"/>
 <vector2f name="nodePos-0">
  <float name="0" val="3362.58"/>
  <float name="1" val="975.831"/>
 </vector2f>
 <int name="nodeInputNameSize-0" val="2"/>
 <int name="nodeOutputNameSize-0" val="1"/>
 <string name="nodeInputName-0-0" val="img01"/>
 <string name="nodeInputName-0-1" val="img02"/>
 <string name="nodeOutputName-0-0" val="meanColor"/>
 <bool name="nodeHasWidget-0" val="1"/>
 <IOData name="node-0">
  <uint name="nbNodes" val="2"/>
  <string name="nodeStringId-0" val="minColorID"/>
  <uint name="nodeVersion-0" val="1"/>
  <string name="nodeName-0" val="minColor"/>
  <string name="nodePath-0" val="Imaging/operators"/>
  <string name="nodeDesc-0" val="Min of 2 images"/>
  <string name="nodeHelp-0" val="Return the minimum color (RGBA channels) between 2 images. "/>
  <uint name="nodeId-0" val="0"/>
  <uint name="nodeGraphId-0" val="0"/>
  <vector2f name="nodePos-0">
   <float name="0" val="-817.48"/>
   <float name="1" val="0.0506592"/>
  </vector2f>
  <int name="nodeInputNameSize-0" val="2"/>
  <int name="nodeOutputNameSize-0" val="1"/>
  <string name="nodeInputName-0-0" val="img01"/>
  <string name="nodeInputName-0-1" val="img02"/>
  <string name="nodeOutputName-0-0" val="image"/>
  <string name="nodeStringId-1" val="globalMeanColorID"/>
  <uint name="nodeVersion-1" val="1"/>
  <string name="nodeName-1" val="globalMeanColor"/>
  <string name="nodePath-1" val="Analysis/global"/>
  <string name="nodeDesc-1" val="Mean color of an image"/>
  <string name="nodeHelp-1" val="Compute the mean color of an image. &#xa;The resulting color is stored in the last level of the output pyramid. &#xa;It can be accessed via the following formula: &#xa;&#xa;vec2 s = vec2(textureSize(image,0)); &#xa;float l = 1. + floor(log2(max(s.x,s.y))); &#xa;vec4 color = textureLod(image,vec2(.5),l); "/>
  <uint name="nodeId-1" val="1"/>
  <uint name="nodeGraphId-1" val="0"/>
  <vector2f name="nodePos-1">
   <float name="0" val="817.481"/>
   <float name="1" val="-0.0507812"/>
  </vector2f>
  <int name="nodeInputNameSize-1" val="1"/>
  <int name="nodeOutputNameSize-1" val="1"/>
  <string name="nodeInputName-1-0" val="image"/>
  <string name="nodeOutputName-1-0" val="meanColor"/>
  <uint name="nbConnections-0-1" val="1"/>
  <vector2u name="connection-0-1-0">
   <uint name="0" val="0"/>
   <uint name="1" val="0"/>
  </vector2u>
  <bool name="nodeHasWidget-0" val="1"/>
  <IOData name="node-0">
   <string name="genericGlslVersion" val="410"/>
   <string name="genericNodeName" val="minColor"/>
   <bool name="genericUseVertex" val="0"/>
   <bool name="genericUseTesselation" val="0"/>
   <bool name="genericUseGeometry" val="0"/>
   <bool name="genericUseFragment" val="1"/>
   <int name="genericOutFilter" val="9729"/>
   <int name="genericOutWrap" val="33071"/>
   <bool name="genericUseDepthTest" val="0"/>
   <bool name="genericUseBlending" val="0"/>
   <uint name="genericDepthFunc" val="513"/>
   <uint name="genericBlendSrc" val="1"/>
   <uint name="genericBlendDst" val="0"/>
   <vector4f name="genericBackground">
    <float name="0" val="0"/>
    <float name="1" val="0"/>
    <float name="2" val="0"/>
    <float name="3" val="0"/>
   </vector4f>
   <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
   <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
   <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 image;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
   <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;vec4 col1 = texture(img01,texcoord);&#xa;&#x9;vec4 col2 = texture(img02,texcoord);&#xa;&#x9;image = min(col1,col2);&#xa;}&#xa;"/>
   <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
   <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
   <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
   <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
   <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
   <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
   <vector2f name="genericTSize">
    <float name="0" val="1"/>
    <float name="1" val="1"/>
   </vector2f>
   <vector2f name="genericTOffset">
    <float name="0" val="0"/>
    <float name="1" val="0"/>
   </vector2f>
   <bool name="genericNeedMouse" val="0"/>
   <bool name="genericNeedKeyboard" val="0"/>
   <uint name="genericNbWidgets" val="0"/>
  </IOData>
  <IOData name="nodeWidget-0">
   <uint name="nbChildren" val="0"/>
  </IOData>
  <vector2f name="nodeInputPos-0-0">
   <float name="0" val="112.64"/>
   <float name="1" val="1267.2"/>
  </vector2f>
  <vector2f name="nodeInputPos-0-1">
   <float name="0" val="112.64"/>
   <float name="1" val="28.16"/>
  </vector2f>
  <vector2f name="nodeOutputPos-0-0">
   <float name="0" val="112.64"/>
   <float name="1" val="28.16"/>
  </vector2f>
  <bool name="nodeHasWidget-1" val="1"/>
  <IOData name="node-1">
   <int name="processMode" val="0"/>
   <string name="genericGlslVersion" val="410"/>
   <string name="genericNodeName" val="globalMeanColor"/>
   <bool name="genericUseVertex" val="0"/>
   <bool name="genericUseTesselation" val="0"/>
   <bool name="genericUseGeometry" val="0"/>
   <bool name="genericUseFragment" val="1"/>
   <int name="genericOutFilter" val="9728"/>
   <int name="genericOutWrap" val="33071"/>
   <bool name="genericUseDepthTest" val="0"/>
   <bool name="genericUseBlending" val="0"/>
   <uint name="genericDepthFunc" val="513"/>
   <uint name="genericBlendSrc" val="1"/>
   <uint name="genericBlendDst" val="0"/>
   <vector4f name="genericBackground">
    <float name="0" val="0"/>
    <float name="1" val="0"/>
    <float name="2" val="0"/>
    <float name="3" val="0"/>
   </vector4f>
   <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
   <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
   <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 meanColor;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
   <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;if(isFinest)&#xa;&#x9;&#x9;meanColor = texture(image,texcoord);&#xa;&#x9;else {&#xa;&#x9;&#x9;vec2 ps = .5/vec2(textureSize(prevLevel0,0));&#xa;&#x9;&#x9;vec4 c1 = texture(prevLevel0,texcoord+ps);&#xa;&#x9;&#x9;vec4 c2 = texture(prevLevel0,texcoord-ps);&#xa;&#x9;&#x9;vec4 c3 = texture(prevLevel0,texcoord+vec2(ps.x,-ps.y));&#xa;&#x9;&#x9;vec4 c4 = texture(prevLevel0,texcoord+vec2(-ps.x,ps.y));&#xa;&#x9;&#x9;meanColor = .25*(c1+c2+c3+c4);&#xa;&#x9;}&#xa;}&#xa;"/>
   <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
   <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
   <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
   <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
   <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
   <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
   <vector2f name="genericTSize">
    <float name="0" val="1"/>
    <float name="1" val="1"/>
   </vector2f>
   <vector2f name="genericTOffset">
    <float name="0" val="0"/>
    <float name="1" val="0"/>
   </vector2f>
   <bool name="genericNeedMouse" val="0"/>
   <bool name="genericNeedKeyboard" val="0"/>
   <uint name="genericNbWidgets" val="0"/>
  </IOData>
  <IOData name="nodeWidget-1">
   <uint name="nbChildren" val="0"/>
  </IOData>
  <vector2f name="nodeInputPos-1-0">
   <float name="0" val="112.64"/>
   <float name="1" val="28.16"/>
  </vector2f>
  <vector2f name="nodeOutputPos-1-0">
   <float name="0" val="112.64"/>
   <float name="1" val="28.16"/>
  </vector2f>
 </IOData>
 <IOData name="nodeWidget-0">
  <uint name="nbChildren" val="2"/>
  <IOData name="childWidget-0">
   <uint name="nbChildren" val="0"/>
  </IOData>
  <IOData name="childWidget-1">
   <uint name="nbChildren" val="0"/>
  </IOData>
 </IOData>
 <vector2f name="nodeInputPos-0-0">
  <float name="0" val="112.64"/>
  <float name="1" val="1267.2"/>
 </vector2f>
 <vector2f name="nodeInputPos-0-1">
  <float name="0" val="112.64"/>
  <float name="1" val="28.16"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-0">
  <float name="0" val="112.64"/>
  <float name="1" val="28.16"/>
 </vector2f>
</Gratin>

<Gratin type="node">
 <int name="majorVersion" val="0"/>
 <int name="minorVersion" val="2"/>
 <string name="coreHandleStringId" val="imgGenericId"/>
 <uint name="coreHandleVersion" val="1"/>
 <string name="nodeStringId-0" val="ENV_MAPPING_ID_"/>
 <uint name="nodeVersion-0" val="1"/>
 <string name="nodeName-0" val="environmentMapping"/>
 <string name="nodePath-0" val="rendering/"/>
 <string name="nodeDesc-0" val="A simple node for environment mapping"/>
 <string name="nodeHelp-0" val="A simple node for environment mapping."/>
 <uint name="nodeId-0" val="2"/>
 <uint name="nodeGraphId-0" val="2"/>
 <vector2f name="nodePos-0">
  <float name="0" val="1924.92"/>
  <float name="1" val="-3107.03"/>
 </vector2f>
 <int name="nodeInputNameSize-0" val="2"/>
 <int name="nodeOutputNameSize-0" val="1"/>
 <string name="nodeInputName-0-0" val="normals"/>
 <string name="nodeInputName-0-1" val="latLongMap"/>
 <string name="nodeOutputName-0-0" val="envMapping"/>
 <bool name="nodeHasWidget-0" val="1"/>
 <IOData name="node-0">
  <string name="genericGlslVersion" val="420"/>
  <string name="genericNodeName" val="envMapping"/>
  <bool name="genericUseVertex" val="0"/>
  <bool name="genericUseTesselation" val="0"/>
  <bool name="genericUseGeometry" val="0"/>
  <bool name="genericUseFragment" val="1"/>
  <int name="genericOutFilter" val="9729"/>
  <int name="genericOutWrap" val="33071"/>
  <bool name="genericUseDepthTest" val="0"/>
  <bool name="genericUseBlending" val="0"/>
  <uint name="genericDepthFunc" val="513"/>
  <uint name="genericBlendSrc" val="1"/>
  <uint name="genericBlendDst" val="0"/>
  <vector4f name="genericBackground">
   <float name="0" val="0"/>
   <float name="1" val="0"/>
   <float name="2" val="0"/>
   <float name="3" val="0"/>
  </vector4f>
  <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D normals;&#xa;uniform sampler2D latLongMap;&#xa;"/>
  <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
  <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 envMapping;&#xa;uniform sampler2D normals;&#xa;uniform sampler2D latLongMap;&#xa;"/>
  <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;#define PI 3.1415926535897&#xa;#define PIO2 1.5707963267948&#xa;#define PIT2 6.2831853071795&#xa;#define fovy 30&#xa;&#xa;float atan2(in float y,in float x) {&#xa;&#x9;if(x>0.0) return atan(y/x);&#xa;&#x9;if(y>=0.0 &amp;&amp; x&lt;0.0) return PI+atan(y/x);&#xa;&#x9;if(y&lt;0.0 &amp;&amp; x&lt;0.0) return -PI+atan(y/x);&#xa;&#x9;if(y>0.0 &amp;&amp; x==0.0) return PIO2;&#xa;&#x9;if(y&lt;0.0 &amp;&amp; x==0.0) return -PIO2;&#xa;&#x9;return 0.0;&#xa;}&#xa;&#xa;vec2 envMapCoord(in vec3 r) {&#xa;&#x9;return vec2((atan2(r.x,r.z)+PI)/PIT2,acos(-r.y)/PI);&#xa;}&#xa;&#xa;void main(void){&#xa;&#x9;vec3 n = texture(normals,texcoord).xyz;&#xa;&#x9;vec2 p = -1.0+2.0*texcoord;&#xa;&#x9;vec3 v = normalize(vec3(1,0,0)*p.x+vec3(0,1,0)*p.y+fovy*vec3(0,0,-1));&#xa;&#x9;vec3 r = reflect(v,n);&#xa;&#xa;&#x9;// get uv coord from a 3D vector&#xa;&#x9;vec2 uv = envMapCoord(r);&#xa;&#x9;&#xa;&#x9;// return the corresponding color&#xa;&#x9;envMapping.xyz = texture(latLongMap,uv).xyz;&#xa;&#x9;envMapping.w = length(n.xyz);&#xa;}"/>
  <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D normals;&#xa;uniform sampler2D latLongMap;&#xa;"/>
  <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
  <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform sampler2D normals;&#xa;uniform sampler2D latLongMap;&#xa;"/>
  <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
  <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D normals;&#xa;uniform sampler2D latLongMap;&#xa;"/>
  <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
  <vector2f name="genericTSize">
   <float name="0" val="1"/>
   <float name="1" val="1"/>
  </vector2f>
  <vector2f name="genericTOffset">
   <float name="0" val="0"/>
   <float name="1" val="0"/>
  </vector2f>
  <bool name="genericNeedMouse" val="0"/>
  <bool name="genericNeedKeyboard" val="0"/>
  <uint name="genericNbWidgets" val="0"/>
 </IOData>
 <IOData name="nodeWidget-0">
  <uint name="nbChildren" val="0"/>
 </IOData>
 <vector2f name="nodeInputPos-0-0">
  <float name="0" val="56.32"/>
  <float name="1" val="28.16"/>
 </vector2f>
 <vector2f name="nodeInputPos-0-1">
  <float name="0" val="88"/>
  <float name="1" val="22"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-0">
  <float name="0" val="56.32"/>
  <float name="1" val="28.16"/>
 </vector2f>
</Gratin>

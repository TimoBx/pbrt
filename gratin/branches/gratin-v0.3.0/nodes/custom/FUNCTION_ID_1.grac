<Gratin type="node">
 <int name="majorVersion" val="0"/>
 <int name="minorVersion" val="2"/>
 <string name="coreHandleStringId" val="imgGenericId"/>
 <uint name="coreHandleVersion" val="1"/>
 <string name="nodeStringId-0" val="FUNCTION_ID_"/>
 <uint name="nodeVersion-0" val="1"/>
 <string name="nodeName-0" val="curveFunction"/>
 <string name="nodePath-0" val="visualization/"/>
 <string name="nodeDesc-0" val="A simple node to visualize a function"/>
 <string name="nodeHelp-0" val="A simple node to visualize a function.&#xa;&#xa;If you change the size of the node, remember to change the value of var &quot;metrics&quot;.&#xa;metrics = vec4(width, height, 1/width, 1/height);&#xa;&#xa;The function is defined in distToFunc.&#xa;&#xa;You can modifie the parameters metrics, size, origin, lineWidth, frameWidth, frameColor and funcColor."/>
 <uint name="nodeId-0" val="3"/>
 <uint name="nodeGraphId-0" val="3"/>
 <vector2f name="nodePos-0">
  <float name="0" val="1820.18"/>
  <float name="1" val="-4719.09"/>
 </vector2f>
 <int name="nodeInputNameSize-0" val="0"/>
 <int name="nodeOutputNameSize-0" val="1"/>
 <string name="nodeOutputName-0-0" val="outBuff"/>
 <bool name="nodeHasWidget-0" val="1"/>
 <IOData name="node-0">
  <string name="genericGlslVersion" val="420"/>
  <string name="genericNodeName" val="function"/>
  <bool name="genericUseVertex" val="0"/>
  <bool name="genericUseTesselation" val="0"/>
  <bool name="genericUseGeometry" val="0"/>
  <bool name="genericUseFragment" val="1"/>
  <int name="genericOutFilter" val="9729"/>
  <int name="genericOutWrap" val="33071"/>
  <bool name="genericUseDepthTest" val="0"/>
  <bool name="genericUseBlending" val="0"/>
  <uint name="genericDepthFunc" val="513"/>
  <uint name="genericBlendSrc" val="1"/>
  <uint name="genericBlendDst" val="0"/>
  <vector4f name="genericBackground">
   <float name="0" val="0"/>
   <float name="1" val="0"/>
   <float name="2" val="0"/>
   <float name="3" val="0"/>
  </vector4f>
  <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;"/>
  <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
  <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuff;&#xa;"/>
  <string name="genericFragBody" val="in vec2 texcoord;&#xa;vec4 metrics = vec4(512, 512, 1.0 / 512.0, 1.0 / 512.0); // in pixel size&#xa;vec2 size = vec2(8, 8); // in frame size&#xa;vec2 origin = vec2(4, 4); // in frame coordinates&#xa;float lineWidth = 1; // in pixel size&#xa;float frameWidth = 1; // in pixel size&#xa;vec4 frameColor = vec4(0, 0, 0, 1);&#xa;vec4 funcColor = vec4(1, 0, 0, 1);&#xa;&#xa;// Return the distance from por to each functions (all in frame coordinates)&#xa;float distToFunc(vec2 pos) {&#xa;&#x9;return sqrt(pos.x * pos.x + pos.y * pos.y) - 2;&#xa;}&#xa;&#xa;vec2 rToView(vec2 coord) {&#xa;&#x9;return coord * size - origin;&#xa;}&#xa;&#xa;vec2 viewToR(vec2 pos) {&#xa;&#x9;return (pos + origin) / size;&#xa;}&#xa;&#xa;float getOffset() {&#xa;&#x9;float dist = abs(distToFunc(rToView(texcoord)));&#xa;&#x9;float minOffset = abs(dist / size.y) * metrics.y;&#xa;&#x9;int i = 0;&#xa;&#x9;while(i &lt;= lineWidth / 2.0 &amp;&amp; i &lt; minOffset) {&#xa;&#x9;&#x9;for(int j = -1; j &lt; 2; j = j + 2) {&#xa;&#x9;&#x9;&#x9;dist = abs(distToFunc(rToView(texcoord + j * vec2(0, metrics.z))));&#xa;&#x9;&#x9;&#x9;float currOffset = dist / size.y * metrics.y;&#xa;&#x9;&#x9;&#x9;currOffset = sqrt(i * i + currOffset * currOffset);&#xa;&#x9;&#x9;&#x9;minOffset = min(minOffset, currOffset);&#xa;&#x9;&#x9;}&#xa;&#x9;&#x9;i = i + 1;&#xa;&#x9;}&#xa;&#x9;return minOffset;&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;vec4 font = vec4(1);&#xa;&#x9;vec2 pos = abs(rToView(texcoord) / size) * metrics.xy;&#xa;&#x9;float offset2 = min(pos.x, pos.y);&#xa;&#x9;if(offset2 &lt;= frameWidth / 2.0) {&#xa;&#x9;&#x9;font = frameColor;&#xa;&#x9;} else if(offset2 &lt;= (frameWidth / 2.0) + 1) {&#xa;&#x9;&#x9;font = mix(frameColor, vec4(1), offset2 - frameWidth / 2.0);&#xa;&#x9;} &#xa;&#x9;float offset = getOffset();&#xa;&#x9;if(offset &lt;= lineWidth / 2.0) {&#xa;&#x9;&#x9;outBuff = funcColor;&#xa;&#x9;} else if(offset &lt;= (lineWidth / 2.0) + 1) {&#xa;&#x9;&#x9;outBuff = mix(funcColor, font, offset - (lineWidth / 2.0));&#xa;&#x9;} else {&#xa;&#x9;&#x9;outBuff = font;&#xa;&#x9;}&#xa;}&#xa;"/>
  <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;"/>
  <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
  <string name="genericTessEHead" val="#version 420&#xa;&#xa;"/>
  <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
  <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;"/>
  <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
  <vector2f name="genericTSize">
   <float name="0" val="0"/>
   <float name="1" val="0"/>
  </vector2f>
  <vector2f name="genericTOffset">
   <float name="0" val="512"/>
   <float name="1" val="512"/>
  </vector2f>
  <bool name="genericNeedMouse" val="0"/>
  <bool name="genericNeedKeyboard" val="0"/>
  <uint name="genericNbWidgets" val="0"/>
 </IOData>
 <IOData name="nodeWidget-0">
  <uint name="nbChildren" val="0"/>
 </IOData>
 <vector2f name="nodeOutputPos-0-0">
  <float name="0" val="56.32"/>
  <float name="1" val="28.16"/>
 </vector2f>
</Gratin>

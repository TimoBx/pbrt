<gratin file="customNode">
 <string val="eigenVecsValsFromMat2x2" name="customHandleName"/>
 <string val="statistics/matrices/" name="customHandlePath"/>
 <string val="extract eigenvectors and eigenvalues from an input array of 2x2 symetric matrices" name="customHandleDesc"/>
 <string val="extract eigenvectors and eigenvalues from an input array of 2x2 symetric matrices.&lt;br>&#xa;&lt;br>&#xa;The resulting RGBA image contains the normalized principal maximal direction in the R and G components, and the max and min eigen values in the B and A components, respectively.&lt;br>&#xa;" name="customHandleHelp"/>
 <int val="1" name="customHandleInputDescSize"/>
 <int val="1" name="customHandleOutputDescSize"/>
 <string val="matrix2x2" name="customHandleInputDesc-0"/>
 <string val="eigenVecsVals" name="customHandleOutputDesc-0"/>
 <string val="imgGeneric" name="origHandleName"/>
 <string val="generic/" name="origHandlePath"/>
 <string val="Generic node for image processing" name="origHandleDesc"/>
 <string val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node beacause these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;" name="origHandleHelp"/>
 <int val="1" name="origHandleInputDescSize"/>
 <int val="1" name="origHandleOutputDescSize"/>
 <string val="matrix2x2" name="origHandleInputDesc-0"/>
 <string val="eigenVecsVals" name="origHandleOutputDesc-0"/>
 <string val="imgGeneric" name="nodeName-0"/>
 <string val="generic/" name="nodePath-0"/>
 <uint val="14" name="nodeId-0"/>
 <uint val="0" name="nodeGraphId-0"/>
 <uint val="1" name="nbInputs-0"/>
 <uint val="1" name="nbOutputs-0"/>
 <vector2f name="nodePos-0">
  <float val="1701.87" name="0"/>
  <float val="-3627.81" name="1"/>
 </vector2f>
 <bool val="0" name="nodeGrouped-0"/>
 <bool val="1" name="nodeHasWidget-0"/>
 <IOData name="node-0">
  <string val="matrix2x2" name="genericIName-0"/>
  <string val="eigenVecsVals" name="genericOName-0"/>
  <vector2f name="genericTSize">
   <float val="1" name="0"/>
   <float val="1" name="1"/>
  </vector2f>
  <vector2f name="genericTOffset">
   <float val="0" name="0"/>
   <float val="0" name="1"/>
  </vector2f>
  <bool val="0" name="genericNeedMouse"/>
  <uint val="1" name="genericNbSliderFloat"/>
  <bool val="1" name="genericSliderFloatIsKF-0"/>
  <string val="scale" name="genericSliderFloatName-0"/>
  <uint val="0" name="genericNbSliderInt"/>
  <string val="#version 330&#xa;&#xa;in vec2 texcoord;&#xa;&#xa;layout(location = 0) out vec4 eigenVecsVals;&#xa;uniform sampler2D matrix2x2;&#xa;uniform float scale;&#xa;" name="genericHead"/>
  <string val="void main() {&#xa;  const float minl = 0.000000000001;&#xa;  vec4 m = texture(matrix2x2,texcoord);&#xa;&#xa;  float tmp = sqrt(m.x*m.x+4.0*m.z*m.z-2.0*m.x*m.y+m.y*m.y);&#xa;  float k1  = 0.5*(m.x+m.y+tmp);&#xa;  float k2  = 0.5*(m.x+m.y-tmp);&#xa;  vec2  d1  = vec2(m.z,k1-m.x);&#xa;  vec2  d2  = vec2(k1-m.x,-m.z);&#xa;&#xa;  k1 *=scale;&#xa;  k2 *=scale;&#xa;&#xa;  d1 = length(d1)&lt;minl ? vec2(0.0) : normalize(d1);&#xa;  d2 = length(d2)&lt;minl ? vec2(0.0) : normalize(d2);&#xa;&#xa;  // store max dir, max value, min value&#xa;  if(k1>k2) {&#xa;    eigenVecsVals = vec4(d1,vec2(k1,k2))*m.w;&#xa;  } else {&#xa;    eigenVecsVals = vec4(d2,vec2(k2,k1))*m.w;&#xa;  }&#xa;}" name="genericBody"/>
 </IOData>
 <IOData name="nodeWidget-0">
  <uint val="1" name="nbChildren"/>
  <IOData name="childWidget-0">
   <IOData name="keyframedFloat">
    <float val="0" name="minVal"/>
    <float val="1000" name="maxVal"/>
    <float val="1000" name="currentVal"/>
    <IOData name="curve">
     <int val="0" name="interpType"/>
     <int val="0" name="leftType"/>
     <int val="0" name="rightType"/>
     <IOData name="interpolator">
      <uint val="1" name="nbPoints"/>
      <uint val="0" name="nbTangents"/>
      <vector2f name="controlPoint-0">
       <float val="0" name="0"/>
       <float val="1" name="1"/>
      </vector2f>
     </IOData>
    </IOData>
   </IOData>
   <float val="1" name="sliderVal"/>
   <float val="0" name="sliderMinVal"/>
   <float val="1000" name="sliderMaxVal"/>
   <uint val="0" name="nbChildren"/>
  </IOData>
 </IOData>
 <vector2f name="nodeInputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
</gratin>

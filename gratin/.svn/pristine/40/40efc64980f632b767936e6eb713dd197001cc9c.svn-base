<Gratin type="node">
 <int val="0" name="majorVersion"/>
 <int val="2" name="minorVersion"/>
 <string val="_GRATIN_GROUPED_NODES_ID_" name="coreHandleStringId"/>
 <uint val="1" name="coreHandleVersion"/>
 <string val="_GRATIN_GROUPED_NODES_ID_" name="nodeStringId-0"/>
 <uint val="1" name="nodeVersion-0"/>
 <string val="standard_deviation" name="nodeName-0"/>
 <string val="visualization/" name="nodePath-0"/>
 <string val="Calculate the standard deviation in the input" name="nodeDesc-0"/>
 <string val="Calculate the standard deviation in the input." name="nodeHelp-0"/>
 <uint val="11" name="nodeId-0"/>
 <uint val="5" name="nodeGraphId-0"/>
 <vector2f name="nodePos-0">
  <float val="2074.36" name="0"/>
  <float val="-6235.79" name="1"/>
 </vector2f>
 <int val="1" name="nodeInputNameSize-0"/>
 <int val="1" name="nodeOutputNameSize-0"/>
 <string val="imgBuff" name="nodeInputName-0-0"/>
 <string val="outBuffer0" name="nodeOutputName-0-0"/>
 <bool val="1" name="nodeHasWidget-0"/>
 <IOData name="node-0">
  <uint val="3" name="nbNodes"/>
  <string val="pyramidGenericId" name="nodeStringId-0"/>
  <uint val="1" name="nodeVersion-0"/>
  <string val="meanColor" name="nodeName-0"/>
  <string val="generic/" name="nodePath-0"/>
  <string val="Generic node for pyramidal image processing" name="nodeDesc-0"/>
  <string val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;" name="nodeHelp-0"/>
  <uint val="0" name="nodeId-0"/>
  <uint val="0" name="nodeGraphId-0"/>
  <vector2f name="nodePos-0">
   <float val="-931.503" name="0"/>
   <float val="0.0444336" name="1"/>
  </vector2f>
  <int val="1" name="nodeInputNameSize-0"/>
  <int val="1" name="nodeOutputNameSize-0"/>
  <string val="imgBuff" name="nodeInputName-0-0"/>
  <string val="meanColor" name="nodeOutputName-0-0"/>
  <string val="pyramidGenericId" name="nodeStringId-1"/>
  <uint val="1" name="nodeVersion-1"/>
  <string val="variance" name="nodeName-1"/>
  <string val="generic/" name="nodePath-1"/>
  <string val="Generic node for pyramidal image processing" name="nodeDesc-1"/>
  <string val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;" name="nodeHelp-1"/>
  <uint val="1" name="nodeId-1"/>
  <uint val="0" name="nodeGraphId-1"/>
  <vector2f name="nodePos-1">
   <float val="-1.29297" name="0"/>
   <float val="-0.168945" name="1"/>
  </vector2f>
  <int val="1" name="nodeInputNameSize-1"/>
  <int val="1" name="nodeOutputNameSize-1"/>
  <string val="meanBuff" name="nodeInputName-1-0"/>
  <string val="variance" name="nodeOutputName-1-0"/>
  <string val="imgGenericId" name="nodeStringId-2"/>
  <uint val="1" name="nodeVersion-2"/>
  <string val="standardDeviation" name="nodeName-2"/>
  <string val="generic/" name="nodePath-2"/>
  <string val="Generic node for image processing" name="nodeDesc-2"/>
  <string val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;" name="nodeHelp-2"/>
  <uint val="2" name="nodeId-2"/>
  <uint val="0" name="nodeGraphId-2"/>
  <vector2f name="nodePos-2">
   <float val="932.796" name="0"/>
   <float val="0.125" name="1"/>
  </vector2f>
  <int val="1" name="nodeInputNameSize-2"/>
  <int val="1" name="nodeOutputNameSize-2"/>
  <string val="inBuffer0" name="nodeInputName-2-0"/>
  <string val="outBuffer0" name="nodeOutputName-2-0"/>
  <uint val="1" name="nbConnections-0-1"/>
  <vector2u name="connection-0-1-0">
   <uint val="0" name="0"/>
   <uint val="0" name="1"/>
  </vector2u>
  <uint val="0" name="nbConnections-0-2"/>
  <uint val="1" name="nbConnections-1-2"/>
  <vector2u name="connection-1-2-0">
   <uint val="0" name="0"/>
   <uint val="0" name="1"/>
  </vector2u>
  <bool val="1" name="nodeHasWidget-0"/>
  <IOData name="node-0">
   <int val="0" name="processMode"/>
   <string val="420" name="genericGlslVersion"/>
   <string val="meanColor" name="genericNodeName"/>
   <bool val="0" name="genericUseVertex"/>
   <bool val="0" name="genericUseTesselation"/>
   <bool val="0" name="genericUseGeometry"/>
   <bool val="1" name="genericUseFragment"/>
   <int val="9729" name="genericOutFilter"/>
   <int val="33071" name="genericOutWrap"/>
   <bool val="0" name="genericUseDepthTest"/>
   <bool val="0" name="genericUseBlending"/>
   <uint val="513" name="genericDepthFunc"/>
   <uint val="1" name="genericBlendSrc"/>
   <uint val="0" name="genericBlendDst"/>
   <vector4f name="genericBackground">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
    <float val="0" name="2"/>
    <float val="0" name="3"/>
   </vector4f>
   <string val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D imgBuff;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericVertHead"/>
   <string val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;" name="genericVertBody"/>
   <string val="#version 420&#xa;&#xa;layout(location = 0) out vec4 meanColor;&#xa;uniform sampler2D imgBuff;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericFragHead"/>
   <string val="in vec2 texcoord;&#xa;void main() {&#xa;&#x9;if(isFinest)&#xa;&#x9;&#x9;meanColor = texture(imgBuff,texcoord);&#xa;&#x9;else {&#xa;&#x9;&#x9;vec2 offset = 0.5 / textureSize(prevLevel0, 0);&#xa;&#x9;&#x9;vec4 c1 = texture(prevLevel0,texcoord + vec2(1, 1) * offset);&#xa;&#x9;&#x9;vec4 c2 = texture(prevLevel0,texcoord + vec2(1, -1) * offset);&#xa;&#x9;&#x9;vec4 c3 = texture(prevLevel0,texcoord + vec2(-1, 1) * offset);&#xa;&#x9;&#x9;vec4 c4 = texture(prevLevel0,texcoord + vec2(-1, -1) * offset);&#xa;&#x9;&#x9;meanColor = 0.25 * (c1 + c2 + c3 + c4);&#xa;&#x9;}&#xa;}" name="genericFragBody"/>
   <string val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D imgBuff;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericTessCHead"/>
   <string val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;" name="genericTessCBody"/>
   <string val="#version 420&#xa;&#xa;uniform sampler2D imgBuff;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericTessEHead"/>
   <string val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;" name="genericTessEBody"/>
   <string val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D imgBuff;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericGeomHead"/>
   <string val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}" name="genericGeomBody"/>
   <vector2f name="genericTSize">
    <float val="1" name="0"/>
    <float val="1" name="1"/>
   </vector2f>
   <vector2f name="genericTOffset">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
   </vector2f>
   <bool val="0" name="genericNeedMouse"/>
   <bool val="0" name="genericNeedKeyboard"/>
   <uint val="0" name="genericNbWidgets"/>
  </IOData>
  <IOData name="nodeWidget-0">
   <uint val="0" name="nbChildren"/>
  </IOData>
  <vector2f name="nodeInputPos-0-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-0-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <bool val="1" name="nodeHasWidget-1"/>
  <IOData name="node-1">
   <int val="0" name="processMode"/>
   <string val="420" name="genericGlslVersion"/>
   <string val="variance" name="genericNodeName"/>
   <bool val="0" name="genericUseVertex"/>
   <bool val="0" name="genericUseTesselation"/>
   <bool val="0" name="genericUseGeometry"/>
   <bool val="1" name="genericUseFragment"/>
   <int val="9729" name="genericOutFilter"/>
   <int val="33071" name="genericOutWrap"/>
   <bool val="0" name="genericUseDepthTest"/>
   <bool val="0" name="genericUseBlending"/>
   <uint val="513" name="genericDepthFunc"/>
   <uint val="1" name="genericBlendSrc"/>
   <uint val="0" name="genericBlendDst"/>
   <vector4f name="genericBackground">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
    <float val="0" name="2"/>
    <float val="0" name="3"/>
   </vector4f>
   <string val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D meanBuff;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericVertHead"/>
   <string val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;" name="genericVertBody"/>
   <string val="#version 420&#xa;&#xa;layout(location = 0) out vec4 variance;&#xa;uniform sampler2D meanBuff;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericFragHead"/>
   <string val="in vec2 texcoord;&#xa;void main() {&#xa;&#x9;if(isFinest) {&#xa;&#x9;&#x9;vec2 size = textureSize(meanBuff, 0);&#xa;&#x9;&#x9;int lod = int(floor(log2(min(size.x, size.y))));&#xa;&#x9;&#x9;variance = texture(meanBuff,texcoord);&#xa;&#x9;&#x9;variance.xyz -= textureLod(meanBuff,texcoord, lod).xyz;&#xa;&#x9;&#x9;variance *= variance;&#xa;&#x9;} else {&#xa;&#x9;&#x9;vec2 offset = 0.5 / textureSize(prevLevel0, 0);&#xa;&#x9;&#x9;vec4 c1 = texture(prevLevel0,texcoord + vec2(1, 1) * offset);&#xa;&#x9;&#x9;vec4 c2 = texture(prevLevel0,texcoord + vec2(1, -1) * offset);&#xa;&#x9;&#x9;vec4 c3 = texture(prevLevel0,texcoord + vec2(-1, 1) * offset);&#xa;&#x9;&#x9;vec4 c4 = texture(prevLevel0,texcoord + vec2(-1, -1) * offset);&#xa;&#x9;&#x9;variance = 0.25 * (c1 + c2 + c3 + c4);&#xa;&#x9;}&#xa;}" name="genericFragBody"/>
   <string val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D meanBuff;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericTessCHead"/>
   <string val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;" name="genericTessCBody"/>
   <string val="#version 420&#xa;&#xa;uniform sampler2D meanBuff;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericTessEHead"/>
   <string val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;" name="genericTessEBody"/>
   <string val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D meanBuff;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericGeomHead"/>
   <string val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}" name="genericGeomBody"/>
   <vector2f name="genericTSize">
    <float val="1" name="0"/>
    <float val="1" name="1"/>
   </vector2f>
   <vector2f name="genericTOffset">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
   </vector2f>
   <bool val="0" name="genericNeedMouse"/>
   <bool val="0" name="genericNeedKeyboard"/>
   <uint val="0" name="genericNbWidgets"/>
  </IOData>
  <IOData name="nodeWidget-1">
   <uint val="0" name="nbChildren"/>
  </IOData>
  <vector2f name="nodeInputPos-1-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-1-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <bool val="1" name="nodeHasWidget-2"/>
  <IOData name="node-2">
   <string val="420" name="genericGlslVersion"/>
   <string val="standardDeviation" name="genericNodeName"/>
   <bool val="0" name="genericUseVertex"/>
   <bool val="0" name="genericUseTesselation"/>
   <bool val="0" name="genericUseGeometry"/>
   <bool val="1" name="genericUseFragment"/>
   <int val="9729" name="genericOutFilter"/>
   <int val="33071" name="genericOutWrap"/>
   <bool val="0" name="genericUseDepthTest"/>
   <bool val="0" name="genericUseBlending"/>
   <uint val="513" name="genericDepthFunc"/>
   <uint val="1" name="genericBlendSrc"/>
   <uint val="0" name="genericBlendDst"/>
   <vector4f name="genericBackground">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
    <float val="0" name="2"/>
    <float val="0" name="3"/>
   </vector4f>
   <string val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;" name="genericVertHead"/>
   <string val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;" name="genericVertBody"/>
   <string val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;" name="genericFragHead"/>
   <string val="in vec2 texcoord;&#xa;void main() {&#xa;&#x9;vec2 size = textureSize(inBuffer0, 0);&#xa;&#x9;int lod = int(floor(log2(min(size.x, size.y))));&#xa;&#x9;outBuffer0 = sqrt(textureLod(inBuffer0,texcoord, lod));&#xa;}&#xa;" name="genericFragBody"/>
   <string val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;" name="genericTessCHead"/>
   <string val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;" name="genericTessCBody"/>
   <string val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;" name="genericTessEHead"/>
   <string val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;" name="genericTessEBody"/>
   <string val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;" name="genericGeomHead"/>
   <string val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}" name="genericGeomBody"/>
   <vector2f name="genericTSize">
    <float val="1" name="0"/>
    <float val="1" name="1"/>
   </vector2f>
   <vector2f name="genericTOffset">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
   </vector2f>
   <bool val="0" name="genericNeedMouse"/>
   <bool val="0" name="genericNeedKeyboard"/>
   <uint val="0" name="genericNbWidgets"/>
  </IOData>
  <IOData name="nodeWidget-2">
   <uint val="0" name="nbChildren"/>
  </IOData>
  <vector2f name="nodeInputPos-2-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-2-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
 </IOData>
 <IOData name="nodeWidget-0">
  <uint val="3" name="nbChildren"/>
  <IOData name="childWidget-0">
   <uint val="0" name="nbChildren"/>
  </IOData>
  <IOData name="childWidget-1">
   <uint val="0" name="nbChildren"/>
  </IOData>
  <IOData name="childWidget-2">
   <uint val="0" name="nbChildren"/>
  </IOData>
 </IOData>
 <vector2f name="nodeInputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
</Gratin>

<Gratin type="node">
 <int val="0" name="majorVersion"/>
 <int val="2" name="minorVersion"/>
 <string val="_GRATIN_GROUPED_NODES_ID_" name="coreHandleStringId"/>
 <uint val="1" name="coreHandleVersion"/>
 <string val="_GRATIN_GROUPED_NODES_ID_" name="nodeStringId-0"/>
 <uint val="1" name="nodeVersion-0"/>
 <string val="SSAO" name="nodeName-0"/>
 <string val="rendering/" name="nodePath-0"/>
 <string val="Screen space ambient occlusion" name="nodeDesc-0"/>
 <string val="This node is a simple screen space ambient occlusion based on this Nvidia Siggraph paper (2008) :&#xa;http://developer.download.nvidia.com/presentations/2008/SIGGRAPH/HBAO_SIG08b.pdf" name="nodeHelp-0"/>
 <uint val="0" name="nodeId-0"/>
 <uint val="0" name="nodeGraphId-0"/>
 <vector2f name="nodePos-0">
  <float val="490.217" name="0"/>
  <float val="344.968" name="1"/>
 </vector2f>
 <int val="2" name="nodeInputNameSize-0"/>
 <int val="1" name="nodeOutputNameSize-0"/>
 <string val="innormal" name="nodeInputName-0-0"/>
 <string val="indepth" name="nodeInputName-0-1"/>
 <string val="blurred" name="nodeOutputName-0-0"/>
 <bool val="1" name="nodeHasWidget-0"/>
 <IOData name="node-0">
  <uint val="2" name="nbNodes"/>
  <string val="imgGenericId" name="nodeStringId-0"/>
  <uint val="1" name="nodeVersion-0"/>
  <string val="ssao" name="nodeName-0"/>
  <string val="generic/" name="nodePath-0"/>
  <string val="Generic node for image processing" name="nodeDesc-0"/>
  <string val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;" name="nodeHelp-0"/>
  <uint val="0" name="nodeId-0"/>
  <uint val="0" name="nodeGraphId-0"/>
  <vector2f name="nodePos-0">
   <float val="-454.3" name="0"/>
   <float val="-2.72388" name="1"/>
  </vector2f>
  <int val="2" name="nodeInputNameSize-0"/>
  <int val="1" name="nodeOutputNameSize-0"/>
  <string val="innormal" name="nodeInputName-0-0"/>
  <string val="indepth" name="nodeInputName-0-1"/>
  <string val="ssao" name="nodeOutputName-0-0"/>
  <string val="imgGaussianBlurId" name="nodeStringId-1"/>
  <uint val="1" name="nodeVersion-1"/>
  <string val="gaussianBlur" name="nodeName-1"/>
  <string val="plugins/" name="nodePath-1"/>
  <string val="Gaussian blur" name="nodeDesc-1"/>
  <string val="The amount of blur is controled by the kernel size.&lt;br>Increase this size to increase the blur" name="nodeHelp-1"/>
  <uint val="1" name="nodeId-1"/>
  <uint val="0" name="nodeGraphId-1"/>
  <vector2f name="nodePos-1">
   <float val="454.3" name="0"/>
   <float val="2.72388" name="1"/>
  </vector2f>
  <int val="1" name="nodeInputNameSize-1"/>
  <int val="1" name="nodeOutputNameSize-1"/>
  <string val="image" name="nodeInputName-1-0"/>
  <string val="blurred" name="nodeOutputName-1-0"/>
  <uint val="1" name="nbConnections-0-1"/>
  <vector2u name="connection-0-1-0">
   <uint val="0" name="0"/>
   <uint val="0" name="1"/>
  </vector2u>
  <bool val="1" name="nodeHasWidget-0"/>
  <IOData name="node-0">
   <string val="420" name="genericGlslVersion"/>
   <string val="ssao" name="genericNodeName"/>
   <bool val="0" name="genericUseVertex"/>
   <bool val="0" name="genericUseTesselation"/>
   <bool val="0" name="genericUseGeometry"/>
   <bool val="1" name="genericUseFragment"/>
   <int val="9729" name="genericOutFilter"/>
   <int val="33071" name="genericOutWrap"/>
   <bool val="0" name="genericUseDepthTest"/>
   <bool val="0" name="genericUseBlending"/>
   <uint val="513" name="genericDepthFunc"/>
   <uint val="1" name="genericBlendSrc"/>
   <uint val="0" name="genericBlendDst"/>
   <vector4f name="genericBackground">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
    <float val="0" name="2"/>
    <float val="0" name="3"/>
   </vector4f>
   <string val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D innormal;&#xa;uniform sampler2D indepth;&#xa;uniform int iterations;&#xa;" name="genericVertHead"/>
   <string val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;" name="genericVertBody"/>
   <string val="#version 420&#xa;&#xa;layout(location = 0) out vec4 ssao;&#xa;uniform sampler2D innormal;&#xa;uniform sampler2D indepth;&#xa;uniform int iterations;&#xa;" name="genericFragHead"/>
   <string val="in vec2 texcoord;&#xa;&#xa;float alpha = 0.3;&#xa;float intensity = 1.0;&#xa;float scale = 1.0;&#xa;float bias = 0.2;&#xa;&#xa;float seed = (texture(innormal,texcoord).x*0.9610356 + 1024. * texcoord.x + texcoord.y)*1.51269341231;&#xa;&#xa;// Return a random float between 0.0 and 1.0&#xa;float getRandom() {&#xa;&#x9;return fract(sin(seed++)*43758.5453123);&#xa;}&#xa;&#xa;// Get position from depth and the pixel coord between 0 and 1&#xa;vec3 getPosition(in vec2 coord) {&#xa;&#x9;float depth = texture(indepth, coord).x;&#xa;&#x9;vec3 dir = normalize(vec3(alpha*(coord*2.0-1.0), 1.0));&#xa;&#x9;return dir * depth;&#xa;}&#xa;&#xa;// Get normal from pixel coord between 0 and 1&#xa;vec3 getNormal(in vec2 coord) {&#xa;&#x9;return texture(innormal, coord).xyz;&#xa;}&#xa;&#xa;float doAO(in vec2 coord, in vec3 pos, in vec3 norm) {&#xa;&#x9;vec3 diff = getPosition(texcoord + coord) - pos;&#xa;&#x9;vec3 v = normalize(diff);&#xa;&#x9;float dist = length(diff) * scale;&#xa;&#x9;return max(0.0, dot(norm, v) - bias) * (1.0 / (1.0 + dist)) * intensity;&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;if(texture(indepth, texcoord) == 0.0) {&#xa;&#x9;&#x9;ssao = vec4(vec3(0), 1);&#xa;&#x9;} else {&#xa;&#x9;&#x9;vec2 vec [4] = {vec2(1, 0), vec2(-1, 0), vec2(0, 1), vec2(0, -1)};&#xa;&#x9;&#x9;vec3 p = getPosition(texcoord);&#xa;&#x9;&#x9;vec3 n = getNormal(texcoord);&#xa;&#x9;&#x9;float ao = 0.0;&#xa;&#xa;&#x9;&#x9;for(int j = 0; j &lt; iterations; j = j + 1) {&#xa;&#x9;&#x9;&#x9;vec2 random = vec2(getRandom(), getRandom());&#xa;&#x9;&#x9;&#x9;for(int i = 0; i &lt; 4; i = i + 1) {&#xa;&#x9;&#x9;&#x9;&#x9;vec2 coord1 = reflect(vec[i], random) * alpha / p.z;&#xa;&#x9;&#x9;&#x9;&#x9;vec2 coord2 = vec2(coord1.x * 0.707 - coord1.y * 0.707, coord1.x * 0.707 + coord1.y * 0.707);&#xa;&#x9;&#x9;&#x9;&#x9;ao = ao + doAO(coord1*0.25, p, n);&#xa;&#x9;&#x9;&#x9;&#x9;ao = ao + doAO(coord2*0.5, p, n);&#xa;&#x9;&#x9;&#x9;&#x9;ao = ao + doAO(coord1*0.75, p, n);&#xa;&#x9;&#x9;&#x9;&#x9;ao = ao + doAO(coord2, p, n);&#xa;&#x9;&#x9;&#x9;}&#xa;&#x9;&#x9;}&#xa;&#x9;&#x9;ao = ao / (16.0 * iterations);&#xa;&#x9;&#x9;vec3 light = 1 - texture(indepth,texcoord).xyz;&#xa;&#x9;&#x9;ssao = vec4(vec3(1-clamp(ao, 0, 1)), 1);&#xa;&#x9;}&#xa;}&#xa;" name="genericFragBody"/>
   <string val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D innormal;&#xa;uniform sampler2D indepth;&#xa;uniform int iterations;&#xa;" name="genericTessCHead"/>
   <string val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;" name="genericTessCBody"/>
   <string val="#version 420&#xa;&#xa;uniform sampler2D innormal;&#xa;uniform sampler2D indepth;&#xa;uniform int iterations;&#xa;" name="genericTessEHead"/>
   <string val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;" name="genericTessEBody"/>
   <string val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D innormal;&#xa;uniform sampler2D indepth;&#xa;uniform int iterations;&#xa;" name="genericGeomHead"/>
   <string val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}" name="genericGeomBody"/>
   <vector2f name="genericTSize">
    <float val="1" name="0"/>
    <float val="1" name="1"/>
   </vector2f>
   <vector2f name="genericTOffset">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
   </vector2f>
   <bool val="0" name="genericNeedMouse"/>
   <bool val="0" name="genericNeedKeyboard"/>
   <uint val="1" name="genericNbWidgets"/>
   <int val="1" name="genericWidgetType-0"/>
   <int val="1" name="genericWidgetView-0"/>
   <string val="iterations" name="genericWidgetName-0"/>
   <bool val="0" name="genericWidgetKeyframed-0"/>
  </IOData>
  <IOData name="nodeWidget-0">
   <uint val="1" name="nbChildren"/>
   <IOData name="childWidget-0">
    <bool val="0" name="intAttribKeyframed"/>
    <int val="1" name="intAttribMinVal"/>
    <int val="100" name="intAttribMaxVal"/>
    <IOData name="intAttribCurve">
     <int val="5" name="currentVal"/>
     <uint val="1" name="nbCurves"/>
     <IOData name="curve-0">
      <int val="0" name="interpType"/>
      <int val="0" name="leftType"/>
      <int val="0" name="rightType"/>
      <IOData name="interpolator">
       <uint val="1" name="nbPoints"/>
       <uint val="0" name="nbTangents"/>
       <vector2f name="controlPoint-0">
        <float val="0" name="0"/>
        <float val="5" name="1"/>
       </vector2f>
      </IOData>
     </IOData>
    </IOData>
    <uint val="0" name="nbChildren"/>
   </IOData>
  </IOData>
  <vector2f name="nodeInputPos-0-0">
   <float val="56.32" name="0"/>
   <float val="647.68" name="1"/>
  </vector2f>
  <vector2f name="nodeInputPos-0-1">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-0-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <bool val="1" name="nodeHasWidget-1"/>
  <IOData name="node-1"/>
  <IOData name="nodeWidget-1">
   <uint val="1" name="nbChildren"/>
   <IOData name="childWidget-0">
    <bool val="1" name="intAttribKeyframed"/>
    <int val="0" name="intAttribMinVal"/>
    <int val="500" name="intAttribMaxVal"/>
    <IOData name="intAttribCurve">
     <int val="2" name="currentVal"/>
     <uint val="1" name="nbCurves"/>
     <IOData name="curve-0">
      <int val="0" name="interpType"/>
      <int val="0" name="leftType"/>
      <int val="0" name="rightType"/>
      <IOData name="interpolator">
       <uint val="1" name="nbPoints"/>
       <uint val="0" name="nbTangents"/>
       <vector2f name="controlPoint-0">
        <float val="0" name="0"/>
        <float val="2" name="1"/>
       </vector2f>
      </IOData>
     </IOData>
    </IOData>
    <uint val="0" name="nbChildren"/>
   </IOData>
  </IOData>
  <vector2f name="nodeInputPos-1-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-1-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
 </IOData>
 <IOData name="nodeWidget-0">
  <uint val="2" name="nbChildren"/>
  <IOData name="childWidget-0">
   <uint val="1" name="nbChildren"/>
   <IOData name="childWidget-0">
    <bool val="0" name="intAttribKeyframed"/>
    <int val="1" name="intAttribMinVal"/>
    <int val="100" name="intAttribMaxVal"/>
    <IOData name="intAttribCurve">
     <int val="5" name="currentVal"/>
     <uint val="1" name="nbCurves"/>
     <IOData name="curve-0">
      <int val="0" name="interpType"/>
      <int val="0" name="leftType"/>
      <int val="0" name="rightType"/>
      <IOData name="interpolator">
       <uint val="1" name="nbPoints"/>
       <uint val="0" name="nbTangents"/>
       <vector2f name="controlPoint-0">
        <float val="0" name="0"/>
        <float val="5" name="1"/>
       </vector2f>
      </IOData>
     </IOData>
    </IOData>
    <uint val="0" name="nbChildren"/>
   </IOData>
  </IOData>
  <IOData name="childWidget-1">
   <uint val="1" name="nbChildren"/>
   <IOData name="childWidget-0">
    <bool val="1" name="intAttribKeyframed"/>
    <int val="0" name="intAttribMinVal"/>
    <int val="500" name="intAttribMaxVal"/>
    <IOData name="intAttribCurve">
     <int val="2" name="currentVal"/>
     <uint val="1" name="nbCurves"/>
     <IOData name="curve-0">
      <int val="0" name="interpType"/>
      <int val="0" name="leftType"/>
      <int val="0" name="rightType"/>
      <IOData name="interpolator">
       <uint val="1" name="nbPoints"/>
       <uint val="0" name="nbTangents"/>
       <vector2f name="controlPoint-0">
        <float val="0" name="0"/>
        <float val="2" name="1"/>
       </vector2f>
      </IOData>
     </IOData>
    </IOData>
    <uint val="0" name="nbChildren"/>
   </IOData>
  </IOData>
 </IOData>
 <vector2f name="nodeInputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="647.68" name="1"/>
 </vector2f>
 <vector2f name="nodeInputPos-0-1">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
</Gratin>

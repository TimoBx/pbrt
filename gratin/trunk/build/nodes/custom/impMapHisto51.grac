<Gratin type="node">
 <int val="0" name="majorVersion"/>
 <int val="3" name="minorVersion"/>
 <string val="_GRATIN_GROUPED_NODES_ID_" name="coreHandleStringId"/>
 <uint val="1" name="coreHandleVersion"/>
 <string val="_GRATIN_GROUPED_NODES_ID_" name="nodeStringId-0"/>
 <uint val="1" name="nodeVersion-0"/>
 <string val="impMapHisto5" name="nodeName-0"/>
 <string val="custom/" name="nodePath-0"/>
 <string val="impMapHisto5" name="nodeDesc-0"/>
 <string val="Create t" name="nodeHelp-0"/>
 <uint val="11" name="nodeId-0"/>
 <uint val="0" name="nodeGraphId-0"/>
 <vector2f name="nodePos-0">
  <float val="7510.89" name="0"/>
  <float val="-3516.54" name="1"/>
 </vector2f>
 <int val="5" name="nodeInputNameSize-0"/>
 <int val="2" name="nodeOutputNameSize-0"/>
 <string val="inBuffer0" name="nodeInputName-0-0"/>
 <string val="inBuffer1" name="nodeInputName-0-1"/>
 <string val="inBuffer2" name="nodeInputName-0-2"/>
 <string val="inBuffer3" name="nodeInputName-0-3"/>
 <string val="inBuffer4" name="nodeInputName-0-4"/>
 <string val="slice" name="nodeOutputName-0-0"/>
 <string val="curve" name="nodeOutputName-0-1"/>
 <bool val="1" name="nodeHasWidget-0"/>
 <IOData name="node-0">
  <uint val="3" name="nbNodes"/>
  <string val="imgGenericId" name="nodeStringId-0"/>
  <uint val="1" name="nodeVersion-0"/>
  <string val="genericImage" name="nodeName-0"/>
  <string val="Generic/" name="nodePath-0"/>
  <string val="Generic node for image processing" name="nodeDesc-0"/>
  <string val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;" name="nodeHelp-0"/>
  <uint val="0" name="nodeId-0"/>
  <uint val="0" name="nodeGraphId-0"/>
  <vector2f name="nodePos-0">
   <float val="-1871.67" name="0"/>
   <float val="-673.198" name="1"/>
  </vector2f>
  <int val="5" name="nodeInputNameSize-0"/>
  <int val="5" name="nodeOutputNameSize-0"/>
  <string val="inBuffer0" name="nodeInputName-0-0"/>
  <string val="inBuffer1" name="nodeInputName-0-1"/>
  <string val="inBuffer2" name="nodeInputName-0-2"/>
  <string val="inBuffer3" name="nodeInputName-0-3"/>
  <string val="inBuffer4" name="nodeInputName-0-4"/>
  <string val="outBuffer0" name="nodeOutputName-0-0"/>
  <string val="outBuffer1" name="nodeOutputName-0-1"/>
  <string val="outBuffer2" name="nodeOutputName-0-2"/>
  <string val="outBuffer3" name="nodeOutputName-0-3"/>
  <string val="outBuffer4" name="nodeOutputName-0-4"/>
  <string val="imgGenericId" name="nodeStringId-1"/>
  <uint val="1" name="nodeVersion-1"/>
  <string val="genericImage" name="nodeName-1"/>
  <string val="Generic/" name="nodePath-1"/>
  <string val="Generic node for image processing" name="nodeDesc-1"/>
  <string val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;" name="nodeHelp-1"/>
  <uint val="1" name="nodeId-1"/>
  <uint val="0" name="nodeGraphId-1"/>
  <vector2f name="nodePos-1">
   <float val="-28.0366" name="0"/>
   <float val="505.864" name="1"/>
  </vector2f>
  <int val="5" name="nodeInputNameSize-1"/>
  <int val="1" name="nodeOutputNameSize-1"/>
  <string val="inBuffer0" name="nodeInputName-1-0"/>
  <string val="inBuffer1" name="nodeInputName-1-1"/>
  <string val="inBuffer2" name="nodeInputName-1-2"/>
  <string val="inBuffer3" name="nodeInputName-1-3"/>
  <string val="inBuffer4" name="nodeInputName-1-4"/>
  <string val="outBuffer0" name="nodeOutputName-1-0"/>
  <string val="displayCurveID" name="nodeStringId-2"/>
  <uint val="1" name="nodeVersion-2"/>
  <string val="displayCurve" name="nodeName-2"/>
  <string val="Visualization/" name="nodePath-2"/>
  <string val="Display an implicit curve f(x,y)=0" name="nodeDesc-2"/>
  <string val="Display an implicit curve f(x,y)=0. &#xa;Set your own equation in the evalFunc function. " name="nodeHelp-2"/>
  <uint val="2" name="nodeId-2"/>
  <uint val="0" name="nodeGraphId-2"/>
  <vector2f name="nodePos-2">
   <float val="1899.71" name="0"/>
   <float val="167.334" name="1"/>
  </vector2f>
  <int val="1" name="nodeInputNameSize-2"/>
  <int val="2" name="nodeOutputNameSize-2"/>
  <string val="image" name="nodeInputName-2-0"/>
  <string val="slice" name="nodeOutputName-2-0"/>
  <string val="curve" name="nodeOutputName-2-1"/>
  <uint val="5" name="nbConnections-0-1"/>
  <vector2u name="connection-0-1-0">
   <uint val="0" name="0"/>
   <uint val="0" name="1"/>
  </vector2u>
  <vector2u name="connection-0-1-1">
   <uint val="1" name="0"/>
   <uint val="1" name="1"/>
  </vector2u>
  <vector2u name="connection-0-1-2">
   <uint val="2" name="0"/>
   <uint val="2" name="1"/>
  </vector2u>
  <vector2u name="connection-0-1-3">
   <uint val="3" name="0"/>
   <uint val="3" name="1"/>
  </vector2u>
  <vector2u name="connection-0-1-4">
   <uint val="4" name="0"/>
   <uint val="4" name="1"/>
  </vector2u>
  <uint val="0" name="nbConnections-0-2"/>
  <uint val="1" name="nbConnections-1-2"/>
  <vector2u name="connection-1-2-0">
   <uint val="0" name="0"/>
   <uint val="0" name="1"/>
  </vector2u>
  <bool val="1" name="nodeHasWidget-0"/>
  <IOData name="node-0">
   <string val="420" name="genericGlslVersion"/>
   <string val="genericImage" name="genericNodeName"/>
   <bool val="0" name="genericUseVertex"/>
   <bool val="0" name="genericUseTesselation"/>
   <bool val="0" name="genericUseGeometry"/>
   <bool val="1" name="genericUseFragment"/>
   <int val="9729" name="genericOutFilter"/>
   <int val="33071" name="genericOutWrap"/>
   <bool val="0" name="genericUseDepthTest"/>
   <bool val="0" name="genericUseBlending"/>
   <uint val="513" name="genericDepthFunc"/>
   <uint val="1" name="genericBlendSrc"/>
   <uint val="0" name="genericBlendDst"/>
   <vector4f name="genericBackground">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
    <float val="0" name="2"/>
    <float val="0" name="3"/>
   </vector4f>
   <string val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform sampler2D inBuffer3;&#xa;uniform sampler2D inBuffer4;&#xa;uniform int scale;&#xa;" name="genericVertHead"/>
   <string val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;" name="genericVertBody"/>
   <string val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;layout(location = 1) out vec4 outBuffer1;&#xa;layout(location = 2) out vec4 outBuffer2;&#xa;layout(location = 3) out vec4 outBuffer3;&#xa;layout(location = 4) out vec4 outBuffer4;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform sampler2D inBuffer3;&#xa;uniform sampler2D inBuffer4;&#xa;uniform int scale;&#xa;" name="genericFragHead"/>
   <string val="in vec2 texcoord;&#xa;void main() {&#xa;&#xa;&#x9;outBuffer0 = textureLod(inBuffer0,texcoord,20)*scale;&#xa;&#xa;&#x9;outBuffer1 = textureLod(inBuffer1,texcoord,20)*scale;&#xa;&#xa;&#x9;outBuffer2 = textureLod(inBuffer2,texcoord,20)*scale;&#xa;&#xa;&#x9;outBuffer3 = textureLod(inBuffer3,texcoord,20)*scale;&#xa;&#xa;&#x9;outBuffer4 = textureLod(inBuffer4,texcoord,20)*scale;&#xa;&#xa;&#xa;}&#xa;" name="genericFragBody"/>
   <string val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform sampler2D inBuffer3;&#xa;uniform sampler2D inBuffer4;&#xa;uniform int scale;&#xa;" name="genericTessCHead"/>
   <string val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;" name="genericTessCBody"/>
   <string val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform sampler2D inBuffer3;&#xa;uniform sampler2D inBuffer4;&#xa;uniform int scale;&#xa;" name="genericTessEHead"/>
   <string val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;" name="genericTessEBody"/>
   <string val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform sampler2D inBuffer3;&#xa;uniform sampler2D inBuffer4;&#xa;uniform int scale;&#xa;" name="genericGeomHead"/>
   <string val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}" name="genericGeomBody"/>
   <vector2f name="genericTSize">
    <float val="1" name="0"/>
    <float val="1" name="1"/>
   </vector2f>
   <vector2f name="genericTOffset">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
   </vector2f>
   <bool val="0" name="genericNeedMouse"/>
   <bool val="0" name="genericNeedKeyboard"/>
   <uint val="1" name="genericNbWidgets"/>
   <int val="1" name="genericWidgetType-0"/>
   <int val="1" name="genericWidgetView-0"/>
   <string val="scale" name="genericWidgetName-0"/>
   <bool val="0" name="genericWidgetKeyframed-0"/>
  </IOData>
  <IOData name="nodeWidget-0">
   <uint val="1" name="nbChildren"/>
   <IOData name="childWidget-0">
    <bool val="0" name="intAttribKeyframed"/>
    <int val="1" name="intAttribMinVal"/>
    <int val="200" name="intAttribMaxVal"/>
    <IOData name="intAttribCurve">
     <int val="33" name="currentVal"/>
     <uint val="1" name="nbCurves"/>
     <IOData name="curve-0">
      <int val="0" name="interpType"/>
      <int val="0" name="leftType"/>
      <int val="0" name="rightType"/>
      <IOData name="interpolator">
       <uint val="1" name="nbPoints"/>
       <uint val="0" name="nbTangents"/>
       <vector2f name="controlPoint-0">
        <float val="0" name="0"/>
        <float val="33" name="1"/>
       </vector2f>
      </IOData>
     </IOData>
    </IOData>
    <uint val="0" name="nbChildren"/>
   </IOData>
  </IOData>
  <vector2f name="nodeInputPos-0-0">
   <float val="112.64" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeInputPos-0-1">
   <float val="112.64" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeInputPos-0-2">
   <float val="112.64" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeInputPos-0-3">
   <float val="112.64" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeInputPos-0-4">
   <float val="112.64" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-0-0">
   <float val="112.64" name="0"/>
   <float val="2506.24" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-0-1">
   <float val="112.64" name="0"/>
   <float val="1886.72" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-0-2">
   <float val="112.64" name="0"/>
   <float val="1267.2" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-0-3">
   <float val="112.64" name="0"/>
   <float val="647.68" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-0-4">
   <float val="112.64" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <bool val="1" name="nodeHasWidget-1"/>
  <IOData name="node-1">
   <string val="420" name="genericGlslVersion"/>
   <string val="genericImage" name="genericNodeName"/>
   <bool val="0" name="genericUseVertex"/>
   <bool val="0" name="genericUseTesselation"/>
   <bool val="0" name="genericUseGeometry"/>
   <bool val="1" name="genericUseFragment"/>
   <int val="9729" name="genericOutFilter"/>
   <int val="33071" name="genericOutWrap"/>
   <bool val="0" name="genericUseDepthTest"/>
   <bool val="0" name="genericUseBlending"/>
   <uint val="513" name="genericDepthFunc"/>
   <uint val="1" name="genericBlendSrc"/>
   <uint val="0" name="genericBlendDst"/>
   <vector4f name="genericBackground">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
    <float val="0" name="2"/>
    <float val="0" name="3"/>
   </vector4f>
   <string val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform sampler2D inBuffer3;&#xa;uniform sampler2D inBuffer4;&#xa;" name="genericVertHead"/>
   <string val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;" name="genericVertBody"/>
   <string val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform sampler2D inBuffer3;&#xa;uniform sampler2D inBuffer4;&#xa;" name="genericFragHead"/>
   <string val="in vec2 texcoord;&#xa;void main() {&#xa;&#xa;&#x9;vec2 dim = vec2(1200,1200);&#xa;&#xa;&#x9;if (dim.x * texcoord.x &lt; dim.x * 1/5) {&#xa;&#x9;&#x9;outBuffer0 = texture(inBuffer0,texcoord);&#xa;&#x9;}&#xa;&#xa;&#x9;else if (dim.x * texcoord.x >= dim.x * 1/5 &amp;&amp; dim.x * texcoord.x &lt; dim.x * 2/5) {&#xa;&#x9;&#x9;outBuffer0 = texture(inBuffer1,texcoord);&#xa;&#x9;}&#xa;&#xa;&#x9;else if (dim.x * texcoord.x >= dim.x * 2/5 &amp;&amp; dim.x * texcoord.x &lt; dim.x * 3/5) {&#xa;&#x9;&#x9;outBuffer0 = texture(inBuffer2,texcoord);&#xa;&#x9;}&#xa;&#xa;&#x9;else if (dim.x * texcoord.x >= dim.x * 3/5 &amp;&amp; dim.x * texcoord.x &lt; dim.x * 4/5) {&#xa;&#x9;&#x9;outBuffer0 = texture(inBuffer3,texcoord);&#xa;&#x9;}&#xa;&#xa;&#x9;else {&#xa;&#x9;&#x9;outBuffer0 = texture(inBuffer4,texcoord);&#xa;&#x9;}&#xa;}&#xa;" name="genericFragBody"/>
   <string val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform sampler2D inBuffer3;&#xa;uniform sampler2D inBuffer4;&#xa;" name="genericTessCHead"/>
   <string val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;" name="genericTessCBody"/>
   <string val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform sampler2D inBuffer3;&#xa;uniform sampler2D inBuffer4;&#xa;" name="genericTessEHead"/>
   <string val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;" name="genericTessEBody"/>
   <string val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform sampler2D inBuffer3;&#xa;uniform sampler2D inBuffer4;&#xa;" name="genericGeomHead"/>
   <string val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}" name="genericGeomBody"/>
   <vector2f name="genericTSize">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
   </vector2f>
   <vector2f name="genericTOffset">
    <float val="1200" name="0"/>
    <float val="1200" name="1"/>
   </vector2f>
   <bool val="0" name="genericNeedMouse"/>
   <bool val="0" name="genericNeedKeyboard"/>
   <uint val="0" name="genericNbWidgets"/>
  </IOData>
  <IOData name="nodeWidget-1">
   <uint val="0" name="nbChildren"/>
  </IOData>
  <vector2f name="nodeInputPos-1-0">
   <float val="112.64" name="0"/>
   <float val="2506.24" name="1"/>
  </vector2f>
  <vector2f name="nodeInputPos-1-1">
   <float val="112.64" name="0"/>
   <float val="1886.72" name="1"/>
  </vector2f>
  <vector2f name="nodeInputPos-1-2">
   <float val="112.64" name="0"/>
   <float val="1267.2" name="1"/>
  </vector2f>
  <vector2f name="nodeInputPos-1-3">
   <float val="112.64" name="0"/>
   <float val="647.68" name="1"/>
  </vector2f>
  <vector2f name="nodeInputPos-1-4">
   <float val="112.64" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-1-0">
   <float val="132" name="0"/>
   <float val="66" name="1"/>
  </vector2f>
  <bool val="1" name="nodeHasWidget-2"/>
  <IOData name="node-2">
   <string val="410" name="genericGlslVersion"/>
   <string val="displayCurve" name="genericNodeName"/>
   <bool val="0" name="genericUseVertex"/>
   <bool val="0" name="genericUseTesselation"/>
   <bool val="0" name="genericUseGeometry"/>
   <bool val="1" name="genericUseFragment"/>
   <int val="9729" name="genericOutFilter"/>
   <int val="33071" name="genericOutWrap"/>
   <bool val="0" name="genericUseDepthTest"/>
   <bool val="0" name="genericUseBlending"/>
   <uint val="513" name="genericDepthFunc"/>
   <uint val="1" name="genericBlendSrc"/>
   <uint val="0" name="genericBlendDst"/>
   <vector4f name="genericBackground">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
    <float val="0" name="2"/>
    <float val="0" name="3"/>
   </vector4f>
   <string val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;" name="genericVertHead"/>
   <string val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;" name="genericVertBody"/>
   <string val="#version 410&#xa;&#xa;layout(location = 0) out vec4 slice;&#xa;layout(location = 1) out vec4 curve;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;" name="genericFragHead"/>
   <string val="in vec2 texcoord;&#xa;&#xa;const vec4 backgroundColor = vec4(1);&#xa;const vec4 axisColor = vec4(vec3(0.),1.);&#xa;const vec4 curveColor = vec4(1.,0.,0.,1.);&#xa;const float curveWidth = 2;&#xa;&#xa;vec2 ps = 1./vec2(textureSize(image,0));&#xa;float sliceYCoord = mouse.y*ps.y;&#xa;&#xa;float evalFunc(in vec2 p) {&#xa;&#x9;return texture(image,vec2(p.x,sliceYCoord)).x*scale-p.y;&#xa;}&#xa;&#xa;float distMix(in float v,in vec2 g,in float w) {&#xa;&#x9;return smoothstep(0.,w,abs(v)/max(length(g),1e-10));&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;// axis coord (in texture coord)&#xa;&#x9;vec2 a = texcoord;&#xa;&#x9;float vAxis = min(abs(a.x),abs(a.y));&#xa;&#xa;&#x9;// position&#xa;&#x9;vec2 p = texcoord;&#xa;&#xa;&#x9;// eval function and gradient&#xa;&#x9;float vFunc = evalFunc(p);&#xa;&#x9;vec2 gFunc = vec2(&#x9;evalFunc(p+vec2(ps.x,0.))-evalFunc(p-vec2(ps.x,0.)),&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;evalFunc(p+vec2(0.,ps.y))-evalFunc(p-vec2(0.,ps.y)))/(2.*ps);&#xa;&#xa;&#x9;// add colors &#xa;&#x9;float md = 1.; &#xa;&#x9;vec4 color = backgroundColor;&#xa;&#x9;color = mix(axisColor,color,distMix(vAxis,vec2(.5),.005));&#xa;&#x9;color = mix(curveColor,color,distMix(vFunc,gFunc,.005*md*curveWidth));&#xa;&#xa;&#x9;curve = color;&#xa;&#xa;&#x9;// image &#xa;&#x9;vec4 img = texture(image,texcoord);&#xa;&#x9;float dl = smoothstep(0.,0.01,abs(texcoord.y-sliceYCoord));&#xa;&#x9;slice = mix(mix(img,vec4(1,0,0,1),.5),img,dl);&#xa;&#x9;&#xa;&#x9;// test &#xa;&#x9;if(texcoord.y&lt;0.1) {&#xa;&#x9;&#x9;curve *= vec4(vec3(vFunc),1.);&#xa;&#x9;}&#xa;}&#xa;" name="genericFragBody"/>
   <string val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;" name="genericTessCHead"/>
   <string val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;" name="genericTessCBody"/>
   <string val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;" name="genericTessEHead"/>
   <string val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;" name="genericTessEBody"/>
   <string val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;" name="genericGeomHead"/>
   <string val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}" name="genericGeomBody"/>
   <vector2f name="genericTSize">
    <float val="1" name="0"/>
    <float val="1" name="1"/>
   </vector2f>
   <vector2f name="genericTOffset">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
   </vector2f>
   <bool val="1" name="genericNeedMouse"/>
   <bool val="0" name="genericNeedKeyboard"/>
   <uint val="1" name="genericNbWidgets"/>
   <int val="0" name="genericWidgetType-0"/>
   <int val="1" name="genericWidgetView-0"/>
   <string val="scale" name="genericWidgetName-0"/>
   <bool val="1" name="genericWidgetKeyframed-0"/>
  </IOData>
  <IOData name="nodeWidget-2">
   <uint val="2" name="nbChildren"/>
   <IOData name="childWidget-0">
    <bool val="1" name="vector2iAttribKeyframed"/>
    <vector2i name="vector2iAttribMinVal">
     <int val="-10000" name="0"/>
     <int val="-10000" name="1"/>
    </vector2i>
    <vector2i name="vector2iAttribMaxVal">
     <int val="10000" name="0"/>
     <int val="10000" name="1"/>
    </vector2i>
    <IOData name="vector2iAttribCurve">
     <vector2i name="currentVal">
      <int val="503" name="0"/>
      <int val="304" name="1"/>
     </vector2i>
     <uint val="2" name="nbCurves"/>
     <IOData name="curve-0">
      <int val="0" name="interpType"/>
      <int val="0" name="leftType"/>
      <int val="0" name="rightType"/>
      <IOData name="interpolator">
       <uint val="1" name="nbPoints"/>
       <uint val="0" name="nbTangents"/>
       <vector2f name="controlPoint-0">
        <float val="0" name="0"/>
        <float val="503" name="1"/>
       </vector2f>
      </IOData>
     </IOData>
     <IOData name="curve-1">
      <int val="0" name="interpType"/>
      <int val="0" name="leftType"/>
      <int val="0" name="rightType"/>
      <IOData name="interpolator">
       <uint val="1" name="nbPoints"/>
       <uint val="0" name="nbTangents"/>
       <vector2f name="controlPoint-0">
        <float val="0" name="0"/>
        <float val="304" name="1"/>
       </vector2f>
      </IOData>
     </IOData>
    </IOData>
    <uint val="0" name="nbChildren"/>
   </IOData>
   <IOData name="childWidget-1">
    <bool val="1" name="floatAttribKeyframed"/>
    <float val="0" name="floatAttribMinVal"/>
    <float val="10" name="floatAttribMaxVal"/>
    <IOData name="floatAttribCurve">
     <float val="1.18" name="currentVal"/>
     <uint val="1" name="nbCurves"/>
     <IOData name="curve-0">
      <int val="0" name="interpType"/>
      <int val="0" name="leftType"/>
      <int val="0" name="rightType"/>
      <IOData name="interpolator">
       <uint val="1" name="nbPoints"/>
       <uint val="0" name="nbTangents"/>
       <vector2f name="controlPoint-0">
        <float val="0" name="0"/>
        <float val="1.18" name="1"/>
       </vector2f>
      </IOData>
     </IOData>
    </IOData>
    <uint val="0" name="nbChildren"/>
   </IOData>
  </IOData>
  <vector2f name="nodeInputPos-2-0">
   <float val="132" name="0"/>
   <float val="66" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-2-0">
   <float val="132" name="0"/>
   <float val="1518" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-2-1">
   <float val="132" name="0"/>
   <float val="66" name="1"/>
  </vector2f>
 </IOData>
 <IOData name="nodeWidget-0">
  <uint val="3" name="nbChildren"/>
  <IOData name="childWidget-0">
   <uint val="1" name="nbChildren"/>
   <IOData name="childWidget-0">
    <bool val="0" name="intAttribKeyframed"/>
    <int val="1" name="intAttribMinVal"/>
    <int val="200" name="intAttribMaxVal"/>
    <IOData name="intAttribCurve">
     <int val="33" name="currentVal"/>
     <uint val="1" name="nbCurves"/>
     <IOData name="curve-0">
      <int val="0" name="interpType"/>
      <int val="0" name="leftType"/>
      <int val="0" name="rightType"/>
      <IOData name="interpolator">
       <uint val="1" name="nbPoints"/>
       <uint val="0" name="nbTangents"/>
       <vector2f name="controlPoint-0">
        <float val="0" name="0"/>
        <float val="33" name="1"/>
       </vector2f>
      </IOData>
     </IOData>
    </IOData>
    <uint val="0" name="nbChildren"/>
   </IOData>
  </IOData>
  <IOData name="childWidget-1">
   <uint val="0" name="nbChildren"/>
  </IOData>
  <IOData name="childWidget-2">
   <uint val="2" name="nbChildren"/>
   <IOData name="childWidget-0">
    <bool val="1" name="vector2iAttribKeyframed"/>
    <vector2i name="vector2iAttribMinVal">
     <int val="-10000" name="0"/>
     <int val="-10000" name="1"/>
    </vector2i>
    <vector2i name="vector2iAttribMaxVal">
     <int val="10000" name="0"/>
     <int val="10000" name="1"/>
    </vector2i>
    <IOData name="vector2iAttribCurve">
     <vector2i name="currentVal">
      <int val="503" name="0"/>
      <int val="304" name="1"/>
     </vector2i>
     <uint val="2" name="nbCurves"/>
     <IOData name="curve-0">
      <int val="0" name="interpType"/>
      <int val="0" name="leftType"/>
      <int val="0" name="rightType"/>
      <IOData name="interpolator">
       <uint val="1" name="nbPoints"/>
       <uint val="0" name="nbTangents"/>
       <vector2f name="controlPoint-0">
        <float val="0" name="0"/>
        <float val="503" name="1"/>
       </vector2f>
      </IOData>
     </IOData>
     <IOData name="curve-1">
      <int val="0" name="interpType"/>
      <int val="0" name="leftType"/>
      <int val="0" name="rightType"/>
      <IOData name="interpolator">
       <uint val="1" name="nbPoints"/>
       <uint val="0" name="nbTangents"/>
       <vector2f name="controlPoint-0">
        <float val="0" name="0"/>
        <float val="304" name="1"/>
       </vector2f>
      </IOData>
     </IOData>
    </IOData>
    <uint val="0" name="nbChildren"/>
   </IOData>
   <IOData name="childWidget-1">
    <bool val="1" name="floatAttribKeyframed"/>
    <float val="0" name="floatAttribMinVal"/>
    <float val="10" name="floatAttribMaxVal"/>
    <IOData name="floatAttribCurve">
     <float val="1.18" name="currentVal"/>
     <uint val="1" name="nbCurves"/>
     <IOData name="curve-0">
      <int val="0" name="interpType"/>
      <int val="0" name="leftType"/>
      <int val="0" name="rightType"/>
      <IOData name="interpolator">
       <uint val="1" name="nbPoints"/>
       <uint val="0" name="nbTangents"/>
       <vector2f name="controlPoint-0">
        <float val="0" name="0"/>
        <float val="1.18" name="1"/>
       </vector2f>
      </IOData>
     </IOData>
    </IOData>
    <uint val="0" name="nbChildren"/>
   </IOData>
  </IOData>
 </IOData>
 <vector2f name="nodeInputPos-0-0">
  <float val="112.64" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
 <vector2f name="nodeInputPos-0-1">
  <float val="112.64" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
 <vector2f name="nodeInputPos-0-2">
  <float val="112.64" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
 <vector2f name="nodeInputPos-0-3">
  <float val="112.64" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
 <vector2f name="nodeInputPos-0-4">
  <float val="112.64" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-0">
  <float val="132" name="0"/>
  <float val="1518" name="1"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-1">
  <float val="132" name="0"/>
  <float val="66" name="1"/>
 </vector2f>
</Gratin>

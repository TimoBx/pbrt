<Gratin type="pipeline">
 <int name="majorVersion" val="0"/>
 <int name="minorVersion" val="3"/>
 <IOData name="mainWindow">
  <IOData name="graphWidget">
   <IOData name="graph">
    <uint name="nbNodes" val="20"/>
    <string name="nodeStringId-0" val="LightNode"/>
    <uint name="nodeVersion-0" val="1"/>
    <string name="nodeName-0" val="genericLightNode"/>
    <string name="nodePath-0" val="Generic/"/>
    <string name="nodeDesc-0" val="Generic light node for image processing"/>
    <string name="nodeHelp-0" val="Creates a black image in which we can simulate a white light source. The light source can be moved by the user, its radius and power can be manually changed, and its shape can be chosen."/>
    <uint name="nodeId-0" val="0"/>
    <uint name="nodeGraphId-0" val="0"/>
    <vector2f name="nodePos-0">
     <float name="0" val="-454.649"/>
     <float name="1" val="-1113.5"/>
    </vector2f>
    <int name="nodeInputNameSize-0" val="0"/>
    <int name="nodeOutputNameSize-0" val="1"/>
    <string name="nodeOutputName-0-0" val="selection"/>
    <string name="nodeStringId-1" val="_GRATIN_GROUPED_NODES_ID_"/>
    <uint name="nodeVersion-1" val="1"/>
    <string name="nodeName-1" val="loadImageAndToneMap"/>
    <string name="nodePath-1" val="custom/"/>
    <string name="nodeDesc-1" val="Load an image and then use a tone mapping"/>
    <string name="nodeHelp-1" val="Load an image and then use a tone mapping"/>
    <uint name="nodeId-1" val="1"/>
    <uint name="nodeGraphId-1" val="0"/>
    <vector2f name="nodePos-1">
     <float name="0" val="-596.282"/>
     <float name="1" val="44.355"/>
    </vector2f>
    <int name="nodeInputNameSize-1" val="0"/>
    <int name="nodeOutputNameSize-1" val="1"/>
    <string name="nodeOutputName-1-0" val="toneMap"/>
    <string name="nodeStringId-2" val="_GRATIN_GROUPED_NODES_ID_"/>
    <uint name="nodeVersion-2" val="1"/>
    <string name="nodeName-2" val="minThenMean"/>
    <string name="nodePath-2" val="custom/"/>
    <string name="nodeDesc-2" val="minThenMean"/>
    <string name="nodeHelp-2" val="Min Color, then Global Mean Color"/>
    <uint name="nodeId-2" val="2"/>
    <uint name="nodeGraphId-2" val="0"/>
    <vector2f name="nodePos-2">
     <float name="0" val="1698.74"/>
     <float name="1" val="-121.052"/>
    </vector2f>
    <int name="nodeInputNameSize-2" val="2"/>
    <int name="nodeOutputNameSize-2" val="1"/>
    <string name="nodeInputName-2-0" val="img01"/>
    <string name="nodeInputName-2-1" val="img02"/>
    <string name="nodeOutputName-2-0" val="meanColor"/>
    <string name="nodeStringId-3" val="_GRATIN_GROUPED_NODES_ID_"/>
    <uint name="nodeVersion-3" val="1"/>
    <string name="nodeName-3" val="loadImageAndToneMap"/>
    <string name="nodePath-3" val="custom/"/>
    <string name="nodeDesc-3" val="Load an image and then use a tone mapping"/>
    <string name="nodeHelp-3" val="Load an image and then use a tone mapping"/>
    <uint name="nodeId-3" val="3"/>
    <uint name="nodeGraphId-3" val="0"/>
    <vector2f name="nodePos-3">
     <float name="0" val="-606.62"/>
     <float name="1" val="1119.5"/>
    </vector2f>
    <int name="nodeInputNameSize-3" val="0"/>
    <int name="nodeOutputNameSize-3" val="1"/>
    <string name="nodeOutputName-3-0" val="toneMap"/>
    <string name="nodeStringId-4" val="_GRATIN_GROUPED_NODES_ID_"/>
    <uint name="nodeVersion-4" val="1"/>
    <string name="nodeName-4" val="minThenMean"/>
    <string name="nodePath-4" val="custom/"/>
    <string name="nodeDesc-4" val="minThenMean"/>
    <string name="nodeHelp-4" val="Min Color, then Global Mean Color"/>
    <uint name="nodeId-4" val="4"/>
    <uint name="nodeGraphId-4" val="0"/>
    <vector2f name="nodePos-4">
     <float name="0" val="1812.46"/>
     <float name="1" val="995.446"/>
    </vector2f>
    <int name="nodeInputNameSize-4" val="2"/>
    <int name="nodeOutputNameSize-4" val="1"/>
    <string name="nodeInputName-4-0" val="img01"/>
    <string name="nodeInputName-4-1" val="img02"/>
    <string name="nodeOutputName-4-0" val="meanColor"/>
    <string name="nodeStringId-5" val="_GRATIN_GROUPED_NODES_ID_"/>
    <uint name="nodeVersion-5" val="1"/>
    <string name="nodeName-5" val="loadImageAndToneMap"/>
    <string name="nodePath-5" val="custom/"/>
    <string name="nodeDesc-5" val="Load an image and then use a tone mapping"/>
    <string name="nodeHelp-5" val="Load an image and then use a tone mapping"/>
    <uint name="nodeId-5" val="5"/>
    <uint name="nodeGraphId-5" val="0"/>
    <vector2f name="nodePos-5">
     <float name="0" val="-668.647"/>
     <float name="1" val="2122.28"/>
    </vector2f>
    <int name="nodeInputNameSize-5" val="0"/>
    <int name="nodeOutputNameSize-5" val="1"/>
    <string name="nodeOutputName-5-0" val="toneMap"/>
    <string name="nodeStringId-6" val="_GRATIN_GROUPED_NODES_ID_"/>
    <uint name="nodeVersion-6" val="1"/>
    <string name="nodeName-6" val="minThenMean"/>
    <string name="nodePath-6" val="custom/"/>
    <string name="nodeDesc-6" val="minThenMean"/>
    <string name="nodeHelp-6" val="Min Color, then Global Mean Color"/>
    <uint name="nodeId-6" val="6"/>
    <uint name="nodeGraphId-6" val="0"/>
    <vector2f name="nodePos-6">
     <float name="0" val="1833.14"/>
     <float name="1" val="2091.27"/>
    </vector2f>
    <int name="nodeInputNameSize-6" val="2"/>
    <int name="nodeOutputNameSize-6" val="1"/>
    <string name="nodeInputName-6-0" val="img01"/>
    <string name="nodeInputName-6-1" val="img02"/>
    <string name="nodeOutputName-6-0" val="meanColor"/>
    <string name="nodeStringId-7" val="imgGenericId"/>
    <uint name="nodeVersion-7" val="1"/>
    <string name="nodeName-7" val="genericImage"/>
    <string name="nodePath-7" val="Generic/"/>
    <string name="nodeDesc-7" val="Generic node for image processing"/>
    <string name="nodeHelp-7" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
    <uint name="nodeId-7" val="7"/>
    <uint name="nodeGraphId-7" val="0"/>
    <vector2f name="nodePos-7">
     <float name="0" val="3539.07"/>
     <float name="1" val="801.606"/>
    </vector2f>
    <int name="nodeInputNameSize-7" val="3"/>
    <int name="nodeOutputNameSize-7" val="3"/>
    <string name="nodeInputName-7-0" val="inBuffer0"/>
    <string name="nodeInputName-7-1" val="inBuffer1"/>
    <string name="nodeInputName-7-2" val="inBuffer2"/>
    <string name="nodeOutputName-7-0" val="outBuffer0"/>
    <string name="nodeOutputName-7-1" val="outBuffer1"/>
    <string name="nodeOutputName-7-2" val="outBuffer2"/>
    <string name="nodeStringId-8" val="imgGenericId"/>
    <uint name="nodeVersion-8" val="1"/>
    <string name="nodeName-8" val="genericImage"/>
    <string name="nodePath-8" val="Generic/"/>
    <string name="nodeDesc-8" val="Generic node for image processing"/>
    <string name="nodeHelp-8" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
    <uint name="nodeId-8" val="8"/>
    <uint name="nodeGraphId-8" val="0"/>
    <vector2f name="nodePos-8">
     <float name="0" val="5474.2"/>
     <float name="1" val="3379.79"/>
    </vector2f>
    <int name="nodeInputNameSize-8" val="1"/>
    <int name="nodeOutputNameSize-8" val="1"/>
    <string name="nodeInputName-8-0" val="inBuffer0"/>
    <string name="nodeOutputName-8-0" val="outBuffer0"/>
    <string name="nodeStringId-9" val="imgGenericId"/>
    <uint name="nodeVersion-9" val="1"/>
    <string name="nodeName-9" val="genericImage"/>
    <string name="nodePath-9" val="Generic/"/>
    <string name="nodeDesc-9" val="Generic node for image processing"/>
    <string name="nodeHelp-9" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
    <uint name="nodeId-9" val="9"/>
    <uint name="nodeGraphId-9" val="0"/>
    <vector2f name="nodePos-9">
     <float name="0" val="5455.1"/>
     <float name="1" val="2358.61"/>
    </vector2f>
    <int name="nodeInputNameSize-9" val="1"/>
    <int name="nodeOutputNameSize-9" val="1"/>
    <string name="nodeInputName-9-0" val="inBuffer0"/>
    <string name="nodeOutputName-9-0" val="outBuffer0"/>
    <string name="nodeStringId-10" val="imgGenericId"/>
    <uint name="nodeVersion-10" val="1"/>
    <string name="nodeName-10" val="genericImage"/>
    <string name="nodePath-10" val="Generic/"/>
    <string name="nodeDesc-10" val="Generic node for image processing"/>
    <string name="nodeHelp-10" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
    <uint name="nodeId-10" val="10"/>
    <uint name="nodeGraphId-10" val="0"/>
    <vector2f name="nodePos-10">
     <float name="0" val="5443.44"/>
     <float name="1" val="1404.69"/>
    </vector2f>
    <int name="nodeInputNameSize-10" val="1"/>
    <int name="nodeOutputNameSize-10" val="1"/>
    <string name="nodeInputName-10-0" val="inBuffer0"/>
    <string name="nodeOutputName-10-0" val="outBuffer0"/>
    <string name="nodeStringId-11" val="_GRATIN_GROUPED_NODES_ID_"/>
    <uint name="nodeVersion-11" val="1"/>
    <string name="nodeName-11" val="grouped"/>
    <string name="nodePath-11" val="custom/"/>
    <string name="nodeDesc-11" val="grouped node"/>
    <string name="nodeHelp-11" val="grouped node"/>
    <uint name="nodeId-11" val="11"/>
    <uint name="nodeGraphId-11" val="0"/>
    <vector2f name="nodePos-11">
     <float name="0" val="7551.95"/>
     <float name="1" val="1272.12"/>
    </vector2f>
    <int name="nodeInputNameSize-11" val="3"/>
    <int name="nodeOutputNameSize-11" val="2"/>
    <string name="nodeInputName-11-0" val="inBuffer0"/>
    <string name="nodeInputName-11-1" val="inBuffer1"/>
    <string name="nodeInputName-11-2" val="inBuffer2"/>
    <string name="nodeOutputName-11-0" val="slice"/>
    <string name="nodeOutputName-11-1" val="curve"/>
    <string name="nodeStringId-12" val="imgGenericId"/>
    <uint name="nodeVersion-12" val="1"/>
    <string name="nodeName-12" val="genericImage"/>
    <string name="nodePath-12" val="Generic/"/>
    <string name="nodeDesc-12" val="Generic node for image processing"/>
    <string name="nodeHelp-12" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
    <uint name="nodeId-12" val="12"/>
    <uint name="nodeGraphId-12" val="0"/>
    <vector2f name="nodePos-12">
     <float name="0" val="5530.53"/>
     <float name="1" val="-1952.45"/>
    </vector2f>
    <int name="nodeInputNameSize-12" val="1"/>
    <int name="nodeOutputNameSize-12" val="1"/>
    <string name="nodeInputName-12-0" val="inBuffer0"/>
    <string name="nodeOutputName-12-0" val="outBuffer0"/>
    <string name="nodeStringId-13" val="imgGenericId"/>
    <uint name="nodeVersion-13" val="1"/>
    <string name="nodeName-13" val="genericImage"/>
    <string name="nodePath-13" val="Generic/"/>
    <string name="nodeDesc-13" val="Generic node for image processing"/>
    <string name="nodeHelp-13" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
    <uint name="nodeId-13" val="13"/>
    <uint name="nodeGraphId-13" val="0"/>
    <vector2f name="nodePos-13">
     <float name="0" val="5489.42"/>
     <float name="1" val="-972.236"/>
    </vector2f>
    <int name="nodeInputNameSize-13" val="1"/>
    <int name="nodeOutputNameSize-13" val="1"/>
    <string name="nodeInputName-13-0" val="inBuffer0"/>
    <string name="nodeOutputName-13-0" val="outBuffer0"/>
    <string name="nodeStringId-14" val="imgGenericId"/>
    <uint name="nodeVersion-14" val="1"/>
    <string name="nodeName-14" val="genericImage"/>
    <string name="nodePath-14" val="Generic/"/>
    <string name="nodeDesc-14" val="Generic node for image processing"/>
    <string name="nodeHelp-14" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
    <uint name="nodeId-14" val="14"/>
    <uint name="nodeGraphId-14" val="0"/>
    <vector2f name="nodePos-14">
     <float name="0" val="5396.61"/>
     <float name="1" val="42.5496"/>
    </vector2f>
    <int name="nodeInputNameSize-14" val="1"/>
    <int name="nodeOutputNameSize-14" val="1"/>
    <string name="nodeInputName-14-0" val="inBuffer0"/>
    <string name="nodeOutputName-14-0" val="outBuffer0"/>
    <string name="nodeStringId-15" val="_GRATIN_GROUPED_NODES_ID_"/>
    <uint name="nodeVersion-15" val="1"/>
    <string name="nodeName-15" val="grouped"/>
    <string name="nodePath-15" val="custom/"/>
    <string name="nodeDesc-15" val="grouped node"/>
    <string name="nodeHelp-15" val="grouped node"/>
    <uint name="nodeId-15" val="15"/>
    <uint name="nodeGraphId-15" val="0"/>
    <vector2f name="nodePos-15">
     <float name="0" val="7372.15"/>
     <float name="1" val="-2043.52"/>
    </vector2f>
    <int name="nodeInputNameSize-15" val="3"/>
    <int name="nodeOutputNameSize-15" val="2"/>
    <string name="nodeInputName-15-0" val="inBuffer0"/>
    <string name="nodeInputName-15-1" val="inBuffer1"/>
    <string name="nodeInputName-15-2" val="inBuffer2"/>
    <string name="nodeOutputName-15-0" val="slice"/>
    <string name="nodeOutputName-15-1" val="curve"/>
    <string name="nodeStringId-16" val="imgGenericId"/>
    <uint name="nodeVersion-16" val="1"/>
    <string name="nodeName-16" val="genericImage"/>
    <string name="nodePath-16" val="Generic/"/>
    <string name="nodeDesc-16" val="Generic node for image processing"/>
    <string name="nodeHelp-16" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
    <uint name="nodeId-16" val="16"/>
    <uint name="nodeGraphId-16" val="0"/>
    <vector2f name="nodePos-16">
     <float name="0" val="5594.88"/>
     <float name="1" val="-5274.92"/>
    </vector2f>
    <int name="nodeInputNameSize-16" val="1"/>
    <int name="nodeOutputNameSize-16" val="1"/>
    <string name="nodeInputName-16-0" val="inBuffer0"/>
    <string name="nodeOutputName-16-0" val="outBuffer0"/>
    <string name="nodeStringId-17" val="imgGenericId"/>
    <uint name="nodeVersion-17" val="1"/>
    <string name="nodeName-17" val="genericImage"/>
    <string name="nodePath-17" val="Generic/"/>
    <string name="nodeDesc-17" val="Generic node for image processing"/>
    <string name="nodeHelp-17" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
    <uint name="nodeId-17" val="17"/>
    <uint name="nodeGraphId-17" val="0"/>
    <vector2f name="nodePos-17">
     <float name="0" val="5554.49"/>
     <float name="1" val="-4325.7"/>
    </vector2f>
    <int name="nodeInputNameSize-17" val="1"/>
    <int name="nodeOutputNameSize-17" val="1"/>
    <string name="nodeInputName-17-0" val="inBuffer0"/>
    <string name="nodeOutputName-17-0" val="outBuffer0"/>
    <string name="nodeStringId-18" val="imgGenericId"/>
    <uint name="nodeVersion-18" val="1"/>
    <string name="nodeName-18" val="genericImage"/>
    <string name="nodePath-18" val="Generic/"/>
    <string name="nodeDesc-18" val="Generic node for image processing"/>
    <string name="nodeHelp-18" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
    <uint name="nodeId-18" val="18"/>
    <uint name="nodeGraphId-18" val="0"/>
    <vector2f name="nodePos-18">
     <float name="0" val="5505.32"/>
     <float name="1" val="-3388.46"/>
    </vector2f>
    <int name="nodeInputNameSize-18" val="1"/>
    <int name="nodeOutputNameSize-18" val="1"/>
    <string name="nodeInputName-18-0" val="inBuffer0"/>
    <string name="nodeOutputName-18-0" val="outBuffer0"/>
    <string name="nodeStringId-19" val="_GRATIN_GROUPED_NODES_ID_"/>
    <uint name="nodeVersion-19" val="1"/>
    <string name="nodeName-19" val="grouped"/>
    <string name="nodePath-19" val="custom/"/>
    <string name="nodeDesc-19" val="grouped node"/>
    <string name="nodeHelp-19" val="grouped node"/>
    <uint name="nodeId-19" val="19"/>
    <uint name="nodeGraphId-19" val="0"/>
    <vector2f name="nodePos-19">
     <float name="0" val="7654.9"/>
     <float name="1" val="-5436.49"/>
    </vector2f>
    <int name="nodeInputNameSize-19" val="3"/>
    <int name="nodeOutputNameSize-19" val="2"/>
    <string name="nodeInputName-19-0" val="inBuffer0"/>
    <string name="nodeInputName-19-1" val="inBuffer1"/>
    <string name="nodeInputName-19-2" val="inBuffer2"/>
    <string name="nodeOutputName-19-0" val="slice"/>
    <string name="nodeOutputName-19-1" val="curve"/>
    <uint name="nbConnections-0-1" val="0"/>
    <uint name="nbConnections-0-2" val="1"/>
    <vector2u name="connection-0-2-0">
     <uint name="0" val="0"/>
     <uint name="1" val="1"/>
    </vector2u>
    <uint name="nbConnections-0-3" val="0"/>
    <uint name="nbConnections-0-4" val="1"/>
    <vector2u name="connection-0-4-0">
     <uint name="0" val="0"/>
     <uint name="1" val="1"/>
    </vector2u>
    <uint name="nbConnections-0-5" val="0"/>
    <uint name="nbConnections-0-6" val="1"/>
    <vector2u name="connection-0-6-0">
     <uint name="0" val="0"/>
     <uint name="1" val="1"/>
    </vector2u>
    <uint name="nbConnections-0-7" val="0"/>
    <uint name="nbConnections-0-8" val="0"/>
    <uint name="nbConnections-0-9" val="0"/>
    <uint name="nbConnections-0-10" val="0"/>
    <uint name="nbConnections-0-11" val="0"/>
    <uint name="nbConnections-0-12" val="0"/>
    <uint name="nbConnections-0-13" val="0"/>
    <uint name="nbConnections-0-14" val="0"/>
    <uint name="nbConnections-0-15" val="0"/>
    <uint name="nbConnections-0-16" val="0"/>
    <uint name="nbConnections-0-17" val="0"/>
    <uint name="nbConnections-0-18" val="0"/>
    <uint name="nbConnections-0-19" val="0"/>
    <uint name="nbConnections-1-2" val="1"/>
    <vector2u name="connection-1-2-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-1-3" val="0"/>
    <uint name="nbConnections-1-4" val="0"/>
    <uint name="nbConnections-1-5" val="0"/>
    <uint name="nbConnections-1-6" val="0"/>
    <uint name="nbConnections-1-7" val="0"/>
    <uint name="nbConnections-1-8" val="0"/>
    <uint name="nbConnections-1-9" val="0"/>
    <uint name="nbConnections-1-10" val="0"/>
    <uint name="nbConnections-1-11" val="0"/>
    <uint name="nbConnections-1-12" val="0"/>
    <uint name="nbConnections-1-13" val="0"/>
    <uint name="nbConnections-1-14" val="0"/>
    <uint name="nbConnections-1-15" val="0"/>
    <uint name="nbConnections-1-16" val="0"/>
    <uint name="nbConnections-1-17" val="0"/>
    <uint name="nbConnections-1-18" val="0"/>
    <uint name="nbConnections-1-19" val="0"/>
    <uint name="nbConnections-2-3" val="0"/>
    <uint name="nbConnections-2-4" val="0"/>
    <uint name="nbConnections-2-5" val="0"/>
    <uint name="nbConnections-2-6" val="0"/>
    <uint name="nbConnections-2-7" val="1"/>
    <vector2u name="connection-2-7-0">
     <uint name="0" val="0"/>
     <uint name="1" val="2"/>
    </vector2u>
    <uint name="nbConnections-2-8" val="0"/>
    <uint name="nbConnections-2-9" val="0"/>
    <uint name="nbConnections-2-10" val="0"/>
    <uint name="nbConnections-2-11" val="0"/>
    <uint name="nbConnections-2-12" val="0"/>
    <uint name="nbConnections-2-13" val="0"/>
    <uint name="nbConnections-2-14" val="0"/>
    <uint name="nbConnections-2-15" val="0"/>
    <uint name="nbConnections-2-16" val="0"/>
    <uint name="nbConnections-2-17" val="0"/>
    <uint name="nbConnections-2-18" val="0"/>
    <uint name="nbConnections-2-19" val="0"/>
    <uint name="nbConnections-3-4" val="1"/>
    <vector2u name="connection-3-4-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-3-5" val="0"/>
    <uint name="nbConnections-3-6" val="0"/>
    <uint name="nbConnections-3-7" val="0"/>
    <uint name="nbConnections-3-8" val="0"/>
    <uint name="nbConnections-3-9" val="0"/>
    <uint name="nbConnections-3-10" val="0"/>
    <uint name="nbConnections-3-11" val="0"/>
    <uint name="nbConnections-3-12" val="0"/>
    <uint name="nbConnections-3-13" val="0"/>
    <uint name="nbConnections-3-14" val="0"/>
    <uint name="nbConnections-3-15" val="0"/>
    <uint name="nbConnections-3-16" val="0"/>
    <uint name="nbConnections-3-17" val="0"/>
    <uint name="nbConnections-3-18" val="0"/>
    <uint name="nbConnections-3-19" val="0"/>
    <uint name="nbConnections-4-5" val="0"/>
    <uint name="nbConnections-4-6" val="0"/>
    <uint name="nbConnections-4-7" val="1"/>
    <vector2u name="connection-4-7-0">
     <uint name="0" val="0"/>
     <uint name="1" val="1"/>
    </vector2u>
    <uint name="nbConnections-4-8" val="0"/>
    <uint name="nbConnections-4-9" val="0"/>
    <uint name="nbConnections-4-10" val="0"/>
    <uint name="nbConnections-4-11" val="0"/>
    <uint name="nbConnections-4-12" val="0"/>
    <uint name="nbConnections-4-13" val="0"/>
    <uint name="nbConnections-4-14" val="0"/>
    <uint name="nbConnections-4-15" val="0"/>
    <uint name="nbConnections-4-16" val="0"/>
    <uint name="nbConnections-4-17" val="0"/>
    <uint name="nbConnections-4-18" val="0"/>
    <uint name="nbConnections-4-19" val="0"/>
    <uint name="nbConnections-5-6" val="1"/>
    <vector2u name="connection-5-6-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-5-7" val="0"/>
    <uint name="nbConnections-5-8" val="0"/>
    <uint name="nbConnections-5-9" val="0"/>
    <uint name="nbConnections-5-10" val="0"/>
    <uint name="nbConnections-5-11" val="0"/>
    <uint name="nbConnections-5-12" val="0"/>
    <uint name="nbConnections-5-13" val="0"/>
    <uint name="nbConnections-5-14" val="0"/>
    <uint name="nbConnections-5-15" val="0"/>
    <uint name="nbConnections-5-16" val="0"/>
    <uint name="nbConnections-5-17" val="0"/>
    <uint name="nbConnections-5-18" val="0"/>
    <uint name="nbConnections-5-19" val="0"/>
    <uint name="nbConnections-6-7" val="1"/>
    <vector2u name="connection-6-7-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-6-8" val="0"/>
    <uint name="nbConnections-6-9" val="0"/>
    <uint name="nbConnections-6-10" val="0"/>
    <uint name="nbConnections-6-11" val="0"/>
    <uint name="nbConnections-6-12" val="0"/>
    <uint name="nbConnections-6-13" val="0"/>
    <uint name="nbConnections-6-14" val="0"/>
    <uint name="nbConnections-6-15" val="0"/>
    <uint name="nbConnections-6-16" val="0"/>
    <uint name="nbConnections-6-17" val="0"/>
    <uint name="nbConnections-6-18" val="0"/>
    <uint name="nbConnections-6-19" val="0"/>
    <uint name="nbConnections-7-8" val="1"/>
    <vector2u name="connection-7-8-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-7-9" val="1"/>
    <vector2u name="connection-7-9-0">
     <uint name="0" val="1"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-7-10" val="1"/>
    <vector2u name="connection-7-10-0">
     <uint name="0" val="2"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-7-11" val="0"/>
    <uint name="nbConnections-7-12" val="1"/>
    <vector2u name="connection-7-12-0">
     <uint name="0" val="2"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-7-13" val="1"/>
    <vector2u name="connection-7-13-0">
     <uint name="0" val="1"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-7-14" val="1"/>
    <vector2u name="connection-7-14-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-7-15" val="0"/>
    <uint name="nbConnections-7-16" val="1"/>
    <vector2u name="connection-7-16-0">
     <uint name="0" val="2"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-7-17" val="1"/>
    <vector2u name="connection-7-17-0">
     <uint name="0" val="1"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-7-18" val="1"/>
    <vector2u name="connection-7-18-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-7-19" val="0"/>
    <uint name="nbConnections-8-9" val="0"/>
    <uint name="nbConnections-8-10" val="0"/>
    <uint name="nbConnections-8-11" val="1"/>
    <vector2u name="connection-8-11-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-8-12" val="0"/>
    <uint name="nbConnections-8-13" val="0"/>
    <uint name="nbConnections-8-14" val="0"/>
    <uint name="nbConnections-8-15" val="0"/>
    <uint name="nbConnections-8-16" val="0"/>
    <uint name="nbConnections-8-17" val="0"/>
    <uint name="nbConnections-8-18" val="0"/>
    <uint name="nbConnections-8-19" val="0"/>
    <uint name="nbConnections-9-10" val="0"/>
    <uint name="nbConnections-9-11" val="1"/>
    <vector2u name="connection-9-11-0">
     <uint name="0" val="0"/>
     <uint name="1" val="1"/>
    </vector2u>
    <uint name="nbConnections-9-12" val="0"/>
    <uint name="nbConnections-9-13" val="0"/>
    <uint name="nbConnections-9-14" val="0"/>
    <uint name="nbConnections-9-15" val="0"/>
    <uint name="nbConnections-9-16" val="0"/>
    <uint name="nbConnections-9-17" val="0"/>
    <uint name="nbConnections-9-18" val="0"/>
    <uint name="nbConnections-9-19" val="0"/>
    <uint name="nbConnections-10-11" val="1"/>
    <vector2u name="connection-10-11-0">
     <uint name="0" val="0"/>
     <uint name="1" val="2"/>
    </vector2u>
    <uint name="nbConnections-10-12" val="0"/>
    <uint name="nbConnections-10-13" val="0"/>
    <uint name="nbConnections-10-14" val="0"/>
    <uint name="nbConnections-10-15" val="0"/>
    <uint name="nbConnections-10-16" val="0"/>
    <uint name="nbConnections-10-17" val="0"/>
    <uint name="nbConnections-10-18" val="0"/>
    <uint name="nbConnections-10-19" val="0"/>
    <uint name="nbConnections-11-12" val="0"/>
    <uint name="nbConnections-11-13" val="0"/>
    <uint name="nbConnections-11-14" val="0"/>
    <uint name="nbConnections-11-15" val="0"/>
    <uint name="nbConnections-11-16" val="0"/>
    <uint name="nbConnections-11-17" val="0"/>
    <uint name="nbConnections-11-18" val="0"/>
    <uint name="nbConnections-11-19" val="0"/>
    <uint name="nbConnections-12-13" val="0"/>
    <uint name="nbConnections-12-14" val="0"/>
    <uint name="nbConnections-12-15" val="1"/>
    <vector2u name="connection-12-15-0">
     <uint name="0" val="0"/>
     <uint name="1" val="2"/>
    </vector2u>
    <uint name="nbConnections-12-16" val="0"/>
    <uint name="nbConnections-12-17" val="0"/>
    <uint name="nbConnections-12-18" val="0"/>
    <uint name="nbConnections-12-19" val="0"/>
    <uint name="nbConnections-13-14" val="0"/>
    <uint name="nbConnections-13-15" val="1"/>
    <vector2u name="connection-13-15-0">
     <uint name="0" val="0"/>
     <uint name="1" val="1"/>
    </vector2u>
    <uint name="nbConnections-13-16" val="0"/>
    <uint name="nbConnections-13-17" val="0"/>
    <uint name="nbConnections-13-18" val="0"/>
    <uint name="nbConnections-13-19" val="0"/>
    <uint name="nbConnections-14-15" val="1"/>
    <vector2u name="connection-14-15-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-14-16" val="0"/>
    <uint name="nbConnections-14-17" val="0"/>
    <uint name="nbConnections-14-18" val="0"/>
    <uint name="nbConnections-14-19" val="0"/>
    <uint name="nbConnections-15-16" val="0"/>
    <uint name="nbConnections-15-17" val="0"/>
    <uint name="nbConnections-15-18" val="0"/>
    <uint name="nbConnections-15-19" val="0"/>
    <uint name="nbConnections-16-17" val="0"/>
    <uint name="nbConnections-16-18" val="0"/>
    <uint name="nbConnections-16-19" val="1"/>
    <vector2u name="connection-16-19-0">
     <uint name="0" val="0"/>
     <uint name="1" val="2"/>
    </vector2u>
    <uint name="nbConnections-17-18" val="0"/>
    <uint name="nbConnections-17-19" val="1"/>
    <vector2u name="connection-17-19-0">
     <uint name="0" val="0"/>
     <uint name="1" val="1"/>
    </vector2u>
    <uint name="nbConnections-18-19" val="1"/>
    <vector2u name="connection-18-19-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <bool name="nodeHasWidget-0" val="1"/>
    <IOData name="node-0">
     <string name="genericGlslVersion" val="420"/>
     <string name="genericNodeName" val="genericLightNode"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform vec2 mouse;&#xa;uniform float radius;&#xa;uniform int shape;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 selection;&#xa;uniform vec2 mouse;&#xa;uniform float radius;&#xa;uniform int shape;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;const float PI = 3.14159265359;&#xa;&#xa;vec3 coordToDir(vec2 coord){&#xa;&#x9;float theta = PI-coord.y*PI;&#xa;&#x9;float phi = coord.x*PI*2.0-PI;&#xa;&#x9;return vec3(sin(phi)*sin(theta), cos(theta), cos(phi)*sin(theta));&#xa;&#x9;//return vec3(coord, 1.0);&#xa;}&#xa;&#xa;float falloff (float d, float r){&#xa;&#x9;//return (d>r) ? 0.0 : pow(1-pow(d/r,2.0), 5.0);&#xa;&#x9;return (d>r) ? 0.0 : 1.0;&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;vec2 dim = vec2(1024,512);&#x9;// Dimensions of the image&#xa;&#x9;float r = radius/min(dim.x, dim.y);&#x9;&#x9;// &#xa;&#xa;&#x9;vec3 lCol = vec3(10/(PI*r*r));&#x9;&#x9;// Color of zone/light&#xa;&#x9;vec3 dir = coordToDir(texcoord);&#x9;&#x9;// Position/direction of the fragment&#xa;&#x9;vec3 pDir = coordToDir(mouse/dim);&#x9;// Position/direction of the cursor&#xa;&#xa;&#x9;float d = acos(dot(pDir,dir));&#xa;&#x9;float val = 0.0;&#xa;&#x9;if (shape==0){&#xa;&#x9;&#x9;val = falloff(d, r);&#xa;&#x9;} else {&#xa;&#x9;&#x9;float dtheta = abs(acos(dir.y)-acos(pDir.y));&#xa;&#x9;&#x9;float dphi = acos(dot(normalize(dir.zx),normalize(pDir.zx)));&#xa;&#x9;&#x9;val = falloff(dtheta,r) * falloff(dphi,r);&#xa;&#x9;}&#xa;&#xa;&#x9;selection = vec4(lCol*val, 1.0);&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform vec2 mouse;&#xa;uniform float radius;&#xa;uniform int shape;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform vec2 mouse;&#xa;uniform float radius;&#xa;uniform int shape;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform vec2 mouse;&#xa;uniform float radius;&#xa;uniform int shape;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="1024"/>
      <float name="1" val="512"/>
     </vector2f>
     <bool name="genericNeedMouse" val="1"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="2"/>
     <int name="genericWidgetType-0" val="0"/>
     <int name="genericWidgetView-0" val="1"/>
     <string name="genericWidgetName-0" val="radius"/>
     <bool name="genericWidgetKeyframed-0" val="0"/>
     <int name="genericWidgetType-1" val="1"/>
     <int name="genericWidgetView-1" val="2"/>
     <string name="genericWidgetName-1" val="shape"/>
     <bool name="genericWidgetKeyframed-1" val="0"/>
    </IOData>
    <IOData name="nodeWidget-0">
     <uint name="nbChildren" val="3"/>
     <IOData name="childWidget-0">
      <bool name="vector2iAttribKeyframed" val="1"/>
      <vector2i name="vector2iAttribMinVal">
       <int name="0" val="-10000"/>
       <int name="1" val="-10000"/>
      </vector2i>
      <vector2i name="vector2iAttribMaxVal">
       <int name="0" val="10000"/>
       <int name="1" val="10000"/>
      </vector2i>
      <IOData name="vector2iAttribCurve">
       <vector2i name="currentVal">
        <int name="0" val="398"/>
        <int name="1" val="245"/>
       </vector2i>
       <uint name="nbCurves" val="2"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="398"/>
         </vector2f>
        </IOData>
       </IOData>
       <IOData name="curve-1">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="245"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <bool name="floatAttribKeyframed" val="0"/>
      <float name="floatAttribMinVal" val="1"/>
      <float name="floatAttribMaxVal" val="1000"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="382.618"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="382.618"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-2">
      <bool name="intAttribKeyframed" val="0"/>
      <int name="intAttribMinVal" val="0"/>
      <int name="intAttribMaxVal" val="1"/>
      <IOData name="intAttribCurve">
       <int name="currentVal" val="0"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="0"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
    </IOData>
    <vector2f name="nodeOutputPos-0-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-1" val="1"/>
    <IOData name="node-1">
     <uint name="nbNodes" val="2"/>
     <string name="nodeStringId-0" val="imgLoaderId"/>
     <uint name="nodeVersion-0" val="1"/>
     <string name="nodeName-0" val="imageLoader"/>
     <string name="nodePath-0" val="Imaging/"/>
     <string name="nodeDesc-0" val="Image loader"/>
     <string name="nodeHelp-0" val="Load an image."/>
     <uint name="nodeId-0" val="0"/>
     <uint name="nodeGraphId-0" val="0"/>
     <vector2f name="nodePos-0">
      <float name="0" val="-1548.21"/>
      <float name="1" val="506.441"/>
     </vector2f>
     <int name="nodeInputNameSize-0" val="0"/>
     <int name="nodeOutputNameSize-0" val="1"/>
     <string name="nodeOutputName-0-0" val="image"/>
     <string name="nodeStringId-1" val="_GRATIN_GROUPED_NODES_ID_"/>
     <uint name="nodeVersion-1" val="1"/>
     <string name="nodeName-1" val="toneMapTimo"/>
     <string name="nodePath-1" val="Imaging/tonemap/"/>
     <string name="nodeDesc-1" val="tmoMeanStd mixed with a black color."/>
     <string name="nodeHelp-1" val="basically the Mean&amp;Std Tone mapping, with a darkening feature."/>
     <uint name="nodeId-1" val="1"/>
     <uint name="nodeGraphId-1" val="0"/>
     <vector2f name="nodePos-1">
      <float name="0" val="1548.21"/>
      <float name="1" val="-506.441"/>
     </vector2f>
     <int name="nodeInputNameSize-1" val="1"/>
     <int name="nodeOutputNameSize-1" val="1"/>
     <string name="nodeInputName-1-0" val="image"/>
     <string name="nodeOutputName-1-0" val="toneMap"/>
     <uint name="nbConnections-0-1" val="1"/>
     <vector2u name="connection-0-1-0">
      <uint name="0" val="0"/>
      <uint name="1" val="0"/>
     </vector2u>
     <bool name="nodeHasWidget-0" val="1"/>
     <IOData name="node-0">
      <string name="filename" val="../../../../../pbrt/scenes/object/birdbody/impmapTX_birdbody_glass.exr"/>
      <vector2i name="size">
       <int name="0" val="1024"/>
       <int name="1" val="512"/>
      </vector2i>
     </IOData>
     <IOData name="nodeWidget-0">
      <bool name="keepAspectRatio" val="0"/>
      <bool name="keepSize" val="0"/>
     </IOData>
     <vector2f name="nodeOutputPos-0-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <bool name="nodeHasWidget-1" val="1"/>
     <IOData name="node-1">
      <uint name="nbNodes" val="3"/>
      <string name="nodeStringId-0" val="globalMeanColorID"/>
      <uint name="nodeVersion-0" val="1"/>
      <string name="nodeName-0" val="globalMeanColor"/>
      <string name="nodePath-0" val="Analysis/global"/>
      <string name="nodeDesc-0" val="Mean color of an image"/>
      <string name="nodeHelp-0" val="Compute the mean color of an image. &#xa;The resulting color is stored in the last level of the output pyramid. &#xa;It can be accessed via the following formula: &#xa;&#xa;vec2 s = vec2(textureSize(image,0)); &#xa;float l = 1. + floor(log2(max(s.x,s.y))); &#xa;vec4 color = textureLod(image,vec2(.5),l); "/>
      <uint name="nodeId-0" val="0"/>
      <uint name="nodeGraphId-0" val="0"/>
      <vector2f name="nodePos-0">
       <float name="0" val="-972.699"/>
       <float name="1" val="213.905"/>
      </vector2f>
      <int name="nodeInputNameSize-0" val="1"/>
      <int name="nodeOutputNameSize-0" val="1"/>
      <string name="nodeInputName-0-0" val="image"/>
      <string name="nodeOutputName-0-0" val="meanColor"/>
      <string name="nodeStringId-1" val="globalVarianceColorID"/>
      <uint name="nodeVersion-1" val="1"/>
      <string name="nodeName-1" val="globalVarianceColor"/>
      <string name="nodePath-1" val="Analysis/global"/>
      <string name="nodeDesc-1" val="Variance color of an image"/>
      <string name="nodeHelp-1" val="Compute the variance color of an image (only RGB channels). &#xa;&#xa;The input must be the output pyramid obtained with the node globalMeanColor.&#xa;&#xa;The resulting color is stored in the last level of the output pyramid. &#xa;It can be accessed via the following formula: &#xa;&#xa;vec2 s = vec2(textureSize(image,0)); &#xa;float l = 1. + floor(log2(max(s.x,s.y))); &#xa;vec4 color = textureLod(image,vec2(.5),l); &#xa;&#xa;// standard deviation&#xa;color = sqrt(color);"/>
      <uint name="nodeId-1" val="1"/>
      <uint name="nodeGraphId-1" val="0"/>
      <vector2f name="nodePos-1">
       <float name="0" val="-1.10541"/>
       <float name="1" val="-262.655"/>
      </vector2f>
      <int name="nodeInputNameSize-1" val="1"/>
      <int name="nodeOutputNameSize-1" val="1"/>
      <string name="nodeInputName-1-0" val="globalMeanPyramid"/>
      <string name="nodeOutputName-1-0" val="varianceColor"/>
      <string name="nodeStringId-2" val="imgGenericId"/>
      <uint name="nodeVersion-2" val="1"/>
      <string name="nodeName-2" val="tmoMeanStd"/>
      <string name="nodePath-2" val="Generic/"/>
      <string name="nodeDesc-2" val="Generic node for image processing"/>
      <string name="nodeHelp-2" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
      <uint name="nodeId-2" val="2"/>
      <uint name="nodeGraphId-2" val="0"/>
      <vector2f name="nodePos-2">
       <float name="0" val="973.804"/>
       <float name="1" val="48.751"/>
      </vector2f>
      <int name="nodeInputNameSize-2" val="2"/>
      <int name="nodeOutputNameSize-2" val="1"/>
      <string name="nodeInputName-2-0" val="meanPyramid"/>
      <string name="nodeInputName-2-1" val="variancePyramid"/>
      <string name="nodeOutputName-2-0" val="toneMap"/>
      <uint name="nbConnections-0-1" val="1"/>
      <vector2u name="connection-0-1-0">
       <uint name="0" val="0"/>
       <uint name="1" val="0"/>
      </vector2u>
      <uint name="nbConnections-0-2" val="1"/>
      <vector2u name="connection-0-2-0">
       <uint name="0" val="0"/>
       <uint name="1" val="0"/>
      </vector2u>
      <uint name="nbConnections-1-2" val="1"/>
      <vector2u name="connection-1-2-0">
       <uint name="0" val="0"/>
       <uint name="1" val="1"/>
      </vector2u>
      <bool name="nodeHasWidget-0" val="1"/>
      <IOData name="node-0">
       <int name="processMode" val="0"/>
       <string name="genericGlslVersion" val="410"/>
       <string name="genericNodeName" val="globalMeanColor"/>
       <bool name="genericUseVertex" val="0"/>
       <bool name="genericUseTesselation" val="0"/>
       <bool name="genericUseGeometry" val="0"/>
       <bool name="genericUseFragment" val="1"/>
       <int name="genericOutFilter" val="9728"/>
       <int name="genericOutWrap" val="33071"/>
       <bool name="genericUseDepthTest" val="0"/>
       <bool name="genericUseBlending" val="0"/>
       <uint name="genericDepthFunc" val="513"/>
       <uint name="genericBlendSrc" val="1"/>
       <uint name="genericBlendDst" val="0"/>
       <vector4f name="genericBackground">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
        <float name="2" val="0"/>
        <float name="3" val="0"/>
       </vector4f>
       <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
       <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 meanColor;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;if(isFinest)&#xa;&#x9;&#x9;meanColor = texture(image,texcoord);&#xa;&#x9;else {&#xa;&#x9;&#x9;vec2 ps = .5/vec2(textureSize(prevLevel0,0));&#xa;&#x9;&#x9;vec4 c1 = texture(prevLevel0,texcoord+ps);&#xa;&#x9;&#x9;vec4 c2 = texture(prevLevel0,texcoord-ps);&#xa;&#x9;&#x9;vec4 c3 = texture(prevLevel0,texcoord+vec2(ps.x,-ps.y));&#xa;&#x9;&#x9;vec4 c4 = texture(prevLevel0,texcoord+vec2(-ps.x,ps.y));&#xa;&#x9;&#x9;meanColor = .25*(c1+c2+c3+c4);&#xa;&#x9;}&#xa;}&#xa;"/>
       <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
       <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
       <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
       <vector2f name="genericTSize">
        <float name="0" val="1"/>
        <float name="1" val="1"/>
       </vector2f>
       <vector2f name="genericTOffset">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
       </vector2f>
       <bool name="genericNeedMouse" val="0"/>
       <bool name="genericNeedKeyboard" val="0"/>
       <uint name="genericNbWidgets" val="0"/>
      </IOData>
      <IOData name="nodeWidget-0">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <vector2f name="nodeInputPos-0-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <vector2f name="nodeOutputPos-0-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <bool name="nodeHasWidget-1" val="1"/>
      <IOData name="node-1">
       <int name="processMode" val="0"/>
       <string name="genericGlslVersion" val="410"/>
       <string name="genericNodeName" val="globalVarianceColor"/>
       <bool name="genericUseVertex" val="0"/>
       <bool name="genericUseTesselation" val="0"/>
       <bool name="genericUseGeometry" val="0"/>
       <bool name="genericUseFragment" val="1"/>
       <int name="genericOutFilter" val="9728"/>
       <int name="genericOutWrap" val="33071"/>
       <bool name="genericUseDepthTest" val="0"/>
       <bool name="genericUseBlending" val="0"/>
       <uint name="genericDepthFunc" val="513"/>
       <uint name="genericBlendSrc" val="1"/>
       <uint name="genericBlendDst" val="0"/>
       <vector4f name="genericBackground">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
        <float name="2" val="0"/>
        <float name="3" val="0"/>
       </vector4f>
       <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
       <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 varianceColor;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;if(isFinest) {&#xa;&#x9;&#x9;vec2 s = vec2(textureSize(globalMeanPyramid,0));&#xa;&#x9;&#x9;float l = 1.+ floor(log2(max(s.x,s.y)));&#xa;&#x9;&#x9;vec4 v = texture(globalMeanPyramid,texcoord);&#xa;&#x9;&#x9;v.xyz = v.xyz-textureLod(globalMeanPyramid,vec2(.5),l).xyz;&#xa;&#x9;&#x9;varianceColor = v*v;&#xa;&#x9;} else {&#xa;&#x9;&#x9;vec2 ps = .5/vec2(textureSize(prevLevel0,0));&#xa;&#x9;&#x9;vec4 c1 = texture(prevLevel0,texcoord+ps);&#xa;&#x9;&#x9;vec4 c2 = texture(prevLevel0,texcoord-ps);&#xa;&#x9;&#x9;vec4 c3 = texture(prevLevel0,texcoord+vec2(ps.x,-ps.y));&#xa;&#x9;&#x9;vec4 c4 = texture(prevLevel0,texcoord+vec2(-ps.x,ps.y));&#xa;&#x9;&#x9;varianceColor = .25*(c1+c2+c3+c4);&#xa;&#x9;}&#xa;}&#xa;"/>
       <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
       <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
       <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
       <vector2f name="genericTSize">
        <float name="0" val="1"/>
        <float name="1" val="1"/>
       </vector2f>
       <vector2f name="genericTOffset">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
       </vector2f>
       <bool name="genericNeedMouse" val="0"/>
       <bool name="genericNeedKeyboard" val="0"/>
       <uint name="genericNbWidgets" val="0"/>
      </IOData>
      <IOData name="nodeWidget-1">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <vector2f name="nodeInputPos-1-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <vector2f name="nodeOutputPos-1-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <bool name="nodeHasWidget-2" val="1"/>
      <IOData name="node-2">
       <string name="genericGlslVersion" val="410"/>
       <string name="genericNodeName" val="tmoMeanStd"/>
       <bool name="genericUseVertex" val="0"/>
       <bool name="genericUseTesselation" val="0"/>
       <bool name="genericUseGeometry" val="0"/>
       <bool name="genericUseFragment" val="1"/>
       <int name="genericOutFilter" val="9729"/>
       <int name="genericOutWrap" val="33071"/>
       <bool name="genericUseDepthTest" val="0"/>
       <bool name="genericUseBlending" val="0"/>
       <uint name="genericDepthFunc" val="513"/>
       <uint name="genericBlendSrc" val="1"/>
       <uint name="genericBlendDst" val="0"/>
       <vector4f name="genericBackground">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
        <float name="2" val="0"/>
        <float name="3" val="0"/>
       </vector4f>
       <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
       <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 toneMap;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;vec2 s = textureSize(meanPyramid,0);&#xa;&#x9;float l = 1.+floor(log2(max(s.x,s.y)));&#xa;&#xa;&#x9;vec4 col = textureLod(meanPyramid,texcoord,0);&#xa;&#x9;vec3 cmean = textureLod(meanPyramid,vec2(.5),l).xyz;&#xa;&#x9;vec3 cvar = textureLod(variancePyramid,vec2(.5),l).xyz;&#xa;&#x9;&#xa;&#x9;float smean = (cmean.r+cmean.g+cmean.b)/3.;&#xa;&#x9;float sstd = sqrt((cvar.r+cvar.g+cvar.b)/3.);&#xa;&#x9;&#xa;&#x9;col.xyz = ((col.xyz-vec3(smean))/sstd)/3.+vec3(.5);&#xa;&#xa;&#x9;vec4 black = vec4(0,0,0,1);&#xa;&#x9;toneMap = mix(col,black,alpha);&#xa;}&#xa;"/>
       <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
       <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
       <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
       <vector2f name="genericTSize">
        <float name="0" val="1"/>
        <float name="1" val="1"/>
       </vector2f>
       <vector2f name="genericTOffset">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
       </vector2f>
       <bool name="genericNeedMouse" val="0"/>
       <bool name="genericNeedKeyboard" val="0"/>
       <uint name="genericNbWidgets" val="1"/>
       <int name="genericWidgetType-0" val="0"/>
       <int name="genericWidgetView-0" val="1"/>
       <string name="genericWidgetName-0" val="alpha"/>
       <bool name="genericWidgetKeyframed-0" val="0"/>
      </IOData>
      <IOData name="nodeWidget-2">
       <uint name="nbChildren" val="1"/>
       <IOData name="childWidget-0">
        <bool name="floatAttribKeyframed" val="0"/>
        <float name="floatAttribMinVal" val="0"/>
        <float name="floatAttribMaxVal" val="1"/>
        <IOData name="floatAttribCurve">
         <float name="currentVal" val="0.546"/>
         <uint name="nbCurves" val="1"/>
         <IOData name="curve-0">
          <int name="interpType" val="0"/>
          <int name="leftType" val="0"/>
          <int name="rightType" val="0"/>
          <IOData name="interpolator">
           <uint name="nbPoints" val="1"/>
           <uint name="nbTangents" val="0"/>
           <vector2f name="controlPoint-0">
            <float name="0" val="0"/>
            <float name="1" val="0.546"/>
           </vector2f>
          </IOData>
         </IOData>
        </IOData>
        <uint name="nbChildren" val="0"/>
       </IOData>
      </IOData>
      <vector2f name="nodeInputPos-2-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <vector2f name="nodeInputPos-2-1">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <vector2f name="nodeOutputPos-2-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
     </IOData>
     <IOData name="nodeWidget-1">
      <uint name="nbChildren" val="3"/>
      <IOData name="childWidget-0">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-1">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-2">
       <uint name="nbChildren" val="1"/>
       <IOData name="childWidget-0">
        <bool name="floatAttribKeyframed" val="0"/>
        <float name="floatAttribMinVal" val="0"/>
        <float name="floatAttribMaxVal" val="1"/>
        <IOData name="floatAttribCurve">
         <float name="currentVal" val="0.546"/>
         <uint name="nbCurves" val="1"/>
         <IOData name="curve-0">
          <int name="interpType" val="0"/>
          <int name="leftType" val="0"/>
          <int name="rightType" val="0"/>
          <IOData name="interpolator">
           <uint name="nbPoints" val="1"/>
           <uint name="nbTangents" val="0"/>
           <vector2f name="controlPoint-0">
            <float name="0" val="0"/>
            <float name="1" val="0.546"/>
           </vector2f>
          </IOData>
         </IOData>
        </IOData>
        <uint name="nbChildren" val="0"/>
       </IOData>
      </IOData>
     </IOData>
     <vector2f name="nodeInputPos-1-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeOutputPos-1-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
    </IOData>
    <IOData name="nodeWidget-1">
     <uint name="nbChildren" val="2"/>
     <IOData name="childWidget-0">
      <bool name="keepAspectRatio" val="0"/>
      <bool name="keepSize" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <uint name="nbChildren" val="3"/>
      <IOData name="childWidget-0">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-1">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-2">
       <uint name="nbChildren" val="1"/>
       <IOData name="childWidget-0">
        <bool name="floatAttribKeyframed" val="0"/>
        <float name="floatAttribMinVal" val="0"/>
        <float name="floatAttribMaxVal" val="1"/>
        <IOData name="floatAttribCurve">
         <float name="currentVal" val="0.546"/>
         <uint name="nbCurves" val="1"/>
         <IOData name="curve-0">
          <int name="interpType" val="0"/>
          <int name="leftType" val="0"/>
          <int name="rightType" val="0"/>
          <IOData name="interpolator">
           <uint name="nbPoints" val="1"/>
           <uint name="nbTangents" val="0"/>
           <vector2f name="controlPoint-0">
            <float name="0" val="0"/>
            <float name="1" val="0.546"/>
           </vector2f>
          </IOData>
         </IOData>
        </IOData>
        <uint name="nbChildren" val="0"/>
       </IOData>
      </IOData>
     </IOData>
    </IOData>
    <vector2f name="nodeOutputPos-1-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-2" val="1"/>
    <IOData name="node-2">
     <uint name="nbNodes" val="2"/>
     <string name="nodeStringId-0" val="minColorID"/>
     <uint name="nodeVersion-0" val="1"/>
     <string name="nodeName-0" val="minColor"/>
     <string name="nodePath-0" val="Imaging/operators"/>
     <string name="nodeDesc-0" val="Min of 2 images"/>
     <string name="nodeHelp-0" val="Return the minimum color (RGBA channels) between 2 images. "/>
     <uint name="nodeId-0" val="0"/>
     <uint name="nodeGraphId-0" val="0"/>
     <vector2f name="nodePos-0">
      <float name="0" val="-817.48"/>
      <float name="1" val="0.0506592"/>
     </vector2f>
     <int name="nodeInputNameSize-0" val="2"/>
     <int name="nodeOutputNameSize-0" val="1"/>
     <string name="nodeInputName-0-0" val="img01"/>
     <string name="nodeInputName-0-1" val="img02"/>
     <string name="nodeOutputName-0-0" val="image"/>
     <string name="nodeStringId-1" val="globalMeanColorID"/>
     <uint name="nodeVersion-1" val="1"/>
     <string name="nodeName-1" val="globalMeanColor"/>
     <string name="nodePath-1" val="Analysis/global"/>
     <string name="nodeDesc-1" val="Mean color of an image"/>
     <string name="nodeHelp-1" val="Compute the mean color of an image. &#xa;The resulting color is stored in the last level of the output pyramid. &#xa;It can be accessed via the following formula: &#xa;&#xa;vec2 s = vec2(textureSize(image,0)); &#xa;float l = 1. + floor(log2(max(s.x,s.y))); &#xa;vec4 color = textureLod(image,vec2(.5),l); "/>
     <uint name="nodeId-1" val="1"/>
     <uint name="nodeGraphId-1" val="0"/>
     <vector2f name="nodePos-1">
      <float name="0" val="817.481"/>
      <float name="1" val="-0.0507812"/>
     </vector2f>
     <int name="nodeInputNameSize-1" val="1"/>
     <int name="nodeOutputNameSize-1" val="1"/>
     <string name="nodeInputName-1-0" val="image"/>
     <string name="nodeOutputName-1-0" val="meanColor"/>
     <uint name="nbConnections-0-1" val="1"/>
     <vector2u name="connection-0-1-0">
      <uint name="0" val="0"/>
      <uint name="1" val="0"/>
     </vector2u>
     <bool name="nodeHasWidget-0" val="1"/>
     <IOData name="node-0">
      <string name="genericGlslVersion" val="410"/>
      <string name="genericNodeName" val="minColor"/>
      <bool name="genericUseVertex" val="0"/>
      <bool name="genericUseTesselation" val="0"/>
      <bool name="genericUseGeometry" val="0"/>
      <bool name="genericUseFragment" val="1"/>
      <int name="genericOutFilter" val="9729"/>
      <int name="genericOutWrap" val="33071"/>
      <bool name="genericUseDepthTest" val="0"/>
      <bool name="genericUseBlending" val="0"/>
      <uint name="genericDepthFunc" val="513"/>
      <uint name="genericBlendSrc" val="1"/>
      <uint name="genericBlendDst" val="0"/>
      <vector4f name="genericBackground">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
       <float name="2" val="0"/>
       <float name="3" val="0"/>
      </vector4f>
      <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
      <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 image;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;vec4 col1 = texture(img01,texcoord);&#xa;&#x9;vec4 col2 = texture(img02,texcoord);&#xa;&#x9;image = min(col1,col2);&#xa;}&#xa;"/>
      <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
      <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
      <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
      <vector2f name="genericTSize">
       <float name="0" val="1"/>
       <float name="1" val="1"/>
      </vector2f>
      <vector2f name="genericTOffset">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
      </vector2f>
      <bool name="genericNeedMouse" val="0"/>
      <bool name="genericNeedKeyboard" val="0"/>
      <uint name="genericNbWidgets" val="0"/>
     </IOData>
     <IOData name="nodeWidget-0">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <vector2f name="nodeInputPos-0-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeInputPos-0-1">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeOutputPos-0-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <bool name="nodeHasWidget-1" val="1"/>
     <IOData name="node-1">
      <int name="processMode" val="0"/>
      <string name="genericGlslVersion" val="410"/>
      <string name="genericNodeName" val="globalMeanColor"/>
      <bool name="genericUseVertex" val="0"/>
      <bool name="genericUseTesselation" val="0"/>
      <bool name="genericUseGeometry" val="0"/>
      <bool name="genericUseFragment" val="1"/>
      <int name="genericOutFilter" val="9728"/>
      <int name="genericOutWrap" val="33071"/>
      <bool name="genericUseDepthTest" val="0"/>
      <bool name="genericUseBlending" val="0"/>
      <uint name="genericDepthFunc" val="513"/>
      <uint name="genericBlendSrc" val="1"/>
      <uint name="genericBlendDst" val="0"/>
      <vector4f name="genericBackground">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
       <float name="2" val="0"/>
       <float name="3" val="0"/>
      </vector4f>
      <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
      <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 meanColor;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;if(isFinest)&#xa;&#x9;&#x9;meanColor = texture(image,texcoord);&#xa;&#x9;else {&#xa;&#x9;&#x9;vec2 ps = .5/vec2(textureSize(prevLevel0,0));&#xa;&#x9;&#x9;vec4 c1 = texture(prevLevel0,texcoord+ps);&#xa;&#x9;&#x9;vec4 c2 = texture(prevLevel0,texcoord-ps);&#xa;&#x9;&#x9;vec4 c3 = texture(prevLevel0,texcoord+vec2(ps.x,-ps.y));&#xa;&#x9;&#x9;vec4 c4 = texture(prevLevel0,texcoord+vec2(-ps.x,ps.y));&#xa;&#x9;&#x9;meanColor = .25*(c1+c2+c3+c4);&#xa;&#x9;}&#xa;}&#xa;"/>
      <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
      <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
      <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
      <vector2f name="genericTSize">
       <float name="0" val="1"/>
       <float name="1" val="1"/>
      </vector2f>
      <vector2f name="genericTOffset">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
      </vector2f>
      <bool name="genericNeedMouse" val="0"/>
      <bool name="genericNeedKeyboard" val="0"/>
      <uint name="genericNbWidgets" val="0"/>
     </IOData>
     <IOData name="nodeWidget-1">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <vector2f name="nodeInputPos-1-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeOutputPos-1-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
    </IOData>
    <IOData name="nodeWidget-2">
     <uint name="nbChildren" val="2"/>
     <IOData name="childWidget-0">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <uint name="nbChildren" val="0"/>
     </IOData>
    </IOData>
    <vector2f name="nodeInputPos-2-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeInputPos-2-1">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-2-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-3" val="1"/>
    <IOData name="node-3">
     <uint name="nbNodes" val="2"/>
     <string name="nodeStringId-0" val="imgLoaderId"/>
     <uint name="nodeVersion-0" val="1"/>
     <string name="nodeName-0" val="imageLoader"/>
     <string name="nodePath-0" val="Imaging/"/>
     <string name="nodeDesc-0" val="Image loader"/>
     <string name="nodeHelp-0" val="Load an image."/>
     <uint name="nodeId-0" val="0"/>
     <uint name="nodeGraphId-0" val="0"/>
     <vector2f name="nodePos-0">
      <float name="0" val="-1548.21"/>
      <float name="1" val="506.441"/>
     </vector2f>
     <int name="nodeInputNameSize-0" val="0"/>
     <int name="nodeOutputNameSize-0" val="1"/>
     <string name="nodeOutputName-0-0" val="image"/>
     <string name="nodeStringId-1" val="_GRATIN_GROUPED_NODES_ID_"/>
     <uint name="nodeVersion-1" val="1"/>
     <string name="nodeName-1" val="toneMapTimo"/>
     <string name="nodePath-1" val="Imaging/tonemap/"/>
     <string name="nodeDesc-1" val="tmoMeanStd mixed with a black color."/>
     <string name="nodeHelp-1" val="basically the Mean&amp;Std Tone mapping, with a darkening feature."/>
     <uint name="nodeId-1" val="1"/>
     <uint name="nodeGraphId-1" val="0"/>
     <vector2f name="nodePos-1">
      <float name="0" val="1548.21"/>
      <float name="1" val="-506.441"/>
     </vector2f>
     <int name="nodeInputNameSize-1" val="1"/>
     <int name="nodeOutputNameSize-1" val="1"/>
     <string name="nodeInputName-1-0" val="image"/>
     <string name="nodeOutputName-1-0" val="toneMap"/>
     <uint name="nbConnections-0-1" val="1"/>
     <vector2u name="connection-0-1-0">
      <uint name="0" val="0"/>
      <uint name="1" val="0"/>
     </vector2u>
     <bool name="nodeHasWidget-0" val="1"/>
     <IOData name="node-0">
      <string name="filename" val="../../../../../pbrt/scenes/object/birdbody/impmapR_birdbody_glass.exr"/>
      <vector2i name="size">
       <int name="0" val="1024"/>
       <int name="1" val="512"/>
      </vector2i>
     </IOData>
     <IOData name="nodeWidget-0">
      <bool name="keepAspectRatio" val="0"/>
      <bool name="keepSize" val="0"/>
     </IOData>
     <vector2f name="nodeOutputPos-0-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <bool name="nodeHasWidget-1" val="1"/>
     <IOData name="node-1">
      <uint name="nbNodes" val="3"/>
      <string name="nodeStringId-0" val="globalMeanColorID"/>
      <uint name="nodeVersion-0" val="1"/>
      <string name="nodeName-0" val="globalMeanColor"/>
      <string name="nodePath-0" val="Analysis/global"/>
      <string name="nodeDesc-0" val="Mean color of an image"/>
      <string name="nodeHelp-0" val="Compute the mean color of an image. &#xa;The resulting color is stored in the last level of the output pyramid. &#xa;It can be accessed via the following formula: &#xa;&#xa;vec2 s = vec2(textureSize(image,0)); &#xa;float l = 1. + floor(log2(max(s.x,s.y))); &#xa;vec4 color = textureLod(image,vec2(.5),l); "/>
      <uint name="nodeId-0" val="0"/>
      <uint name="nodeGraphId-0" val="0"/>
      <vector2f name="nodePos-0">
       <float name="0" val="-972.699"/>
       <float name="1" val="213.905"/>
      </vector2f>
      <int name="nodeInputNameSize-0" val="1"/>
      <int name="nodeOutputNameSize-0" val="1"/>
      <string name="nodeInputName-0-0" val="image"/>
      <string name="nodeOutputName-0-0" val="meanColor"/>
      <string name="nodeStringId-1" val="globalVarianceColorID"/>
      <uint name="nodeVersion-1" val="1"/>
      <string name="nodeName-1" val="globalVarianceColor"/>
      <string name="nodePath-1" val="Analysis/global"/>
      <string name="nodeDesc-1" val="Variance color of an image"/>
      <string name="nodeHelp-1" val="Compute the variance color of an image (only RGB channels). &#xa;&#xa;The input must be the output pyramid obtained with the node globalMeanColor.&#xa;&#xa;The resulting color is stored in the last level of the output pyramid. &#xa;It can be accessed via the following formula: &#xa;&#xa;vec2 s = vec2(textureSize(image,0)); &#xa;float l = 1. + floor(log2(max(s.x,s.y))); &#xa;vec4 color = textureLod(image,vec2(.5),l); &#xa;&#xa;// standard deviation&#xa;color = sqrt(color);"/>
      <uint name="nodeId-1" val="1"/>
      <uint name="nodeGraphId-1" val="0"/>
      <vector2f name="nodePos-1">
       <float name="0" val="-1.10541"/>
       <float name="1" val="-262.655"/>
      </vector2f>
      <int name="nodeInputNameSize-1" val="1"/>
      <int name="nodeOutputNameSize-1" val="1"/>
      <string name="nodeInputName-1-0" val="globalMeanPyramid"/>
      <string name="nodeOutputName-1-0" val="varianceColor"/>
      <string name="nodeStringId-2" val="imgGenericId"/>
      <uint name="nodeVersion-2" val="1"/>
      <string name="nodeName-2" val="tmoMeanStd"/>
      <string name="nodePath-2" val="Generic/"/>
      <string name="nodeDesc-2" val="Generic node for image processing"/>
      <string name="nodeHelp-2" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
      <uint name="nodeId-2" val="2"/>
      <uint name="nodeGraphId-2" val="0"/>
      <vector2f name="nodePos-2">
       <float name="0" val="973.804"/>
       <float name="1" val="48.751"/>
      </vector2f>
      <int name="nodeInputNameSize-2" val="2"/>
      <int name="nodeOutputNameSize-2" val="1"/>
      <string name="nodeInputName-2-0" val="meanPyramid"/>
      <string name="nodeInputName-2-1" val="variancePyramid"/>
      <string name="nodeOutputName-2-0" val="toneMap"/>
      <uint name="nbConnections-0-1" val="1"/>
      <vector2u name="connection-0-1-0">
       <uint name="0" val="0"/>
       <uint name="1" val="0"/>
      </vector2u>
      <uint name="nbConnections-0-2" val="1"/>
      <vector2u name="connection-0-2-0">
       <uint name="0" val="0"/>
       <uint name="1" val="0"/>
      </vector2u>
      <uint name="nbConnections-1-2" val="1"/>
      <vector2u name="connection-1-2-0">
       <uint name="0" val="0"/>
       <uint name="1" val="1"/>
      </vector2u>
      <bool name="nodeHasWidget-0" val="1"/>
      <IOData name="node-0">
       <int name="processMode" val="0"/>
       <string name="genericGlslVersion" val="410"/>
       <string name="genericNodeName" val="globalMeanColor"/>
       <bool name="genericUseVertex" val="0"/>
       <bool name="genericUseTesselation" val="0"/>
       <bool name="genericUseGeometry" val="0"/>
       <bool name="genericUseFragment" val="1"/>
       <int name="genericOutFilter" val="9728"/>
       <int name="genericOutWrap" val="33071"/>
       <bool name="genericUseDepthTest" val="0"/>
       <bool name="genericUseBlending" val="0"/>
       <uint name="genericDepthFunc" val="513"/>
       <uint name="genericBlendSrc" val="1"/>
       <uint name="genericBlendDst" val="0"/>
       <vector4f name="genericBackground">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
        <float name="2" val="0"/>
        <float name="3" val="0"/>
       </vector4f>
       <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
       <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 meanColor;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;if(isFinest)&#xa;&#x9;&#x9;meanColor = texture(image,texcoord);&#xa;&#x9;else {&#xa;&#x9;&#x9;vec2 ps = .5/vec2(textureSize(prevLevel0,0));&#xa;&#x9;&#x9;vec4 c1 = texture(prevLevel0,texcoord+ps);&#xa;&#x9;&#x9;vec4 c2 = texture(prevLevel0,texcoord-ps);&#xa;&#x9;&#x9;vec4 c3 = texture(prevLevel0,texcoord+vec2(ps.x,-ps.y));&#xa;&#x9;&#x9;vec4 c4 = texture(prevLevel0,texcoord+vec2(-ps.x,ps.y));&#xa;&#x9;&#x9;meanColor = .25*(c1+c2+c3+c4);&#xa;&#x9;}&#xa;}&#xa;"/>
       <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
       <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
       <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
       <vector2f name="genericTSize">
        <float name="0" val="1"/>
        <float name="1" val="1"/>
       </vector2f>
       <vector2f name="genericTOffset">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
       </vector2f>
       <bool name="genericNeedMouse" val="0"/>
       <bool name="genericNeedKeyboard" val="0"/>
       <uint name="genericNbWidgets" val="0"/>
      </IOData>
      <IOData name="nodeWidget-0">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <vector2f name="nodeInputPos-0-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <vector2f name="nodeOutputPos-0-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <bool name="nodeHasWidget-1" val="1"/>
      <IOData name="node-1">
       <int name="processMode" val="0"/>
       <string name="genericGlslVersion" val="410"/>
       <string name="genericNodeName" val="globalVarianceColor"/>
       <bool name="genericUseVertex" val="0"/>
       <bool name="genericUseTesselation" val="0"/>
       <bool name="genericUseGeometry" val="0"/>
       <bool name="genericUseFragment" val="1"/>
       <int name="genericOutFilter" val="9728"/>
       <int name="genericOutWrap" val="33071"/>
       <bool name="genericUseDepthTest" val="0"/>
       <bool name="genericUseBlending" val="0"/>
       <uint name="genericDepthFunc" val="513"/>
       <uint name="genericBlendSrc" val="1"/>
       <uint name="genericBlendDst" val="0"/>
       <vector4f name="genericBackground">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
        <float name="2" val="0"/>
        <float name="3" val="0"/>
       </vector4f>
       <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
       <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 varianceColor;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;if(isFinest) {&#xa;&#x9;&#x9;vec2 s = vec2(textureSize(globalMeanPyramid,0));&#xa;&#x9;&#x9;float l = 1.+ floor(log2(max(s.x,s.y)));&#xa;&#x9;&#x9;vec4 v = texture(globalMeanPyramid,texcoord);&#xa;&#x9;&#x9;v.xyz = v.xyz-textureLod(globalMeanPyramid,vec2(.5),l).xyz;&#xa;&#x9;&#x9;varianceColor = v*v;&#xa;&#x9;} else {&#xa;&#x9;&#x9;vec2 ps = .5/vec2(textureSize(prevLevel0,0));&#xa;&#x9;&#x9;vec4 c1 = texture(prevLevel0,texcoord+ps);&#xa;&#x9;&#x9;vec4 c2 = texture(prevLevel0,texcoord-ps);&#xa;&#x9;&#x9;vec4 c3 = texture(prevLevel0,texcoord+vec2(ps.x,-ps.y));&#xa;&#x9;&#x9;vec4 c4 = texture(prevLevel0,texcoord+vec2(-ps.x,ps.y));&#xa;&#x9;&#x9;varianceColor = .25*(c1+c2+c3+c4);&#xa;&#x9;}&#xa;}&#xa;"/>
       <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
       <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
       <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
       <vector2f name="genericTSize">
        <float name="0" val="1"/>
        <float name="1" val="1"/>
       </vector2f>
       <vector2f name="genericTOffset">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
       </vector2f>
       <bool name="genericNeedMouse" val="0"/>
       <bool name="genericNeedKeyboard" val="0"/>
       <uint name="genericNbWidgets" val="0"/>
      </IOData>
      <IOData name="nodeWidget-1">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <vector2f name="nodeInputPos-1-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <vector2f name="nodeOutputPos-1-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <bool name="nodeHasWidget-2" val="1"/>
      <IOData name="node-2">
       <string name="genericGlslVersion" val="410"/>
       <string name="genericNodeName" val="tmoMeanStd"/>
       <bool name="genericUseVertex" val="0"/>
       <bool name="genericUseTesselation" val="0"/>
       <bool name="genericUseGeometry" val="0"/>
       <bool name="genericUseFragment" val="1"/>
       <int name="genericOutFilter" val="9729"/>
       <int name="genericOutWrap" val="33071"/>
       <bool name="genericUseDepthTest" val="0"/>
       <bool name="genericUseBlending" val="0"/>
       <uint name="genericDepthFunc" val="513"/>
       <uint name="genericBlendSrc" val="1"/>
       <uint name="genericBlendDst" val="0"/>
       <vector4f name="genericBackground">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
        <float name="2" val="0"/>
        <float name="3" val="0"/>
       </vector4f>
       <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
       <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 toneMap;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;vec2 s = textureSize(meanPyramid,0);&#xa;&#x9;float l = 1.+floor(log2(max(s.x,s.y)));&#xa;&#xa;&#x9;vec4 col = textureLod(meanPyramid,texcoord,0);&#xa;&#x9;vec3 cmean = textureLod(meanPyramid,vec2(.5),l).xyz;&#xa;&#x9;vec3 cvar = textureLod(variancePyramid,vec2(.5),l).xyz;&#xa;&#x9;&#xa;&#x9;float smean = (cmean.r+cmean.g+cmean.b)/3.;&#xa;&#x9;float sstd = sqrt((cvar.r+cvar.g+cvar.b)/3.);&#xa;&#x9;&#xa;&#x9;col.xyz = ((col.xyz-vec3(smean))/sstd)/3.+vec3(.5);&#xa;&#xa;&#x9;vec4 black = vec4(0,0,0,1);&#xa;&#x9;toneMap = mix(col,black,alpha);&#xa;}&#xa;"/>
       <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
       <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
       <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
       <vector2f name="genericTSize">
        <float name="0" val="1"/>
        <float name="1" val="1"/>
       </vector2f>
       <vector2f name="genericTOffset">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
       </vector2f>
       <bool name="genericNeedMouse" val="0"/>
       <bool name="genericNeedKeyboard" val="0"/>
       <uint name="genericNbWidgets" val="1"/>
       <int name="genericWidgetType-0" val="0"/>
       <int name="genericWidgetView-0" val="1"/>
       <string name="genericWidgetName-0" val="alpha"/>
       <bool name="genericWidgetKeyframed-0" val="0"/>
      </IOData>
      <IOData name="nodeWidget-2">
       <uint name="nbChildren" val="1"/>
       <IOData name="childWidget-0">
        <bool name="floatAttribKeyframed" val="0"/>
        <float name="floatAttribMinVal" val="0"/>
        <float name="floatAttribMaxVal" val="1"/>
        <IOData name="floatAttribCurve">
         <float name="currentVal" val="0.546"/>
         <uint name="nbCurves" val="1"/>
         <IOData name="curve-0">
          <int name="interpType" val="0"/>
          <int name="leftType" val="0"/>
          <int name="rightType" val="0"/>
          <IOData name="interpolator">
           <uint name="nbPoints" val="1"/>
           <uint name="nbTangents" val="0"/>
           <vector2f name="controlPoint-0">
            <float name="0" val="0"/>
            <float name="1" val="0.546"/>
           </vector2f>
          </IOData>
         </IOData>
        </IOData>
        <uint name="nbChildren" val="0"/>
       </IOData>
      </IOData>
      <vector2f name="nodeInputPos-2-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <vector2f name="nodeInputPos-2-1">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <vector2f name="nodeOutputPos-2-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
     </IOData>
     <IOData name="nodeWidget-1">
      <uint name="nbChildren" val="3"/>
      <IOData name="childWidget-0">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-1">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-2">
       <uint name="nbChildren" val="1"/>
       <IOData name="childWidget-0">
        <bool name="floatAttribKeyframed" val="0"/>
        <float name="floatAttribMinVal" val="0"/>
        <float name="floatAttribMaxVal" val="1"/>
        <IOData name="floatAttribCurve">
         <float name="currentVal" val="0.546"/>
         <uint name="nbCurves" val="1"/>
         <IOData name="curve-0">
          <int name="interpType" val="0"/>
          <int name="leftType" val="0"/>
          <int name="rightType" val="0"/>
          <IOData name="interpolator">
           <uint name="nbPoints" val="1"/>
           <uint name="nbTangents" val="0"/>
           <vector2f name="controlPoint-0">
            <float name="0" val="0"/>
            <float name="1" val="0.546"/>
           </vector2f>
          </IOData>
         </IOData>
        </IOData>
        <uint name="nbChildren" val="0"/>
       </IOData>
      </IOData>
     </IOData>
     <vector2f name="nodeInputPos-1-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeOutputPos-1-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
    </IOData>
    <IOData name="nodeWidget-3">
     <uint name="nbChildren" val="2"/>
     <IOData name="childWidget-0">
      <bool name="keepAspectRatio" val="0"/>
      <bool name="keepSize" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <uint name="nbChildren" val="3"/>
      <IOData name="childWidget-0">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-1">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-2">
       <uint name="nbChildren" val="1"/>
       <IOData name="childWidget-0">
        <bool name="floatAttribKeyframed" val="0"/>
        <float name="floatAttribMinVal" val="0"/>
        <float name="floatAttribMaxVal" val="1"/>
        <IOData name="floatAttribCurve">
         <float name="currentVal" val="0.546"/>
         <uint name="nbCurves" val="1"/>
         <IOData name="curve-0">
          <int name="interpType" val="0"/>
          <int name="leftType" val="0"/>
          <int name="rightType" val="0"/>
          <IOData name="interpolator">
           <uint name="nbPoints" val="1"/>
           <uint name="nbTangents" val="0"/>
           <vector2f name="controlPoint-0">
            <float name="0" val="0"/>
            <float name="1" val="0.546"/>
           </vector2f>
          </IOData>
         </IOData>
        </IOData>
        <uint name="nbChildren" val="0"/>
       </IOData>
      </IOData>
     </IOData>
    </IOData>
    <vector2f name="nodeOutputPos-3-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-4" val="1"/>
    <IOData name="node-4">
     <uint name="nbNodes" val="2"/>
     <string name="nodeStringId-0" val="minColorID"/>
     <uint name="nodeVersion-0" val="1"/>
     <string name="nodeName-0" val="minColor"/>
     <string name="nodePath-0" val="Imaging/operators"/>
     <string name="nodeDesc-0" val="Min of 2 images"/>
     <string name="nodeHelp-0" val="Return the minimum color (RGBA channels) between 2 images. "/>
     <uint name="nodeId-0" val="0"/>
     <uint name="nodeGraphId-0" val="0"/>
     <vector2f name="nodePos-0">
      <float name="0" val="-817.48"/>
      <float name="1" val="0.0506592"/>
     </vector2f>
     <int name="nodeInputNameSize-0" val="2"/>
     <int name="nodeOutputNameSize-0" val="1"/>
     <string name="nodeInputName-0-0" val="img01"/>
     <string name="nodeInputName-0-1" val="img02"/>
     <string name="nodeOutputName-0-0" val="image"/>
     <string name="nodeStringId-1" val="globalMeanColorID"/>
     <uint name="nodeVersion-1" val="1"/>
     <string name="nodeName-1" val="globalMeanColor"/>
     <string name="nodePath-1" val="Analysis/global"/>
     <string name="nodeDesc-1" val="Mean color of an image"/>
     <string name="nodeHelp-1" val="Compute the mean color of an image. &#xa;The resulting color is stored in the last level of the output pyramid. &#xa;It can be accessed via the following formula: &#xa;&#xa;vec2 s = vec2(textureSize(image,0)); &#xa;float l = 1. + floor(log2(max(s.x,s.y))); &#xa;vec4 color = textureLod(image,vec2(.5),l); "/>
     <uint name="nodeId-1" val="1"/>
     <uint name="nodeGraphId-1" val="0"/>
     <vector2f name="nodePos-1">
      <float name="0" val="817.481"/>
      <float name="1" val="-0.0507812"/>
     </vector2f>
     <int name="nodeInputNameSize-1" val="1"/>
     <int name="nodeOutputNameSize-1" val="1"/>
     <string name="nodeInputName-1-0" val="image"/>
     <string name="nodeOutputName-1-0" val="meanColor"/>
     <uint name="nbConnections-0-1" val="1"/>
     <vector2u name="connection-0-1-0">
      <uint name="0" val="0"/>
      <uint name="1" val="0"/>
     </vector2u>
     <bool name="nodeHasWidget-0" val="1"/>
     <IOData name="node-0">
      <string name="genericGlslVersion" val="410"/>
      <string name="genericNodeName" val="minColor"/>
      <bool name="genericUseVertex" val="0"/>
      <bool name="genericUseTesselation" val="0"/>
      <bool name="genericUseGeometry" val="0"/>
      <bool name="genericUseFragment" val="1"/>
      <int name="genericOutFilter" val="9729"/>
      <int name="genericOutWrap" val="33071"/>
      <bool name="genericUseDepthTest" val="0"/>
      <bool name="genericUseBlending" val="0"/>
      <uint name="genericDepthFunc" val="513"/>
      <uint name="genericBlendSrc" val="1"/>
      <uint name="genericBlendDst" val="0"/>
      <vector4f name="genericBackground">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
       <float name="2" val="0"/>
       <float name="3" val="0"/>
      </vector4f>
      <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
      <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 image;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;vec4 col1 = texture(img01,texcoord);&#xa;&#x9;vec4 col2 = texture(img02,texcoord);&#xa;&#x9;image = min(col1,col2);&#xa;}&#xa;"/>
      <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
      <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
      <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
      <vector2f name="genericTSize">
       <float name="0" val="1"/>
       <float name="1" val="1"/>
      </vector2f>
      <vector2f name="genericTOffset">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
      </vector2f>
      <bool name="genericNeedMouse" val="0"/>
      <bool name="genericNeedKeyboard" val="0"/>
      <uint name="genericNbWidgets" val="0"/>
     </IOData>
     <IOData name="nodeWidget-0">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <vector2f name="nodeInputPos-0-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeInputPos-0-1">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeOutputPos-0-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <bool name="nodeHasWidget-1" val="1"/>
     <IOData name="node-1">
      <int name="processMode" val="0"/>
      <string name="genericGlslVersion" val="410"/>
      <string name="genericNodeName" val="globalMeanColor"/>
      <bool name="genericUseVertex" val="0"/>
      <bool name="genericUseTesselation" val="0"/>
      <bool name="genericUseGeometry" val="0"/>
      <bool name="genericUseFragment" val="1"/>
      <int name="genericOutFilter" val="9728"/>
      <int name="genericOutWrap" val="33071"/>
      <bool name="genericUseDepthTest" val="0"/>
      <bool name="genericUseBlending" val="0"/>
      <uint name="genericDepthFunc" val="513"/>
      <uint name="genericBlendSrc" val="1"/>
      <uint name="genericBlendDst" val="0"/>
      <vector4f name="genericBackground">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
       <float name="2" val="0"/>
       <float name="3" val="0"/>
      </vector4f>
      <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
      <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 meanColor;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;if(isFinest)&#xa;&#x9;&#x9;meanColor = texture(image,texcoord);&#xa;&#x9;else {&#xa;&#x9;&#x9;vec2 ps = .5/vec2(textureSize(prevLevel0,0));&#xa;&#x9;&#x9;vec4 c1 = texture(prevLevel0,texcoord+ps);&#xa;&#x9;&#x9;vec4 c2 = texture(prevLevel0,texcoord-ps);&#xa;&#x9;&#x9;vec4 c3 = texture(prevLevel0,texcoord+vec2(ps.x,-ps.y));&#xa;&#x9;&#x9;vec4 c4 = texture(prevLevel0,texcoord+vec2(-ps.x,ps.y));&#xa;&#x9;&#x9;meanColor = .25*(c1+c2+c3+c4);&#xa;&#x9;}&#xa;}&#xa;"/>
      <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
      <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
      <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
      <vector2f name="genericTSize">
       <float name="0" val="1"/>
       <float name="1" val="1"/>
      </vector2f>
      <vector2f name="genericTOffset">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
      </vector2f>
      <bool name="genericNeedMouse" val="0"/>
      <bool name="genericNeedKeyboard" val="0"/>
      <uint name="genericNbWidgets" val="0"/>
     </IOData>
     <IOData name="nodeWidget-1">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <vector2f name="nodeInputPos-1-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeOutputPos-1-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
    </IOData>
    <IOData name="nodeWidget-4">
     <uint name="nbChildren" val="2"/>
     <IOData name="childWidget-0">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <uint name="nbChildren" val="0"/>
     </IOData>
    </IOData>
    <vector2f name="nodeInputPos-4-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeInputPos-4-1">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-4-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-5" val="1"/>
    <IOData name="node-5">
     <uint name="nbNodes" val="2"/>
     <string name="nodeStringId-0" val="imgLoaderId"/>
     <uint name="nodeVersion-0" val="1"/>
     <string name="nodeName-0" val="imageLoader"/>
     <string name="nodePath-0" val="Imaging/"/>
     <string name="nodeDesc-0" val="Image loader"/>
     <string name="nodeHelp-0" val="Load an image."/>
     <uint name="nodeId-0" val="0"/>
     <uint name="nodeGraphId-0" val="0"/>
     <vector2f name="nodePos-0">
      <float name="0" val="-1548.21"/>
      <float name="1" val="506.441"/>
     </vector2f>
     <int name="nodeInputNameSize-0" val="0"/>
     <int name="nodeOutputNameSize-0" val="1"/>
     <string name="nodeOutputName-0-0" val="image"/>
     <string name="nodeStringId-1" val="_GRATIN_GROUPED_NODES_ID_"/>
     <uint name="nodeVersion-1" val="1"/>
     <string name="nodeName-1" val="toneMapTimo"/>
     <string name="nodePath-1" val="Imaging/tonemap/"/>
     <string name="nodeDesc-1" val="tmoMeanStd mixed with a black color."/>
     <string name="nodeHelp-1" val="basically the Mean&amp;Std Tone mapping, with a darkening feature."/>
     <uint name="nodeId-1" val="1"/>
     <uint name="nodeGraphId-1" val="0"/>
     <vector2f name="nodePos-1">
      <float name="0" val="1548.21"/>
      <float name="1" val="-506.441"/>
     </vector2f>
     <int name="nodeInputNameSize-1" val="1"/>
     <int name="nodeOutputNameSize-1" val="1"/>
     <string name="nodeInputName-1-0" val="image"/>
     <string name="nodeOutputName-1-0" val="toneMap"/>
     <uint name="nbConnections-0-1" val="1"/>
     <vector2u name="connection-0-1-0">
      <uint name="0" val="0"/>
      <uint name="1" val="0"/>
     </vector2u>
     <bool name="nodeHasWidget-0" val="1"/>
     <IOData name="node-0">
      <string name="filename" val="../../../../../pbrt/scenes/object/birdbody/impmapALL_birdbody_glass.exr"/>
      <vector2i name="size">
       <int name="0" val="1024"/>
       <int name="1" val="512"/>
      </vector2i>
     </IOData>
     <IOData name="nodeWidget-0">
      <bool name="keepAspectRatio" val="0"/>
      <bool name="keepSize" val="0"/>
     </IOData>
     <vector2f name="nodeOutputPos-0-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <bool name="nodeHasWidget-1" val="1"/>
     <IOData name="node-1">
      <uint name="nbNodes" val="3"/>
      <string name="nodeStringId-0" val="globalMeanColorID"/>
      <uint name="nodeVersion-0" val="1"/>
      <string name="nodeName-0" val="globalMeanColor"/>
      <string name="nodePath-0" val="Analysis/global"/>
      <string name="nodeDesc-0" val="Mean color of an image"/>
      <string name="nodeHelp-0" val="Compute the mean color of an image. &#xa;The resulting color is stored in the last level of the output pyramid. &#xa;It can be accessed via the following formula: &#xa;&#xa;vec2 s = vec2(textureSize(image,0)); &#xa;float l = 1. + floor(log2(max(s.x,s.y))); &#xa;vec4 color = textureLod(image,vec2(.5),l); "/>
      <uint name="nodeId-0" val="0"/>
      <uint name="nodeGraphId-0" val="0"/>
      <vector2f name="nodePos-0">
       <float name="0" val="-972.699"/>
       <float name="1" val="213.905"/>
      </vector2f>
      <int name="nodeInputNameSize-0" val="1"/>
      <int name="nodeOutputNameSize-0" val="1"/>
      <string name="nodeInputName-0-0" val="image"/>
      <string name="nodeOutputName-0-0" val="meanColor"/>
      <string name="nodeStringId-1" val="globalVarianceColorID"/>
      <uint name="nodeVersion-1" val="1"/>
      <string name="nodeName-1" val="globalVarianceColor"/>
      <string name="nodePath-1" val="Analysis/global"/>
      <string name="nodeDesc-1" val="Variance color of an image"/>
      <string name="nodeHelp-1" val="Compute the variance color of an image (only RGB channels). &#xa;&#xa;The input must be the output pyramid obtained with the node globalMeanColor.&#xa;&#xa;The resulting color is stored in the last level of the output pyramid. &#xa;It can be accessed via the following formula: &#xa;&#xa;vec2 s = vec2(textureSize(image,0)); &#xa;float l = 1. + floor(log2(max(s.x,s.y))); &#xa;vec4 color = textureLod(image,vec2(.5),l); &#xa;&#xa;// standard deviation&#xa;color = sqrt(color);"/>
      <uint name="nodeId-1" val="1"/>
      <uint name="nodeGraphId-1" val="0"/>
      <vector2f name="nodePos-1">
       <float name="0" val="-1.10541"/>
       <float name="1" val="-262.655"/>
      </vector2f>
      <int name="nodeInputNameSize-1" val="1"/>
      <int name="nodeOutputNameSize-1" val="1"/>
      <string name="nodeInputName-1-0" val="globalMeanPyramid"/>
      <string name="nodeOutputName-1-0" val="varianceColor"/>
      <string name="nodeStringId-2" val="imgGenericId"/>
      <uint name="nodeVersion-2" val="1"/>
      <string name="nodeName-2" val="tmoMeanStd"/>
      <string name="nodePath-2" val="Generic/"/>
      <string name="nodeDesc-2" val="Generic node for image processing"/>
      <string name="nodeHelp-2" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
      <uint name="nodeId-2" val="2"/>
      <uint name="nodeGraphId-2" val="0"/>
      <vector2f name="nodePos-2">
       <float name="0" val="973.804"/>
       <float name="1" val="48.751"/>
      </vector2f>
      <int name="nodeInputNameSize-2" val="2"/>
      <int name="nodeOutputNameSize-2" val="1"/>
      <string name="nodeInputName-2-0" val="meanPyramid"/>
      <string name="nodeInputName-2-1" val="variancePyramid"/>
      <string name="nodeOutputName-2-0" val="toneMap"/>
      <uint name="nbConnections-0-1" val="1"/>
      <vector2u name="connection-0-1-0">
       <uint name="0" val="0"/>
       <uint name="1" val="0"/>
      </vector2u>
      <uint name="nbConnections-0-2" val="1"/>
      <vector2u name="connection-0-2-0">
       <uint name="0" val="0"/>
       <uint name="1" val="0"/>
      </vector2u>
      <uint name="nbConnections-1-2" val="1"/>
      <vector2u name="connection-1-2-0">
       <uint name="0" val="0"/>
       <uint name="1" val="1"/>
      </vector2u>
      <bool name="nodeHasWidget-0" val="1"/>
      <IOData name="node-0">
       <int name="processMode" val="0"/>
       <string name="genericGlslVersion" val="410"/>
       <string name="genericNodeName" val="globalMeanColor"/>
       <bool name="genericUseVertex" val="0"/>
       <bool name="genericUseTesselation" val="0"/>
       <bool name="genericUseGeometry" val="0"/>
       <bool name="genericUseFragment" val="1"/>
       <int name="genericOutFilter" val="9728"/>
       <int name="genericOutWrap" val="33071"/>
       <bool name="genericUseDepthTest" val="0"/>
       <bool name="genericUseBlending" val="0"/>
       <uint name="genericDepthFunc" val="513"/>
       <uint name="genericBlendSrc" val="1"/>
       <uint name="genericBlendDst" val="0"/>
       <vector4f name="genericBackground">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
        <float name="2" val="0"/>
        <float name="3" val="0"/>
       </vector4f>
       <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
       <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 meanColor;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;if(isFinest)&#xa;&#x9;&#x9;meanColor = texture(image,texcoord);&#xa;&#x9;else {&#xa;&#x9;&#x9;vec2 ps = .5/vec2(textureSize(prevLevel0,0));&#xa;&#x9;&#x9;vec4 c1 = texture(prevLevel0,texcoord+ps);&#xa;&#x9;&#x9;vec4 c2 = texture(prevLevel0,texcoord-ps);&#xa;&#x9;&#x9;vec4 c3 = texture(prevLevel0,texcoord+vec2(ps.x,-ps.y));&#xa;&#x9;&#x9;vec4 c4 = texture(prevLevel0,texcoord+vec2(-ps.x,ps.y));&#xa;&#x9;&#x9;meanColor = .25*(c1+c2+c3+c4);&#xa;&#x9;}&#xa;}&#xa;"/>
       <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
       <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
       <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
       <vector2f name="genericTSize">
        <float name="0" val="1"/>
        <float name="1" val="1"/>
       </vector2f>
       <vector2f name="genericTOffset">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
       </vector2f>
       <bool name="genericNeedMouse" val="0"/>
       <bool name="genericNeedKeyboard" val="0"/>
       <uint name="genericNbWidgets" val="0"/>
      </IOData>
      <IOData name="nodeWidget-0">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <vector2f name="nodeInputPos-0-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <vector2f name="nodeOutputPos-0-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <bool name="nodeHasWidget-1" val="1"/>
      <IOData name="node-1">
       <int name="processMode" val="0"/>
       <string name="genericGlslVersion" val="410"/>
       <string name="genericNodeName" val="globalVarianceColor"/>
       <bool name="genericUseVertex" val="0"/>
       <bool name="genericUseTesselation" val="0"/>
       <bool name="genericUseGeometry" val="0"/>
       <bool name="genericUseFragment" val="1"/>
       <int name="genericOutFilter" val="9728"/>
       <int name="genericOutWrap" val="33071"/>
       <bool name="genericUseDepthTest" val="0"/>
       <bool name="genericUseBlending" val="0"/>
       <uint name="genericDepthFunc" val="513"/>
       <uint name="genericBlendSrc" val="1"/>
       <uint name="genericBlendDst" val="0"/>
       <vector4f name="genericBackground">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
        <float name="2" val="0"/>
        <float name="3" val="0"/>
       </vector4f>
       <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
       <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 varianceColor;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;if(isFinest) {&#xa;&#x9;&#x9;vec2 s = vec2(textureSize(globalMeanPyramid,0));&#xa;&#x9;&#x9;float l = 1.+ floor(log2(max(s.x,s.y)));&#xa;&#x9;&#x9;vec4 v = texture(globalMeanPyramid,texcoord);&#xa;&#x9;&#x9;v.xyz = v.xyz-textureLod(globalMeanPyramid,vec2(.5),l).xyz;&#xa;&#x9;&#x9;varianceColor = v*v;&#xa;&#x9;} else {&#xa;&#x9;&#x9;vec2 ps = .5/vec2(textureSize(prevLevel0,0));&#xa;&#x9;&#x9;vec4 c1 = texture(prevLevel0,texcoord+ps);&#xa;&#x9;&#x9;vec4 c2 = texture(prevLevel0,texcoord-ps);&#xa;&#x9;&#x9;vec4 c3 = texture(prevLevel0,texcoord+vec2(ps.x,-ps.y));&#xa;&#x9;&#x9;vec4 c4 = texture(prevLevel0,texcoord+vec2(-ps.x,ps.y));&#xa;&#x9;&#x9;varianceColor = .25*(c1+c2+c3+c4);&#xa;&#x9;}&#xa;}&#xa;"/>
       <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
       <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
       <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
       <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
       <vector2f name="genericTSize">
        <float name="0" val="1"/>
        <float name="1" val="1"/>
       </vector2f>
       <vector2f name="genericTOffset">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
       </vector2f>
       <bool name="genericNeedMouse" val="0"/>
       <bool name="genericNeedKeyboard" val="0"/>
       <uint name="genericNbWidgets" val="0"/>
      </IOData>
      <IOData name="nodeWidget-1">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <vector2f name="nodeInputPos-1-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <vector2f name="nodeOutputPos-1-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <bool name="nodeHasWidget-2" val="1"/>
      <IOData name="node-2">
       <string name="genericGlslVersion" val="410"/>
       <string name="genericNodeName" val="tmoMeanStd"/>
       <bool name="genericUseVertex" val="0"/>
       <bool name="genericUseTesselation" val="0"/>
       <bool name="genericUseGeometry" val="0"/>
       <bool name="genericUseFragment" val="1"/>
       <int name="genericOutFilter" val="9729"/>
       <int name="genericOutWrap" val="33071"/>
       <bool name="genericUseDepthTest" val="0"/>
       <bool name="genericUseBlending" val="0"/>
       <uint name="genericDepthFunc" val="513"/>
       <uint name="genericBlendSrc" val="1"/>
       <uint name="genericBlendDst" val="0"/>
       <vector4f name="genericBackground">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
        <float name="2" val="0"/>
        <float name="3" val="0"/>
       </vector4f>
       <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
       <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 toneMap;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;vec2 s = textureSize(meanPyramid,0);&#xa;&#x9;float l = 1.+floor(log2(max(s.x,s.y)));&#xa;&#xa;&#x9;vec4 col = textureLod(meanPyramid,texcoord,0);&#xa;&#x9;vec3 cmean = textureLod(meanPyramid,vec2(.5),l).xyz;&#xa;&#x9;vec3 cvar = textureLod(variancePyramid,vec2(.5),l).xyz;&#xa;&#x9;&#xa;&#x9;float smean = (cmean.r+cmean.g+cmean.b)/3.;&#xa;&#x9;float sstd = sqrt((cvar.r+cvar.g+cvar.b)/3.);&#xa;&#x9;&#xa;&#x9;col.xyz = ((col.xyz-vec3(smean))/sstd)/3.+vec3(.5);&#xa;&#xa;&#x9;vec4 black = vec4(0,0,0,1);&#xa;&#x9;toneMap = mix(col,black,alpha);&#xa;}&#xa;"/>
       <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
       <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
       <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;uniform float alpha;&#xa;"/>
       <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
       <vector2f name="genericTSize">
        <float name="0" val="1"/>
        <float name="1" val="1"/>
       </vector2f>
       <vector2f name="genericTOffset">
        <float name="0" val="0"/>
        <float name="1" val="0"/>
       </vector2f>
       <bool name="genericNeedMouse" val="0"/>
       <bool name="genericNeedKeyboard" val="0"/>
       <uint name="genericNbWidgets" val="1"/>
       <int name="genericWidgetType-0" val="0"/>
       <int name="genericWidgetView-0" val="1"/>
       <string name="genericWidgetName-0" val="alpha"/>
       <bool name="genericWidgetKeyframed-0" val="0"/>
      </IOData>
      <IOData name="nodeWidget-2">
       <uint name="nbChildren" val="1"/>
       <IOData name="childWidget-0">
        <bool name="floatAttribKeyframed" val="0"/>
        <float name="floatAttribMinVal" val="0"/>
        <float name="floatAttribMaxVal" val="1"/>
        <IOData name="floatAttribCurve">
         <float name="currentVal" val="0.546"/>
         <uint name="nbCurves" val="1"/>
         <IOData name="curve-0">
          <int name="interpType" val="0"/>
          <int name="leftType" val="0"/>
          <int name="rightType" val="0"/>
          <IOData name="interpolator">
           <uint name="nbPoints" val="1"/>
           <uint name="nbTangents" val="0"/>
           <vector2f name="controlPoint-0">
            <float name="0" val="0"/>
            <float name="1" val="0.546"/>
           </vector2f>
          </IOData>
         </IOData>
        </IOData>
        <uint name="nbChildren" val="0"/>
       </IOData>
      </IOData>
      <vector2f name="nodeInputPos-2-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <vector2f name="nodeInputPos-2-1">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
      <vector2f name="nodeOutputPos-2-0">
       <float name="0" val="112.64"/>
       <float name="1" val="28.16"/>
      </vector2f>
     </IOData>
     <IOData name="nodeWidget-1">
      <uint name="nbChildren" val="3"/>
      <IOData name="childWidget-0">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-1">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-2">
       <uint name="nbChildren" val="1"/>
       <IOData name="childWidget-0">
        <bool name="floatAttribKeyframed" val="0"/>
        <float name="floatAttribMinVal" val="0"/>
        <float name="floatAttribMaxVal" val="1"/>
        <IOData name="floatAttribCurve">
         <float name="currentVal" val="0.546"/>
         <uint name="nbCurves" val="1"/>
         <IOData name="curve-0">
          <int name="interpType" val="0"/>
          <int name="leftType" val="0"/>
          <int name="rightType" val="0"/>
          <IOData name="interpolator">
           <uint name="nbPoints" val="1"/>
           <uint name="nbTangents" val="0"/>
           <vector2f name="controlPoint-0">
            <float name="0" val="0"/>
            <float name="1" val="0.546"/>
           </vector2f>
          </IOData>
         </IOData>
        </IOData>
        <uint name="nbChildren" val="0"/>
       </IOData>
      </IOData>
     </IOData>
     <vector2f name="nodeInputPos-1-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeOutputPos-1-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
    </IOData>
    <IOData name="nodeWidget-5">
     <uint name="nbChildren" val="2"/>
     <IOData name="childWidget-0">
      <bool name="keepAspectRatio" val="0"/>
      <bool name="keepSize" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <uint name="nbChildren" val="3"/>
      <IOData name="childWidget-0">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-1">
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-2">
       <uint name="nbChildren" val="1"/>
       <IOData name="childWidget-0">
        <bool name="floatAttribKeyframed" val="0"/>
        <float name="floatAttribMinVal" val="0"/>
        <float name="floatAttribMaxVal" val="1"/>
        <IOData name="floatAttribCurve">
         <float name="currentVal" val="0.546"/>
         <uint name="nbCurves" val="1"/>
         <IOData name="curve-0">
          <int name="interpType" val="0"/>
          <int name="leftType" val="0"/>
          <int name="rightType" val="0"/>
          <IOData name="interpolator">
           <uint name="nbPoints" val="1"/>
           <uint name="nbTangents" val="0"/>
           <vector2f name="controlPoint-0">
            <float name="0" val="0"/>
            <float name="1" val="0.546"/>
           </vector2f>
          </IOData>
         </IOData>
        </IOData>
        <uint name="nbChildren" val="0"/>
       </IOData>
      </IOData>
     </IOData>
    </IOData>
    <vector2f name="nodeOutputPos-5-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-6" val="1"/>
    <IOData name="node-6">
     <uint name="nbNodes" val="2"/>
     <string name="nodeStringId-0" val="minColorID"/>
     <uint name="nodeVersion-0" val="1"/>
     <string name="nodeName-0" val="minColor"/>
     <string name="nodePath-0" val="Imaging/operators"/>
     <string name="nodeDesc-0" val="Min of 2 images"/>
     <string name="nodeHelp-0" val="Return the minimum color (RGBA channels) between 2 images. "/>
     <uint name="nodeId-0" val="0"/>
     <uint name="nodeGraphId-0" val="0"/>
     <vector2f name="nodePos-0">
      <float name="0" val="-817.48"/>
      <float name="1" val="0.0506592"/>
     </vector2f>
     <int name="nodeInputNameSize-0" val="2"/>
     <int name="nodeOutputNameSize-0" val="1"/>
     <string name="nodeInputName-0-0" val="img01"/>
     <string name="nodeInputName-0-1" val="img02"/>
     <string name="nodeOutputName-0-0" val="image"/>
     <string name="nodeStringId-1" val="globalMeanColorID"/>
     <uint name="nodeVersion-1" val="1"/>
     <string name="nodeName-1" val="globalMeanColor"/>
     <string name="nodePath-1" val="Analysis/global"/>
     <string name="nodeDesc-1" val="Mean color of an image"/>
     <string name="nodeHelp-1" val="Compute the mean color of an image. &#xa;The resulting color is stored in the last level of the output pyramid. &#xa;It can be accessed via the following formula: &#xa;&#xa;vec2 s = vec2(textureSize(image,0)); &#xa;float l = 1. + floor(log2(max(s.x,s.y))); &#xa;vec4 color = textureLod(image,vec2(.5),l); "/>
     <uint name="nodeId-1" val="1"/>
     <uint name="nodeGraphId-1" val="0"/>
     <vector2f name="nodePos-1">
      <float name="0" val="817.481"/>
      <float name="1" val="-0.0507812"/>
     </vector2f>
     <int name="nodeInputNameSize-1" val="1"/>
     <int name="nodeOutputNameSize-1" val="1"/>
     <string name="nodeInputName-1-0" val="image"/>
     <string name="nodeOutputName-1-0" val="meanColor"/>
     <uint name="nbConnections-0-1" val="1"/>
     <vector2u name="connection-0-1-0">
      <uint name="0" val="0"/>
      <uint name="1" val="0"/>
     </vector2u>
     <bool name="nodeHasWidget-0" val="1"/>
     <IOData name="node-0">
      <string name="genericGlslVersion" val="410"/>
      <string name="genericNodeName" val="minColor"/>
      <bool name="genericUseVertex" val="0"/>
      <bool name="genericUseTesselation" val="0"/>
      <bool name="genericUseGeometry" val="0"/>
      <bool name="genericUseFragment" val="1"/>
      <int name="genericOutFilter" val="9729"/>
      <int name="genericOutWrap" val="33071"/>
      <bool name="genericUseDepthTest" val="0"/>
      <bool name="genericUseBlending" val="0"/>
      <uint name="genericDepthFunc" val="513"/>
      <uint name="genericBlendSrc" val="1"/>
      <uint name="genericBlendDst" val="0"/>
      <vector4f name="genericBackground">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
       <float name="2" val="0"/>
       <float name="3" val="0"/>
      </vector4f>
      <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
      <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 image;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;vec4 col1 = texture(img01,texcoord);&#xa;&#x9;vec4 col2 = texture(img02,texcoord);&#xa;&#x9;image = min(col1,col2);&#xa;}&#xa;"/>
      <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
      <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
      <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D img01;&#xa;uniform sampler2D img02;&#xa;"/>
      <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
      <vector2f name="genericTSize">
       <float name="0" val="1"/>
       <float name="1" val="1"/>
      </vector2f>
      <vector2f name="genericTOffset">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
      </vector2f>
      <bool name="genericNeedMouse" val="0"/>
      <bool name="genericNeedKeyboard" val="0"/>
      <uint name="genericNbWidgets" val="0"/>
     </IOData>
     <IOData name="nodeWidget-0">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <vector2f name="nodeInputPos-0-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeInputPos-0-1">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeOutputPos-0-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <bool name="nodeHasWidget-1" val="1"/>
     <IOData name="node-1">
      <int name="processMode" val="0"/>
      <string name="genericGlslVersion" val="410"/>
      <string name="genericNodeName" val="globalMeanColor"/>
      <bool name="genericUseVertex" val="0"/>
      <bool name="genericUseTesselation" val="0"/>
      <bool name="genericUseGeometry" val="0"/>
      <bool name="genericUseFragment" val="1"/>
      <int name="genericOutFilter" val="9728"/>
      <int name="genericOutWrap" val="33071"/>
      <bool name="genericUseDepthTest" val="0"/>
      <bool name="genericUseBlending" val="0"/>
      <uint name="genericDepthFunc" val="513"/>
      <uint name="genericBlendSrc" val="1"/>
      <uint name="genericBlendDst" val="0"/>
      <vector4f name="genericBackground">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
       <float name="2" val="0"/>
       <float name="3" val="0"/>
      </vector4f>
      <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
      <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 meanColor;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;if(isFinest)&#xa;&#x9;&#x9;meanColor = texture(image,texcoord);&#xa;&#x9;else {&#xa;&#x9;&#x9;vec2 ps = .5/vec2(textureSize(prevLevel0,0));&#xa;&#x9;&#x9;vec4 c1 = texture(prevLevel0,texcoord+ps);&#xa;&#x9;&#x9;vec4 c2 = texture(prevLevel0,texcoord-ps);&#xa;&#x9;&#x9;vec4 c3 = texture(prevLevel0,texcoord+vec2(ps.x,-ps.y));&#xa;&#x9;&#x9;vec4 c4 = texture(prevLevel0,texcoord+vec2(-ps.x,ps.y));&#xa;&#x9;&#x9;meanColor = .25*(c1+c2+c3+c4);&#xa;&#x9;}&#xa;}&#xa;"/>
      <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
      <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
      <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;"/>
      <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
      <vector2f name="genericTSize">
       <float name="0" val="1"/>
       <float name="1" val="1"/>
      </vector2f>
      <vector2f name="genericTOffset">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
      </vector2f>
      <bool name="genericNeedMouse" val="0"/>
      <bool name="genericNeedKeyboard" val="0"/>
      <uint name="genericNbWidgets" val="0"/>
     </IOData>
     <IOData name="nodeWidget-1">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <vector2f name="nodeInputPos-1-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeOutputPos-1-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
    </IOData>
    <IOData name="nodeWidget-6">
     <uint name="nbChildren" val="2"/>
     <IOData name="childWidget-0">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <uint name="nbChildren" val="0"/>
     </IOData>
    </IOData>
    <vector2f name="nodeInputPos-6-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeInputPos-6-1">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-6-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-7" val="1"/>
    <IOData name="node-7">
     <string name="genericGlslVersion" val="420"/>
     <string name="genericNodeName" val="genericImage"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform int scale;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;layout(location = 1) out vec4 outBuffer1;&#xa;layout(location = 2) out vec4 outBuffer2;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform int scale;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#xa;&#x9;outBuffer0 = textureLod(inBuffer0,texcoord,20)*scale;&#xa;&#xa;&#x9;outBuffer1 = textureLod(inBuffer1,texcoord,20)*scale;&#xa;&#xa;&#x9;outBuffer2 = textureLod(inBuffer2,texcoord,20)*scale;&#xa;&#xa;&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform int scale;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform int scale;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;uniform int scale;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="1"/>
     <int name="genericWidgetType-0" val="1"/>
     <int name="genericWidgetView-0" val="1"/>
     <string name="genericWidgetName-0" val="scale"/>
     <bool name="genericWidgetKeyframed-0" val="0"/>
    </IOData>
    <IOData name="nodeWidget-7">
     <uint name="nbChildren" val="1"/>
     <IOData name="childWidget-0">
      <bool name="intAttribKeyframed" val="0"/>
      <int name="intAttribMinVal" val="1"/>
      <int name="intAttribMaxVal" val="200"/>
      <IOData name="intAttribCurve">
       <int name="currentVal" val="17"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="17"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
    </IOData>
    <vector2f name="nodeInputPos-7-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeInputPos-7-1">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeInputPos-7-2">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-7-0">
     <float name="0" val="112.64"/>
     <float name="1" val="1267.2"/>
    </vector2f>
    <vector2f name="nodeOutputPos-7-1">
     <float name="0" val="112.64"/>
     <float name="1" val="647.68"/>
    </vector2f>
    <vector2f name="nodeOutputPos-7-2">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-8" val="1"/>
    <IOData name="node-8">
     <string name="genericGlslVersion" val="420"/>
     <string name="genericNodeName" val="genericImage"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#x9;vec4 color = texture(inBuffer0,texcoord);&#xa;&#x9;color.z = 0;&#xa;&#x9;color.y = 0;&#xa;&#x9;outBuffer0 = color;&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-8">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-8-0">
     <float name="0" val="112.64"/>
     <float name="1" val="1267.2"/>
    </vector2f>
    <vector2f name="nodeOutputPos-8-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-9" val="1"/>
    <IOData name="node-9">
     <string name="genericGlslVersion" val="420"/>
     <string name="genericNodeName" val="genericImage"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#x9;vec4 color = texture(inBuffer0,texcoord);&#xa;&#x9;color.z = 0;&#xa;&#x9;color.y = 0;&#xa;&#x9;outBuffer0 = color;&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-9">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-9-0">
     <float name="0" val="112.64"/>
     <float name="1" val="647.68"/>
    </vector2f>
    <vector2f name="nodeOutputPos-9-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-10" val="1"/>
    <IOData name="node-10">
     <string name="genericGlslVersion" val="420"/>
     <string name="genericNodeName" val="genericImage"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#x9;vec4 color = texture(inBuffer0,texcoord);&#xa;&#x9;color.z = 0;&#xa;&#x9;color.y = 0;&#xa;&#x9;outBuffer0 = color;&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-10">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-10-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-10-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-11" val="1"/>
    <IOData name="node-11">
     <uint name="nbNodes" val="2"/>
     <string name="nodeStringId-0" val="imgGenericId"/>
     <uint name="nodeVersion-0" val="1"/>
     <string name="nodeName-0" val="genericImage"/>
     <string name="nodePath-0" val="Generic/"/>
     <string name="nodeDesc-0" val="Generic node for image processing"/>
     <string name="nodeHelp-0" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
     <uint name="nodeId-0" val="0"/>
     <uint name="nodeGraphId-0" val="0"/>
     <vector2f name="nodePos-0">
      <float name="0" val="-938.281"/>
      <float name="1" val="337.154"/>
     </vector2f>
     <int name="nodeInputNameSize-0" val="3"/>
     <int name="nodeOutputNameSize-0" val="1"/>
     <string name="nodeInputName-0-0" val="inBuffer0"/>
     <string name="nodeInputName-0-1" val="inBuffer1"/>
     <string name="nodeInputName-0-2" val="inBuffer2"/>
     <string name="nodeOutputName-0-0" val="outBuffer0"/>
     <string name="nodeStringId-1" val="displayCurveID"/>
     <uint name="nodeVersion-1" val="1"/>
     <string name="nodeName-1" val="displayCurve"/>
     <string name="nodePath-1" val="Visualization/"/>
     <string name="nodeDesc-1" val="Display an implicit curve f(x,y)=0"/>
     <string name="nodeHelp-1" val="Display an implicit curve f(x,y)=0. &#xa;Set your own equation in the evalFunc function. "/>
     <uint name="nodeId-1" val="1"/>
     <uint name="nodeGraphId-1" val="0"/>
     <vector2f name="nodePos-1">
      <float name="0" val="938.281"/>
      <float name="1" val="-337.154"/>
     </vector2f>
     <int name="nodeInputNameSize-1" val="1"/>
     <int name="nodeOutputNameSize-1" val="2"/>
     <string name="nodeInputName-1-0" val="image"/>
     <string name="nodeOutputName-1-0" val="slice"/>
     <string name="nodeOutputName-1-1" val="curve"/>
     <uint name="nbConnections-0-1" val="1"/>
     <vector2u name="connection-0-1-0">
      <uint name="0" val="0"/>
      <uint name="1" val="0"/>
     </vector2u>
     <bool name="nodeHasWidget-0" val="1"/>
     <IOData name="node-0">
      <string name="genericGlslVersion" val="420"/>
      <string name="genericNodeName" val="genericImage"/>
      <bool name="genericUseVertex" val="0"/>
      <bool name="genericUseTesselation" val="0"/>
      <bool name="genericUseGeometry" val="0"/>
      <bool name="genericUseFragment" val="1"/>
      <int name="genericOutFilter" val="9729"/>
      <int name="genericOutWrap" val="33071"/>
      <bool name="genericUseDepthTest" val="0"/>
      <bool name="genericUseBlending" val="0"/>
      <uint name="genericDepthFunc" val="513"/>
      <uint name="genericBlendSrc" val="1"/>
      <uint name="genericBlendDst" val="0"/>
      <vector4f name="genericBackground">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
       <float name="2" val="0"/>
       <float name="3" val="0"/>
      </vector4f>
      <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
      <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#xa;&#x9;vec2 dim = vec2(1200,1200);&#xa;&#xa;&#x9;if (dim.x * texcoord.x &lt; dim.x * 1/3) {&#xa;&#x9;&#x9;outBuffer0 = texture(inBuffer0,texcoord);&#xa;&#x9;}&#xa;&#xa;&#x9;else if (dim.x * texcoord.x >= dim.x * 2/3) {&#xa;&#x9;&#x9;outBuffer0 = texture(inBuffer2,texcoord);&#xa;&#x9;}&#xa;&#xa;&#x9;else {&#xa;&#x9;&#x9;outBuffer0 = texture(inBuffer1,texcoord);&#xa;&#x9;}&#xa;}&#xa;"/>
      <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
      <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
      <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
      <vector2f name="genericTSize">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
      </vector2f>
      <vector2f name="genericTOffset">
       <float name="0" val="1200"/>
       <float name="1" val="1200"/>
      </vector2f>
      <bool name="genericNeedMouse" val="0"/>
      <bool name="genericNeedKeyboard" val="0"/>
      <uint name="genericNbWidgets" val="0"/>
     </IOData>
     <IOData name="nodeWidget-0">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <vector2f name="nodeInputPos-0-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeInputPos-0-1">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeInputPos-0-2">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeOutputPos-0-0">
      <float name="0" val="132"/>
      <float name="1" val="66"/>
     </vector2f>
     <bool name="nodeHasWidget-1" val="1"/>
     <IOData name="node-1">
      <string name="genericGlslVersion" val="410"/>
      <string name="genericNodeName" val="displayCurve"/>
      <bool name="genericUseVertex" val="0"/>
      <bool name="genericUseTesselation" val="0"/>
      <bool name="genericUseGeometry" val="0"/>
      <bool name="genericUseFragment" val="1"/>
      <int name="genericOutFilter" val="9729"/>
      <int name="genericOutWrap" val="33071"/>
      <bool name="genericUseDepthTest" val="0"/>
      <bool name="genericUseBlending" val="0"/>
      <uint name="genericDepthFunc" val="513"/>
      <uint name="genericBlendSrc" val="1"/>
      <uint name="genericBlendDst" val="0"/>
      <vector4f name="genericBackground">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
       <float name="2" val="0"/>
       <float name="3" val="0"/>
      </vector4f>
      <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
      <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 slice;&#xa;layout(location = 1) out vec4 curve;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;const vec4 backgroundColor = vec4(1);&#xa;const vec4 axisColor = vec4(vec3(0.),1.);&#xa;const vec4 curveColor = vec4(1.,0.,0.,1.);&#xa;const float curveWidth = 2;&#xa;&#xa;vec2 ps = 1./vec2(textureSize(image,0));&#xa;float sliceYCoord = mouse.y*ps.y;&#xa;&#xa;float evalFunc(in vec2 p) {&#xa;&#x9;return texture(image,vec2(p.x,sliceYCoord)).x*scale-p.y;&#xa;}&#xa;&#xa;float distMix(in float v,in vec2 g,in float w) {&#xa;&#x9;return smoothstep(0.,w,abs(v)/max(length(g),1e-10));&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;// axis coord (in texture coord)&#xa;&#x9;vec2 a = texcoord;&#xa;&#x9;float vAxis = min(abs(a.x),abs(a.y));&#xa;&#xa;&#x9;// position&#xa;&#x9;vec2 p = texcoord;&#xa;&#xa;&#x9;// eval function and gradient&#xa;&#x9;float vFunc = evalFunc(p);&#xa;&#x9;vec2 gFunc = vec2(&#x9;evalFunc(p+vec2(ps.x,0.))-evalFunc(p-vec2(ps.x,0.)),&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;evalFunc(p+vec2(0.,ps.y))-evalFunc(p-vec2(0.,ps.y)))/(2.*ps);&#xa;&#xa;&#x9;// add colors &#xa;&#x9;float md = 1.; &#xa;&#x9;vec4 color = backgroundColor;&#xa;&#x9;color = mix(axisColor,color,distMix(vAxis,vec2(.5),.005));&#xa;&#x9;color = mix(curveColor,color,distMix(vFunc,gFunc,.005*md*curveWidth));&#xa;&#xa;&#x9;curve = color;&#xa;&#xa;&#x9;// image &#xa;&#x9;vec4 img = texture(image,texcoord);&#xa;&#x9;float dl = smoothstep(0.,0.01,abs(texcoord.y-sliceYCoord));&#xa;&#x9;slice = mix(mix(img,vec4(1,0,0,1),.5),img,dl);&#xa;&#x9;&#xa;&#x9;// test &#xa;&#x9;if(texcoord.y&lt;0.1) {&#xa;&#x9;&#x9;curve *= vec4(vec3(vFunc),1.);&#xa;&#x9;}&#xa;}&#xa;"/>
      <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
      <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
      <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
      <vector2f name="genericTSize">
       <float name="0" val="1"/>
       <float name="1" val="1"/>
      </vector2f>
      <vector2f name="genericTOffset">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
      </vector2f>
      <bool name="genericNeedMouse" val="1"/>
      <bool name="genericNeedKeyboard" val="0"/>
      <uint name="genericNbWidgets" val="1"/>
      <int name="genericWidgetType-0" val="0"/>
      <int name="genericWidgetView-0" val="1"/>
      <string name="genericWidgetName-0" val="scale"/>
      <bool name="genericWidgetKeyframed-0" val="1"/>
     </IOData>
     <IOData name="nodeWidget-1">
      <uint name="nbChildren" val="2"/>
      <IOData name="childWidget-0">
       <bool name="vector2iAttribKeyframed" val="1"/>
       <vector2i name="vector2iAttribMinVal">
        <int name="0" val="-10000"/>
        <int name="1" val="-10000"/>
       </vector2i>
       <vector2i name="vector2iAttribMaxVal">
        <int name="0" val="10000"/>
        <int name="1" val="10000"/>
       </vector2i>
       <IOData name="vector2iAttribCurve">
        <vector2i name="currentVal">
         <int name="0" val="503"/>
         <int name="1" val="304"/>
        </vector2i>
        <uint name="nbCurves" val="2"/>
        <IOData name="curve-0">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="503"/>
          </vector2f>
         </IOData>
        </IOData>
        <IOData name="curve-1">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="304"/>
          </vector2f>
         </IOData>
        </IOData>
       </IOData>
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-1">
       <bool name="floatAttribKeyframed" val="1"/>
       <float name="floatAttribMinVal" val="0"/>
       <float name="floatAttribMaxVal" val="10"/>
       <IOData name="floatAttribCurve">
        <float name="currentVal" val="1.18"/>
        <uint name="nbCurves" val="1"/>
        <IOData name="curve-0">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="1.18"/>
          </vector2f>
         </IOData>
        </IOData>
       </IOData>
       <uint name="nbChildren" val="0"/>
      </IOData>
     </IOData>
     <vector2f name="nodeInputPos-1-0">
      <float name="0" val="132"/>
      <float name="1" val="66"/>
     </vector2f>
     <vector2f name="nodeOutputPos-1-0">
      <float name="0" val="132"/>
      <float name="1" val="1518"/>
     </vector2f>
     <vector2f name="nodeOutputPos-1-1">
      <float name="0" val="132"/>
      <float name="1" val="66"/>
     </vector2f>
    </IOData>
    <IOData name="nodeWidget-11">
     <uint name="nbChildren" val="2"/>
     <IOData name="childWidget-0">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <uint name="nbChildren" val="2"/>
      <IOData name="childWidget-0">
       <bool name="vector2iAttribKeyframed" val="1"/>
       <vector2i name="vector2iAttribMinVal">
        <int name="0" val="-10000"/>
        <int name="1" val="-10000"/>
       </vector2i>
       <vector2i name="vector2iAttribMaxVal">
        <int name="0" val="10000"/>
        <int name="1" val="10000"/>
       </vector2i>
       <IOData name="vector2iAttribCurve">
        <vector2i name="currentVal">
         <int name="0" val="503"/>
         <int name="1" val="304"/>
        </vector2i>
        <uint name="nbCurves" val="2"/>
        <IOData name="curve-0">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="503"/>
          </vector2f>
         </IOData>
        </IOData>
        <IOData name="curve-1">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="304"/>
          </vector2f>
         </IOData>
        </IOData>
       </IOData>
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-1">
       <bool name="floatAttribKeyframed" val="1"/>
       <float name="floatAttribMinVal" val="0"/>
       <float name="floatAttribMaxVal" val="10"/>
       <IOData name="floatAttribCurve">
        <float name="currentVal" val="1.18"/>
        <uint name="nbCurves" val="1"/>
        <IOData name="curve-0">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="1.18"/>
          </vector2f>
         </IOData>
        </IOData>
       </IOData>
       <uint name="nbChildren" val="0"/>
      </IOData>
     </IOData>
    </IOData>
    <vector2f name="nodeInputPos-11-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeInputPos-11-1">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeInputPos-11-2">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-11-0">
     <float name="0" val="132"/>
     <float name="1" val="1518"/>
    </vector2f>
    <vector2f name="nodeOutputPos-11-1">
     <float name="0" val="132"/>
     <float name="1" val="66"/>
    </vector2f>
    <bool name="nodeHasWidget-12" val="1"/>
    <IOData name="node-12">
     <string name="genericGlslVersion" val="420"/>
     <string name="genericNodeName" val="genericImage"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#x9;vec4 color = texture(inBuffer0,texcoord);&#xa;&#x9;color.x = 0;&#xa;&#x9;color.z = 0;&#xa;&#x9;outBuffer0 = color;&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-12">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-12-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-12-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-13" val="1"/>
    <IOData name="node-13">
     <string name="genericGlslVersion" val="420"/>
     <string name="genericNodeName" val="genericImage"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#x9;vec4 color = texture(inBuffer0,texcoord);&#xa;&#x9;color.x = 0;&#xa;&#x9;color.z = 0;&#xa;&#x9;outBuffer0 = color;&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-13">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-13-0">
     <float name="0" val="112.64"/>
     <float name="1" val="647.68"/>
    </vector2f>
    <vector2f name="nodeOutputPos-13-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-14" val="1"/>
    <IOData name="node-14">
     <string name="genericGlslVersion" val="420"/>
     <string name="genericNodeName" val="genericImage"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#x9;vec4 color = texture(inBuffer0,texcoord);&#xa;&#x9;color.x = 0;&#xa;&#x9;color.z = 0;&#xa;&#x9;outBuffer0 = color;&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-14">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-14-0">
     <float name="0" val="112.64"/>
     <float name="1" val="1267.2"/>
    </vector2f>
    <vector2f name="nodeOutputPos-14-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-15" val="1"/>
    <IOData name="node-15">
     <uint name="nbNodes" val="2"/>
     <string name="nodeStringId-0" val="imgGenericId"/>
     <uint name="nodeVersion-0" val="1"/>
     <string name="nodeName-0" val="genericImage"/>
     <string name="nodePath-0" val="Generic/"/>
     <string name="nodeDesc-0" val="Generic node for image processing"/>
     <string name="nodeHelp-0" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
     <uint name="nodeId-0" val="0"/>
     <uint name="nodeGraphId-0" val="0"/>
     <vector2f name="nodePos-0">
      <float name="0" val="-938.281"/>
      <float name="1" val="337.154"/>
     </vector2f>
     <int name="nodeInputNameSize-0" val="3"/>
     <int name="nodeOutputNameSize-0" val="1"/>
     <string name="nodeInputName-0-0" val="inBuffer0"/>
     <string name="nodeInputName-0-1" val="inBuffer1"/>
     <string name="nodeInputName-0-2" val="inBuffer2"/>
     <string name="nodeOutputName-0-0" val="outBuffer0"/>
     <string name="nodeStringId-1" val="displayCurveID"/>
     <uint name="nodeVersion-1" val="1"/>
     <string name="nodeName-1" val="displayCurve"/>
     <string name="nodePath-1" val="Visualization/"/>
     <string name="nodeDesc-1" val="Display an implicit curve f(x,y)=0"/>
     <string name="nodeHelp-1" val="Display an implicit curve f(x,y)=0. &#xa;Set your own equation in the evalFunc function. "/>
     <uint name="nodeId-1" val="1"/>
     <uint name="nodeGraphId-1" val="0"/>
     <vector2f name="nodePos-1">
      <float name="0" val="938.281"/>
      <float name="1" val="-337.154"/>
     </vector2f>
     <int name="nodeInputNameSize-1" val="1"/>
     <int name="nodeOutputNameSize-1" val="2"/>
     <string name="nodeInputName-1-0" val="image"/>
     <string name="nodeOutputName-1-0" val="slice"/>
     <string name="nodeOutputName-1-1" val="curve"/>
     <uint name="nbConnections-0-1" val="1"/>
     <vector2u name="connection-0-1-0">
      <uint name="0" val="0"/>
      <uint name="1" val="0"/>
     </vector2u>
     <bool name="nodeHasWidget-0" val="1"/>
     <IOData name="node-0">
      <string name="genericGlslVersion" val="420"/>
      <string name="genericNodeName" val="genericImage"/>
      <bool name="genericUseVertex" val="0"/>
      <bool name="genericUseTesselation" val="0"/>
      <bool name="genericUseGeometry" val="0"/>
      <bool name="genericUseFragment" val="1"/>
      <int name="genericOutFilter" val="9729"/>
      <int name="genericOutWrap" val="33071"/>
      <bool name="genericUseDepthTest" val="0"/>
      <bool name="genericUseBlending" val="0"/>
      <uint name="genericDepthFunc" val="513"/>
      <uint name="genericBlendSrc" val="1"/>
      <uint name="genericBlendDst" val="0"/>
      <vector4f name="genericBackground">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
       <float name="2" val="0"/>
       <float name="3" val="0"/>
      </vector4f>
      <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
      <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#xa;&#x9;vec2 dim = vec2(1200,1200);&#xa;&#xa;&#x9;if (dim.x * texcoord.x &lt; dim.x * 1/3) {&#xa;&#x9;&#x9;outBuffer0 = texture(inBuffer0,texcoord);&#xa;&#x9;}&#xa;&#xa;&#x9;else if (dim.x * texcoord.x >= dim.x * 2/3) {&#xa;&#x9;&#x9;outBuffer0 = texture(inBuffer2,texcoord);&#xa;&#x9;}&#xa;&#xa;&#x9;else {&#xa;&#x9;&#x9;outBuffer0 = texture(inBuffer1,texcoord);&#xa;&#x9;}&#xa;}&#xa;"/>
      <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
      <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
      <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
      <vector2f name="genericTSize">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
      </vector2f>
      <vector2f name="genericTOffset">
       <float name="0" val="1200"/>
       <float name="1" val="1200"/>
      </vector2f>
      <bool name="genericNeedMouse" val="0"/>
      <bool name="genericNeedKeyboard" val="0"/>
      <uint name="genericNbWidgets" val="0"/>
     </IOData>
     <IOData name="nodeWidget-0">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <vector2f name="nodeInputPos-0-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeInputPos-0-1">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeInputPos-0-2">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeOutputPos-0-0">
      <float name="0" val="132"/>
      <float name="1" val="66"/>
     </vector2f>
     <bool name="nodeHasWidget-1" val="1"/>
     <IOData name="node-1">
      <string name="genericGlslVersion" val="410"/>
      <string name="genericNodeName" val="displayCurve"/>
      <bool name="genericUseVertex" val="0"/>
      <bool name="genericUseTesselation" val="0"/>
      <bool name="genericUseGeometry" val="0"/>
      <bool name="genericUseFragment" val="1"/>
      <int name="genericOutFilter" val="9729"/>
      <int name="genericOutWrap" val="33071"/>
      <bool name="genericUseDepthTest" val="0"/>
      <bool name="genericUseBlending" val="0"/>
      <uint name="genericDepthFunc" val="513"/>
      <uint name="genericBlendSrc" val="1"/>
      <uint name="genericBlendDst" val="0"/>
      <vector4f name="genericBackground">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
       <float name="2" val="0"/>
       <float name="3" val="0"/>
      </vector4f>
      <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
      <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 slice;&#xa;layout(location = 1) out vec4 curve;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;const vec4 backgroundColor = vec4(1);&#xa;const vec4 axisColor = vec4(vec3(0.),1.);&#xa;const vec4 curveColor = vec4(1.,0.,0.,1.);&#xa;const float curveWidth = 2;&#xa;&#xa;vec2 ps = 1./vec2(textureSize(image,0));&#xa;float sliceYCoord = mouse.y*ps.y;&#xa;&#xa;float evalFunc(in vec2 p) {&#xa;&#x9;return texture(image,vec2(p.x,sliceYCoord)).x*scale-p.y;&#xa;}&#xa;&#xa;float distMix(in float v,in vec2 g,in float w) {&#xa;&#x9;return smoothstep(0.,w,abs(v)/max(length(g),1e-10));&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;// axis coord (in texture coord)&#xa;&#x9;vec2 a = texcoord;&#xa;&#x9;float vAxis = min(abs(a.x),abs(a.y));&#xa;&#xa;&#x9;// position&#xa;&#x9;vec2 p = texcoord;&#xa;&#xa;&#x9;// eval function and gradient&#xa;&#x9;float vFunc = evalFunc(p);&#xa;&#x9;vec2 gFunc = vec2(&#x9;evalFunc(p+vec2(ps.x,0.))-evalFunc(p-vec2(ps.x,0.)),&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;evalFunc(p+vec2(0.,ps.y))-evalFunc(p-vec2(0.,ps.y)))/(2.*ps);&#xa;&#xa;&#x9;// add colors &#xa;&#x9;float md = 1.; &#xa;&#x9;vec4 color = backgroundColor;&#xa;&#x9;color = mix(axisColor,color,distMix(vAxis,vec2(.5),.005));&#xa;&#x9;color = mix(curveColor,color,distMix(vFunc,gFunc,.005*md*curveWidth));&#xa;&#xa;&#x9;curve = color;&#xa;&#xa;&#x9;// image &#xa;&#x9;vec4 img = texture(image,texcoord);&#xa;&#x9;float dl = smoothstep(0.,0.01,abs(texcoord.y-sliceYCoord));&#xa;&#x9;slice = mix(mix(img,vec4(1,0,0,1),.5),img,dl);&#xa;&#x9;&#xa;&#x9;// test &#xa;&#x9;if(texcoord.y&lt;0.1) {&#xa;&#x9;&#x9;curve *= vec4(vec3(vFunc),1.);&#xa;&#x9;}&#xa;}&#xa;"/>
      <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
      <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
      <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
      <vector2f name="genericTSize">
       <float name="0" val="1"/>
       <float name="1" val="1"/>
      </vector2f>
      <vector2f name="genericTOffset">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
      </vector2f>
      <bool name="genericNeedMouse" val="1"/>
      <bool name="genericNeedKeyboard" val="0"/>
      <uint name="genericNbWidgets" val="1"/>
      <int name="genericWidgetType-0" val="0"/>
      <int name="genericWidgetView-0" val="1"/>
      <string name="genericWidgetName-0" val="scale"/>
      <bool name="genericWidgetKeyframed-0" val="1"/>
     </IOData>
     <IOData name="nodeWidget-1">
      <uint name="nbChildren" val="2"/>
      <IOData name="childWidget-0">
       <bool name="vector2iAttribKeyframed" val="1"/>
       <vector2i name="vector2iAttribMinVal">
        <int name="0" val="-10000"/>
        <int name="1" val="-10000"/>
       </vector2i>
       <vector2i name="vector2iAttribMaxVal">
        <int name="0" val="10000"/>
        <int name="1" val="10000"/>
       </vector2i>
       <IOData name="vector2iAttribCurve">
        <vector2i name="currentVal">
         <int name="0" val="786"/>
         <int name="1" val="406"/>
        </vector2i>
        <uint name="nbCurves" val="2"/>
        <IOData name="curve-0">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="786"/>
          </vector2f>
         </IOData>
        </IOData>
        <IOData name="curve-1">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="406"/>
          </vector2f>
         </IOData>
        </IOData>
       </IOData>
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-1">
       <bool name="floatAttribKeyframed" val="1"/>
       <float name="floatAttribMinVal" val="0"/>
       <float name="floatAttribMaxVal" val="10"/>
       <IOData name="floatAttribCurve">
        <float name="currentVal" val="0.29"/>
        <uint name="nbCurves" val="1"/>
        <IOData name="curve-0">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="0.29"/>
          </vector2f>
         </IOData>
        </IOData>
       </IOData>
       <uint name="nbChildren" val="0"/>
      </IOData>
     </IOData>
     <vector2f name="nodeInputPos-1-0">
      <float name="0" val="132"/>
      <float name="1" val="66"/>
     </vector2f>
     <vector2f name="nodeOutputPos-1-0">
      <float name="0" val="132"/>
      <float name="1" val="1518"/>
     </vector2f>
     <vector2f name="nodeOutputPos-1-1">
      <float name="0" val="132"/>
      <float name="1" val="66"/>
     </vector2f>
    </IOData>
    <IOData name="nodeWidget-15">
     <uint name="nbChildren" val="2"/>
     <IOData name="childWidget-0">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <uint name="nbChildren" val="2"/>
      <IOData name="childWidget-0">
       <bool name="vector2iAttribKeyframed" val="1"/>
       <vector2i name="vector2iAttribMinVal">
        <int name="0" val="-10000"/>
        <int name="1" val="-10000"/>
       </vector2i>
       <vector2i name="vector2iAttribMaxVal">
        <int name="0" val="10000"/>
        <int name="1" val="10000"/>
       </vector2i>
       <IOData name="vector2iAttribCurve">
        <vector2i name="currentVal">
         <int name="0" val="786"/>
         <int name="1" val="406"/>
        </vector2i>
        <uint name="nbCurves" val="2"/>
        <IOData name="curve-0">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="786"/>
          </vector2f>
         </IOData>
        </IOData>
        <IOData name="curve-1">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="406"/>
          </vector2f>
         </IOData>
        </IOData>
       </IOData>
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-1">
       <bool name="floatAttribKeyframed" val="1"/>
       <float name="floatAttribMinVal" val="0"/>
       <float name="floatAttribMaxVal" val="10"/>
       <IOData name="floatAttribCurve">
        <float name="currentVal" val="0.29"/>
        <uint name="nbCurves" val="1"/>
        <IOData name="curve-0">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="0.29"/>
          </vector2f>
         </IOData>
        </IOData>
       </IOData>
       <uint name="nbChildren" val="0"/>
      </IOData>
     </IOData>
    </IOData>
    <vector2f name="nodeInputPos-15-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeInputPos-15-1">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeInputPos-15-2">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-15-0">
     <float name="0" val="132"/>
     <float name="1" val="1518"/>
    </vector2f>
    <vector2f name="nodeOutputPos-15-1">
     <float name="0" val="132"/>
     <float name="1" val="66"/>
    </vector2f>
    <bool name="nodeHasWidget-16" val="1"/>
    <IOData name="node-16">
     <string name="genericGlslVersion" val="420"/>
     <string name="genericNodeName" val="genericImage"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#x9;vec4 color = texture(inBuffer0,texcoord);&#xa;&#x9;color.x = 0;&#xa;&#x9;color.y = 0;&#xa;&#x9;outBuffer0 = color;&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-16">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-16-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-16-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-17" val="1"/>
    <IOData name="node-17">
     <string name="genericGlslVersion" val="420"/>
     <string name="genericNodeName" val="genericImage"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#x9;vec4 color = texture(inBuffer0,texcoord);&#xa;&#x9;color.x = 0;&#xa;&#x9;color.y = 0;&#xa;&#x9;outBuffer0 = color;&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-17">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-17-0">
     <float name="0" val="112.64"/>
     <float name="1" val="647.68"/>
    </vector2f>
    <vector2f name="nodeOutputPos-17-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-18" val="1"/>
    <IOData name="node-18">
     <string name="genericGlslVersion" val="420"/>
     <string name="genericNodeName" val="genericImage"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#x9;vec4 color = texture(inBuffer0,texcoord);&#xa;&#x9;color.x = 0;&#xa;&#x9;color.y = 0;&#xa;&#x9;outBuffer0 = color;&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-18">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-18-0">
     <float name="0" val="112.64"/>
     <float name="1" val="1267.2"/>
    </vector2f>
    <vector2f name="nodeOutputPos-18-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-19" val="1"/>
    <IOData name="node-19">
     <uint name="nbNodes" val="2"/>
     <string name="nodeStringId-0" val="imgGenericId"/>
     <uint name="nodeVersion-0" val="1"/>
     <string name="nodeName-0" val="genericImage"/>
     <string name="nodePath-0" val="Generic/"/>
     <string name="nodeDesc-0" val="Generic node for image processing"/>
     <string name="nodeHelp-0" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
     <uint name="nodeId-0" val="0"/>
     <uint name="nodeGraphId-0" val="0"/>
     <vector2f name="nodePos-0">
      <float name="0" val="-938.281"/>
      <float name="1" val="337.154"/>
     </vector2f>
     <int name="nodeInputNameSize-0" val="3"/>
     <int name="nodeOutputNameSize-0" val="1"/>
     <string name="nodeInputName-0-0" val="inBuffer0"/>
     <string name="nodeInputName-0-1" val="inBuffer1"/>
     <string name="nodeInputName-0-2" val="inBuffer2"/>
     <string name="nodeOutputName-0-0" val="outBuffer0"/>
     <string name="nodeStringId-1" val="displayCurveID"/>
     <uint name="nodeVersion-1" val="1"/>
     <string name="nodeName-1" val="displayCurve"/>
     <string name="nodePath-1" val="Visualization/"/>
     <string name="nodeDesc-1" val="Display an implicit curve f(x,y)=0"/>
     <string name="nodeHelp-1" val="Display an implicit curve f(x,y)=0. &#xa;Set your own equation in the evalFunc function. "/>
     <uint name="nodeId-1" val="1"/>
     <uint name="nodeGraphId-1" val="0"/>
     <vector2f name="nodePos-1">
      <float name="0" val="938.281"/>
      <float name="1" val="-337.154"/>
     </vector2f>
     <int name="nodeInputNameSize-1" val="1"/>
     <int name="nodeOutputNameSize-1" val="2"/>
     <string name="nodeInputName-1-0" val="image"/>
     <string name="nodeOutputName-1-0" val="slice"/>
     <string name="nodeOutputName-1-1" val="curve"/>
     <uint name="nbConnections-0-1" val="1"/>
     <vector2u name="connection-0-1-0">
      <uint name="0" val="0"/>
      <uint name="1" val="0"/>
     </vector2u>
     <bool name="nodeHasWidget-0" val="1"/>
     <IOData name="node-0">
      <string name="genericGlslVersion" val="420"/>
      <string name="genericNodeName" val="genericImage"/>
      <bool name="genericUseVertex" val="0"/>
      <bool name="genericUseTesselation" val="0"/>
      <bool name="genericUseGeometry" val="0"/>
      <bool name="genericUseFragment" val="1"/>
      <int name="genericOutFilter" val="9729"/>
      <int name="genericOutWrap" val="33071"/>
      <bool name="genericUseDepthTest" val="0"/>
      <bool name="genericUseBlending" val="0"/>
      <uint name="genericDepthFunc" val="513"/>
      <uint name="genericBlendSrc" val="1"/>
      <uint name="genericBlendDst" val="0"/>
      <vector4f name="genericBackground">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
       <float name="2" val="0"/>
       <float name="3" val="0"/>
      </vector4f>
      <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
      <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#xa;&#x9;vec2 dim = vec2(1200,1200);&#xa;&#xa;&#x9;if (dim.x * texcoord.x &lt; dim.x * 1/3) {&#xa;&#x9;&#x9;outBuffer0 = texture(inBuffer0,texcoord);&#xa;&#x9;}&#xa;&#xa;&#x9;else if (dim.x * texcoord.x >= dim.x * 2/3) {&#xa;&#x9;&#x9;outBuffer0 = texture(inBuffer2,texcoord);&#xa;&#x9;}&#xa;&#xa;&#x9;else {&#xa;&#x9;&#x9;outBuffer0 = texture(inBuffer1,texcoord);&#xa;&#x9;}&#xa;}&#xa;"/>
      <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
      <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
      <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;uniform sampler2D inBuffer1;&#xa;uniform sampler2D inBuffer2;&#xa;"/>
      <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
      <vector2f name="genericTSize">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
      </vector2f>
      <vector2f name="genericTOffset">
       <float name="0" val="1200"/>
       <float name="1" val="1200"/>
      </vector2f>
      <bool name="genericNeedMouse" val="0"/>
      <bool name="genericNeedKeyboard" val="0"/>
      <uint name="genericNbWidgets" val="0"/>
     </IOData>
     <IOData name="nodeWidget-0">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <vector2f name="nodeInputPos-0-0">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeInputPos-0-1">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeInputPos-0-2">
      <float name="0" val="112.64"/>
      <float name="1" val="28.16"/>
     </vector2f>
     <vector2f name="nodeOutputPos-0-0">
      <float name="0" val="132"/>
      <float name="1" val="66"/>
     </vector2f>
     <bool name="nodeHasWidget-1" val="1"/>
     <IOData name="node-1">
      <string name="genericGlslVersion" val="410"/>
      <string name="genericNodeName" val="displayCurve"/>
      <bool name="genericUseVertex" val="0"/>
      <bool name="genericUseTesselation" val="0"/>
      <bool name="genericUseGeometry" val="0"/>
      <bool name="genericUseFragment" val="1"/>
      <int name="genericOutFilter" val="9729"/>
      <int name="genericOutWrap" val="33071"/>
      <bool name="genericUseDepthTest" val="0"/>
      <bool name="genericUseBlending" val="0"/>
      <uint name="genericDepthFunc" val="513"/>
      <uint name="genericBlendSrc" val="1"/>
      <uint name="genericBlendDst" val="0"/>
      <vector4f name="genericBackground">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
       <float name="2" val="0"/>
       <float name="3" val="0"/>
      </vector4f>
      <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
      <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 slice;&#xa;layout(location = 1) out vec4 curve;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;const vec4 backgroundColor = vec4(1);&#xa;const vec4 axisColor = vec4(vec3(0.),1.);&#xa;const vec4 curveColor = vec4(1.,0.,0.,1.);&#xa;const float curveWidth = 2;&#xa;&#xa;vec2 ps = 1./vec2(textureSize(image,0));&#xa;float sliceYCoord = mouse.y*ps.y;&#xa;&#xa;float evalFunc(in vec2 p) {&#xa;&#x9;return texture(image,vec2(p.x,sliceYCoord)).x*scale-p.y;&#xa;}&#xa;&#xa;float distMix(in float v,in vec2 g,in float w) {&#xa;&#x9;return smoothstep(0.,w,abs(v)/max(length(g),1e-10));&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;// axis coord (in texture coord)&#xa;&#x9;vec2 a = texcoord;&#xa;&#x9;float vAxis = min(abs(a.x),abs(a.y));&#xa;&#xa;&#x9;// position&#xa;&#x9;vec2 p = texcoord;&#xa;&#xa;&#x9;// eval function and gradient&#xa;&#x9;float vFunc = evalFunc(p);&#xa;&#x9;vec2 gFunc = vec2(&#x9;evalFunc(p+vec2(ps.x,0.))-evalFunc(p-vec2(ps.x,0.)),&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;evalFunc(p+vec2(0.,ps.y))-evalFunc(p-vec2(0.,ps.y)))/(2.*ps);&#xa;&#xa;&#x9;// add colors &#xa;&#x9;float md = 1.; &#xa;&#x9;vec4 color = backgroundColor;&#xa;&#x9;color = mix(axisColor,color,distMix(vAxis,vec2(.5),.005));&#xa;&#x9;color = mix(curveColor,color,distMix(vFunc,gFunc,.005*md*curveWidth));&#xa;&#xa;&#x9;curve = color;&#xa;&#xa;&#x9;// image &#xa;&#x9;vec4 img = texture(image,texcoord);&#xa;&#x9;float dl = smoothstep(0.,0.01,abs(texcoord.y-sliceYCoord));&#xa;&#x9;slice = mix(mix(img,vec4(1,0,0,1),.5),img,dl);&#xa;&#x9;&#xa;&#x9;// test &#xa;&#x9;if(texcoord.y&lt;0.1) {&#xa;&#x9;&#x9;curve *= vec4(vec3(vFunc),1.);&#xa;&#x9;}&#xa;}&#xa;"/>
      <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
      <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
      <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
      <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
      <vector2f name="genericTSize">
       <float name="0" val="1"/>
       <float name="1" val="1"/>
      </vector2f>
      <vector2f name="genericTOffset">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
      </vector2f>
      <bool name="genericNeedMouse" val="1"/>
      <bool name="genericNeedKeyboard" val="0"/>
      <uint name="genericNbWidgets" val="1"/>
      <int name="genericWidgetType-0" val="0"/>
      <int name="genericWidgetView-0" val="1"/>
      <string name="genericWidgetName-0" val="scale"/>
      <bool name="genericWidgetKeyframed-0" val="1"/>
     </IOData>
     <IOData name="nodeWidget-1">
      <uint name="nbChildren" val="2"/>
      <IOData name="childWidget-0">
       <bool name="vector2iAttribKeyframed" val="1"/>
       <vector2i name="vector2iAttribMinVal">
        <int name="0" val="-10000"/>
        <int name="1" val="-10000"/>
       </vector2i>
       <vector2i name="vector2iAttribMaxVal">
        <int name="0" val="10000"/>
        <int name="1" val="10000"/>
       </vector2i>
       <IOData name="vector2iAttribCurve">
        <vector2i name="currentVal">
         <int name="0" val="503"/>
         <int name="1" val="304"/>
        </vector2i>
        <uint name="nbCurves" val="2"/>
        <IOData name="curve-0">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="503"/>
          </vector2f>
         </IOData>
        </IOData>
        <IOData name="curve-1">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="304"/>
          </vector2f>
         </IOData>
        </IOData>
       </IOData>
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-1">
       <bool name="floatAttribKeyframed" val="1"/>
       <float name="floatAttribMinVal" val="0"/>
       <float name="floatAttribMaxVal" val="10"/>
       <IOData name="floatAttribCurve">
        <float name="currentVal" val="0.2"/>
        <uint name="nbCurves" val="1"/>
        <IOData name="curve-0">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="0.2"/>
          </vector2f>
         </IOData>
        </IOData>
       </IOData>
       <uint name="nbChildren" val="0"/>
      </IOData>
     </IOData>
     <vector2f name="nodeInputPos-1-0">
      <float name="0" val="132"/>
      <float name="1" val="66"/>
     </vector2f>
     <vector2f name="nodeOutputPos-1-0">
      <float name="0" val="132"/>
      <float name="1" val="1518"/>
     </vector2f>
     <vector2f name="nodeOutputPos-1-1">
      <float name="0" val="132"/>
      <float name="1" val="66"/>
     </vector2f>
    </IOData>
    <IOData name="nodeWidget-19">
     <uint name="nbChildren" val="2"/>
     <IOData name="childWidget-0">
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <uint name="nbChildren" val="2"/>
      <IOData name="childWidget-0">
       <bool name="vector2iAttribKeyframed" val="1"/>
       <vector2i name="vector2iAttribMinVal">
        <int name="0" val="-10000"/>
        <int name="1" val="-10000"/>
       </vector2i>
       <vector2i name="vector2iAttribMaxVal">
        <int name="0" val="10000"/>
        <int name="1" val="10000"/>
       </vector2i>
       <IOData name="vector2iAttribCurve">
        <vector2i name="currentVal">
         <int name="0" val="503"/>
         <int name="1" val="304"/>
        </vector2i>
        <uint name="nbCurves" val="2"/>
        <IOData name="curve-0">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="503"/>
          </vector2f>
         </IOData>
        </IOData>
        <IOData name="curve-1">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="304"/>
          </vector2f>
         </IOData>
        </IOData>
       </IOData>
       <uint name="nbChildren" val="0"/>
      </IOData>
      <IOData name="childWidget-1">
       <bool name="floatAttribKeyframed" val="1"/>
       <float name="floatAttribMinVal" val="0"/>
       <float name="floatAttribMaxVal" val="10"/>
       <IOData name="floatAttribCurve">
        <float name="currentVal" val="0.2"/>
        <uint name="nbCurves" val="1"/>
        <IOData name="curve-0">
         <int name="interpType" val="0"/>
         <int name="leftType" val="0"/>
         <int name="rightType" val="0"/>
         <IOData name="interpolator">
          <uint name="nbPoints" val="1"/>
          <uint name="nbTangents" val="0"/>
          <vector2f name="controlPoint-0">
           <float name="0" val="0"/>
           <float name="1" val="0.2"/>
          </vector2f>
         </IOData>
        </IOData>
       </IOData>
       <uint name="nbChildren" val="0"/>
      </IOData>
     </IOData>
    </IOData>
    <vector2f name="nodeInputPos-19-0">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeInputPos-19-1">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeInputPos-19-2">
     <float name="0" val="112.64"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-19-0">
     <float name="0" val="132"/>
     <float name="1" val="1518"/>
    </vector2f>
    <vector2f name="nodeOutputPos-19-1">
     <float name="0" val="132"/>
     <float name="1" val="66"/>
    </vector2f>
   </IOData>
   <float name="scale" val="20.1962"/>
   <vector2f name="offset">
    <float name="0" val="8866.68"/>
    <float name="1" val="-771.159"/>
   </vector2f>
   <IOData name="animation">
    <uint name="firstFrame" val="0"/>
    <uint name="lastFrame" val="99"/>
    <uint name="currentFrame" val="0"/>
    <uint name="fps" val="24"/>
   </IOData>
  </IOData>
  <IOData name="animationWidget">
   <vector2i name="animationWidgetSize">
    <int name="0" val="640"/>
    <int name="1" val="480"/>
   </vector2i>
   <IOData name="timelineWidget"/>
  </IOData>
  <IOData name="nodeListWidget"/>
  <IOData name="interactionWidget">
   <float name="scale" val="3.15196"/>
   <vector2f name="offset">
    <float name="0" val="2502.8"/>
    <float name="1" val="449.109"/>
   </vector2f>
  </IOData>
  <IOData name="nodeInterfaceWidget"/>
 </IOData>
</Gratin>

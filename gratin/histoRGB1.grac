<Gratin type="node">
 <int name="majorVersion" val="0"/>
 <int name="minorVersion" val="3"/>
 <string name="coreHandleStringId" val="imgGenericId"/>
 <uint name="coreHandleVersion" val="1"/>
 <string name="nodeStringId-0" val="histoRGB"/>
 <uint name="nodeVersion-0" val="1"/>
 <string name="nodeName-0" val="histoRGB"/>
 <string name="nodePath-0" val="Custom"/>
 <string name="nodeDesc-0" val="Displays the histograms in gray and in R, G and B of an image. "/>
 <string name="nodeHelp-0" val="Displays the histograms in gray and in R, G and B of an image. More specifically used for the analysis of imp maps."/>
 <uint name="nodeId-0" val="14"/>
 <uint name="nodeGraphId-0" val="0"/>
 <vector2f name="nodePos-0">
  <float name="0" val="10423.5"/>
  <float name="1" val="-2953.34"/>
 </vector2f>
 <int name="nodeInputNameSize-0" val="1"/>
 <int name="nodeOutputNameSize-0" val="4"/>
 <string name="nodeInputName-0-0" val="image"/>
 <string name="nodeOutputName-0-0" val="curve"/>
 <string name="nodeOutputName-0-1" val="curveR"/>
 <string name="nodeOutputName-0-2" val="curveG"/>
 <string name="nodeOutputName-0-3" val="curveB"/>
 <bool name="nodeHasWidget-0" val="1"/>
 <IOData name="node-0">
  <string name="genericGlslVersion" val="410"/>
  <string name="genericNodeName" val="histoRGB"/>
  <bool name="genericUseVertex" val="0"/>
  <bool name="genericUseTesselation" val="0"/>
  <bool name="genericUseGeometry" val="0"/>
  <bool name="genericUseFragment" val="1"/>
  <int name="genericOutFilter" val="9729"/>
  <int name="genericOutWrap" val="33071"/>
  <bool name="genericUseDepthTest" val="0"/>
  <bool name="genericUseBlending" val="0"/>
  <uint name="genericDepthFunc" val="513"/>
  <uint name="genericBlendSrc" val="1"/>
  <uint name="genericBlendDst" val="0"/>
  <vector4f name="genericBackground">
   <float name="0" val="0"/>
   <float name="1" val="0"/>
   <float name="2" val="0"/>
   <float name="3" val="0"/>
  </vector4f>
  <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
  <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
  <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 curve;&#xa;layout(location = 1) out vec4 curveR;&#xa;layout(location = 2) out vec4 curveG;&#xa;layout(location = 3) out vec4 curveB;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
  <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;const vec4 backgroundColor = vec4(1);&#xa;const vec4 axisColor = vec4(vec3(0.),1.);&#xa;const vec4 curveColor = vec4(1.,0.,0.,1.);&#xa;const float curveWidth = 2;&#xa;&#xa;vec2 ps = 1./vec2(textureSize(image,0));&#xa;float sliceYCoord = mouse.y*ps.y;&#xa;&#xa;float evalFunc(in vec2 p, int i) {&#xa;&#x9;return texture(image,vec2(p.x,sliceYCoord))[i]*scale-p.y;&#xa;}&#xa;&#xa;float distMix(in float v,in vec2 g,in float w) {&#xa;&#x9;return smoothstep(0.,w,abs(v)/max(length(g),1e-10));&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;// axis coord (in texture coord)&#xa;&#x9;vec2 a = texcoord;&#xa;&#x9;float vAxis = min(abs(a.x),abs(a.y));&#xa;&#xa;&#x9;// position&#xa;&#x9;vec2 p = texcoord;&#xa;&#xa;&#x9;// eval function and gradient&#xa;&#xa;float vFuncR = evalFunc(p,0);&#xa;&#x9;vec2 gFuncR = vec2(&#x9;evalFunc(p+vec2(ps.x,0.),0)-evalFunc(p-vec2(ps.x,0.),0),&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;evalFunc(p+vec2(0.,ps.y),0)-evalFunc(p-vec2(0.,ps.y),0))/(2.*ps);&#xa;&#xa;float vFuncG = evalFunc(p,1);&#xa;&#x9;vec2 gFuncG = vec2(&#x9;evalFunc(p+vec2(ps.x,0.),1)-evalFunc(p-vec2(ps.x,0.),1),&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;evalFunc(p+vec2(0.,ps.y),1)-evalFunc(p-vec2(0.,ps.y),1))/(2.*ps);&#xa;&#xa;float vFuncB = evalFunc(p,2);&#xa;&#x9;vec2 gFuncB = vec2(&#x9;evalFunc(p+vec2(ps.x,0.),2)-evalFunc(p-vec2(ps.x,0.),2),&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;evalFunc(p+vec2(0.,ps.y),2)-evalFunc(p-vec2(0.,ps.y),2))/(2.*ps);&#xa;&#xa;&#xa;&#x9;float vFunc = (vFuncR+vFuncG+vFuncB)/3;&#xa;&#x9;vec2 gFunc = (gFuncR+gFuncG+gFuncB)/3;&#xa;&#xa;&#x9;// add colors &#xa;&#x9;float md = 1.; &#xa;&#x9;vec4 color = backgroundColor;&#xa;&#x9;color = mix(axisColor,color,distMix(vAxis,vec2(.5),.005));&#xa;&#xa;&#x9;curveR  = mix(curveColor,color,distMix(vFuncR,gFuncR,.005*md*curveWidth));&#xa;&#x9;curveG  = mix(curveColor,color,distMix(vFuncG,gFuncG,.005*md*curveWidth));&#xa;&#x9;curveB = mix(curveColor,color,distMix(vFuncB,gFuncB,.005*md*curveWidth));&#xa;&#x9;curve = mix(curveColor,color,distMix(vFunc,gFunc,.005*md*curveWidth));&#xa;&#xa;&#x9;// image &#xa;&#x9;vec4 img = texture(image,texcoord);&#xa;&#x9;float dl = smoothstep(0.,0.01,abs(texcoord.y-sliceYCoord));&#xa;&#x9;&#xa;&#x9;// test &#xa;&#x9;if(texcoord.y&lt;0.1) {&#xa;&#x9;&#x9;curve *= vec4(vec3(vFunc),1.);&#xa;&#x9;&#x9;curveR *= vec4(vec3(vFuncR),1.);&#xa;&#x9;&#x9;curveG *= vec4(vec3(vFuncG),1.);&#xa;&#x9;&#x9;curveB *= vec4(vec3(vFuncB),1.);&#xa;&#x9;}&#xa;}&#xa;"/>
  <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
  <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
  <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
  <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
  <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform vec2 mouse;&#xa;uniform float scale;&#xa;"/>
  <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
  <vector2f name="genericTSize">
   <float name="0" val="1"/>
   <float name="1" val="1"/>
  </vector2f>
  <vector2f name="genericTOffset">
   <float name="0" val="0"/>
   <float name="1" val="0"/>
  </vector2f>
  <bool name="genericNeedMouse" val="1"/>
  <bool name="genericNeedKeyboard" val="0"/>
  <uint name="genericNbWidgets" val="1"/>
  <int name="genericWidgetType-0" val="0"/>
  <int name="genericWidgetView-0" val="1"/>
  <string name="genericWidgetName-0" val="scale"/>
  <bool name="genericWidgetKeyframed-0" val="1"/>
 </IOData>
 <IOData name="nodeWidget-0">
  <uint name="nbChildren" val="2"/>
  <IOData name="childWidget-0">
   <bool name="vector2iAttribKeyframed" val="1"/>
   <vector2i name="vector2iAttribMinVal">
    <int name="0" val="-10000"/>
    <int name="1" val="-10000"/>
   </vector2i>
   <vector2i name="vector2iAttribMaxVal">
    <int name="0" val="10000"/>
    <int name="1" val="10000"/>
   </vector2i>
   <IOData name="vector2iAttribCurve">
    <vector2i name="currentVal">
     <int name="0" val="0"/>
     <int name="1" val="0"/>
    </vector2i>
    <uint name="nbCurves" val="2"/>
    <IOData name="curve-0">
     <int name="interpType" val="0"/>
     <int name="leftType" val="0"/>
     <int name="rightType" val="0"/>
     <IOData name="interpolator">
      <uint name="nbPoints" val="1"/>
      <uint name="nbTangents" val="0"/>
      <vector2f name="controlPoint-0">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
      </vector2f>
     </IOData>
    </IOData>
    <IOData name="curve-1">
     <int name="interpType" val="0"/>
     <int name="leftType" val="0"/>
     <int name="rightType" val="0"/>
     <IOData name="interpolator">
      <uint name="nbPoints" val="1"/>
      <uint name="nbTangents" val="0"/>
      <vector2f name="controlPoint-0">
       <float name="0" val="0"/>
       <float name="1" val="0"/>
      </vector2f>
     </IOData>
    </IOData>
   </IOData>
   <uint name="nbChildren" val="0"/>
  </IOData>
  <IOData name="childWidget-1">
   <bool name="floatAttribKeyframed" val="1"/>
   <float name="floatAttribMinVal" val="0"/>
   <float name="floatAttribMaxVal" val="10"/>
   <IOData name="floatAttribCurve">
    <float name="currentVal" val="0.93"/>
    <uint name="nbCurves" val="1"/>
    <IOData name="curve-0">
     <int name="interpType" val="0"/>
     <int name="leftType" val="0"/>
     <int name="rightType" val="0"/>
     <IOData name="interpolator">
      <uint name="nbPoints" val="1"/>
      <uint name="nbTangents" val="0"/>
      <vector2f name="controlPoint-0">
       <float name="0" val="0"/>
       <float name="1" val="0.93"/>
      </vector2f>
     </IOData>
    </IOData>
   </IOData>
   <uint name="nbChildren" val="0"/>
  </IOData>
 </IOData>
 <vector2f name="nodeInputPos-0-0">
  <float name="0" val="132"/>
  <float name="1" val="66"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-0">
  <float name="0" val="132"/>
  <float name="1" val="4422"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-1">
  <float name="0" val="132"/>
  <float name="1" val="2970"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-2">
  <float name="0" val="132"/>
  <float name="1" val="1518"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-3">
  <float name="0" val="132"/>
  <float name="1" val="66"/>
 </vector2f>
</Gratin>
